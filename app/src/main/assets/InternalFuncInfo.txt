::mfp::math::complex::abs 1 FALSE
Help
 @language:
 abs(x) returns modulus of a complex number or absolute value of a real number.
 @end
 @language:simplified_chinese
 abs(x)返回复数x的模或者实数x的绝对值。
 @end
 @language:traditional_chinese
 abs(x)返回復數x的模或者實數x的絕對值。
 @end
Endh
::mfp::paracomp::connect::accept 1 FALSE
Help
 @language:
 accept function accepts a connecting request from remote to a local interface and returns the receiver side connection object, i.e. the connection object in this local interface. It has only one parameter, i.e. the local interface object which was returned from generate_interface function. Note that before a new connecting request arrives, this function is blocked. An example of this function is accept(local_info).
 @end
 @language:simplified_chinese
 accept函数接收一个从远端到一个本地网络界面的连接请求然后返回接收端（也就是位于本地网络界面的）连接对象。它只有一个参数，也就是本地网络界面对象信息。网络界面对象信息通常是函数generate_interface的返回值。注意如果没有连接请求到来，该函数调用会阻塞当前线程。该函数的一个例子是accept(local_info)。
 @end
 @language:traditional_chinese
 accept函數接收一個從遠端到一個本地網絡界面的連接請求然後返回接收端（也就是位於本地網絡界面的）連接對象。它只有一個參數，也就是本地網絡界面對象信息。網絡界面對象信息通常是generate_interface函數的返回值。註意如果沒有連接請求到來，該函數調用會阻塞當前線程。該函數的一個例子是accept(local_info)。
 @end
Endh
::mfp::math::trigon::acos 1 FALSE
Help
 @language:
 acos(x), where x can be a complex number, returns arccos value of x.
 @end
 @language:simplified_chinese
 acos(x)返回x的反余弦值，注意x可以为复数。
 @end
 @language:traditional_chinese
 acos(x)返回x的反余弦值，注意x可以為復數。
 @end
Endh
::mfp::multimedia::webrtc_lib::add_peer_stream 1 FALSE
Help
 @language:
 add_peer_stream adds multimedia (i.e. video and voice) stream to a web RTC peer connection. Note that web RTC here is the web RTC library for voice and video communication, not the same thing as the WEBRTC protocol for data communication. It has one parameter which is the peerId, i.e. the remote address of the peer connection.
 @end
 @language:simplified_chinese
 add_peer_stream函数将多媒体流（也就是视频和音频）链入web RTC的peer connection对象。注意此处的web RTC是指的用于支持声音和视频通信的web RTC函数库，而不是用于支持数据通信的WEBRTC协议栈。它只有一个参数，就是peer connection对象的Id，也就是peer connection对象连接的远端的地址。
 @end
 @language:traditional_chinese
 add_peer_stream函數將多媒體流（也就是視頻和音頻）鏈入web RTC的peer connection對象。註意此處的web RTC是指的用於支持聲音和視頻通信的web RTC函數庫，而不是用於支持數據通信的WEBRTC協議棧。它只有一個參數，就是peer connection對象的Id，也就是peer connection對象連接的遠端的地址。
 @end
Endh
::mfp::multimedia::webrtc_lib::add_rtc_media_ice_candidate 2 FALSE
Help
 @language:
 This function adds an ICE candidate to a web RTC peer connection. It has two parameters. First is peer connection's Id. Second is string based content of this ICE candidate.
 @end
 @language:simplified_chinese
 add_rtc_media_ice_candidate函数将一个ICE协议候选对象加入到peer connection对象的ICE候选对象列表中。它有两个参数，第一个参数是peer connection对象的Id。第二个参数是基于字符串的ICE候选对象的内容。
 @end
 @language:traditional_chinese
 add_rtc_media_ice_candidate函數將一個ICE協議候選對象加入到peer connection對象的ICE候選對象列表中。它有兩個參數，第一個參數是peer connection對象的Id。第二個參數是基於字符串的ICE候選對象的內容。
 @end
Endh
::mfp::multimedia::webrtc_lib::add_rtc_video_output 5 FALSE
Help
 @language:
 add_rtc_video_output adds a RTC video window in a display. It has five parameters. The first one is a display handle, which is the returned value of open_screen_display function. The following parameters are the integer based left, top, width and height of the video output window. These parameters determine the position of the video output window in the display.
 @end
 @language:simplified_chinese
 add_rtc_video_output将一个RTC视频子窗口加到显示窗口上。它有五个参数，第一个参数是显示窗口的句柄，该句柄是open_screen_display函数的返回值。剩下的四个参数分别是基于整数的视频子窗口的左上顶点的横坐标，纵坐标，宽度和高度。这四个参数决定了视频子窗口在显示窗口上的位置。
 @end
 @language:traditional_chinese
 add_rtc_video_output將一個RTC視頻子窗口加到顯示窗口上。它有五個參數，第一個參數是顯示窗口的句柄，該句柄是open_screen_display函數的返回值。剩下的四個參數分別是基於整數的視頻子窗口的左上頂點的橫坐標，縱坐標，寬度和高度。這四個參數決定了視頻子窗口在顯示窗口上的位置。
 @end
Endh
::mfp::array::alloc_array 1 TRUE
Help
 @language:
 alloc_array(x...) returns a newly allocated array whose size is determined by parameters. All the parameters must be positive integers.
 @end
 @language:simplified_chinese
 alloc_array(x...)返回一个新分配的矩阵，其大小由参数决定。所有的参数都必须为正整数。
 @end
 @language:traditional_chinese
 alloc_array(x...)返回一個新分配的矩陣，其大小由參數決定。所有的參數都必須為正整數。
 @end
Endh
::mfp::array::alloc_array 2 FALSE
Help
 @language:
 alloc_array(x, y) returns a newly allocated array whose size is determined by parameter x which is a list of integer. Parameter y is the default value of array elements. Note that y is optional, by default all the elements are initialized as zero.
 @end
 @language:simplified_chinese
 alloc_array(x, y)返回一个新分配的矩阵，其大小由正整数数列参数x决定。参数y是矩阵中所有元素的初始值，注意y参数可省略，如果省略，所有元素被初始化为0。
 @end
 @language:traditional_chinese
 alloc_array(x, y)返回一個新分配的矩陣，其大小由正整數數列參數x決定。參數y是矩陣中所有元素的初始值，註意y參數可省略，如果省略，所有元素被初始化為0。
 @end
Endh
::mfp::math::logic::and 1 TRUE
Help
 @language:
 and(x...) which accepts an arbitary number (> 0) of boolean parameters, returns logical and of the parameters. If a parameter's type is not boolean, it will be automatically converted to boolean first.
 @end
 @language:simplified_chinese
 and(x...)接受不少于1个的任意个数的参数，返回这些参数的逻辑与值。如果某一个参数不是布尔类型，将会被自动转换为布尔类型。
 @end
 @language:traditional_chinese
 and(x...)接受不少於1個的任意個數的參數，返回這些參數的邏輯與值。如果某一個參數不是布爾類型，將會被自動轉換為布爾類型。
 @end
Endh
::mfp::math::complex::angle 1 FALSE
Help
 @language:
 angle(x) returns radian based angle of a complex number
 @end
 @language:simplified_chinese
 angle(x)返回复数x基于弧度的幅角值。
 @end
 @language:traditional_chinese
 angle(x)返回復數x基於弧度的幅角值。
 @end
Endh
::mfp::data_struct::array_based::append_elem_to_ablist 2 FALSE
Help
 @language:
 append_elem_to_ablist(array_based_list, ref_of_elem) appends a reference of value ref_of_elem at idx to an array based list array_based_list. It returns updated array based list. The parameter array_based_list will not change.
 @end
 @language:simplified_chinese
 append_elem_to_ablist(array_based_list, ref_of_elem)将ref_of_elem的引用添加到基于数组的序列array_based_list的尾部。它返回更新过的array_based_list。作为参数的array_based_list不会发生改变。
 @end
 @language:traditional_chinese
 append_elem_to_ablist(array_based_list, ref_of_elem)將ref_of_elem的引用添加到基於數組的序列array_based_list的尾部。它返回更新過的array_based_list。作為參數的array_based_list不會發生改變。
 @end
Endh
::mfp::math::trigon::asin 1 FALSE
Help
 @language:
 asin(x), where x can be a complex number, returns arcsin value of x.
 @end
 @language:simplified_chinese
 asin(x)返回x的反正弦值，注意x可以为复数。
 @end
 @language:traditional_chinese
 asin(x)返回x的反正弦值，注意x可以為復數。
 @end
Endh
::mfp::math::trigon::atan 1 FALSE
Help
 @language:
 atan(x) returns arctan value of x, where x can be a complex number.
 @end
 @language:simplified_chinese
 atan(x)返回x的反正切值，注意x可以为复数。
 @end
 @language:traditional_chinese
 atan(x)返回x的反正切值，注意x可以為復數。
 @end
Endh
::mfp::graph_lib::draw::calculate_text_boundary 4 FALSE
Help
 @language:
 calculate_text_boundary(display, string, text_origin, text_style) returns the boundary rectangle of a text block. The format of returned value is a four element array whose elements are [left, top, width, height]. This function's first parameter, display, can be either a screen display or an image display. The second parameter, string, is the multi-line text block. The third parameter is the text block's origin point ([x, y]). An origin point is used by draw_text function as a parameter to draw text. The last parameter, text_style, is a one or two element array. If it is a one element array. The element is a positve integer which is text font size. And the font is system default font. If it is a two element array, the first element is text font size and the second element is string based font name. Note that the last parameter is optional. By default, the system default font with size being 16 is used. Example of this function is: calculate_text_boundary(display, txtStr, [108, 190], [27, "SimSun"]).
 @end
 @language:simplified_chinese
 calculate_text_boundary(display, string, text_origin, text_style)返回一个 文本块的边界长方形。边界长方形是一个4元素数组，第一个元素是左边界，第二个元素是上边界，第三个元素是宽度，第四个元素是高度。Calculate_text_boundary的第一个参数是display，它既可以是screen display，也可以是image display。第二个参数是文本块的文本，可以不止一行。第三个参数是文本块起始点的位置。这是一个两元素数组，第一个元素是起始点横坐标，第二个元素是起始点纵坐标。最后一个参数是可省略参数，用于定义文本的字体和大小。如果它被省略，则字体为系统缺省字体，大小为16。如果它不被省略，那么它必须是一个包含一个或者两个元素的数组。如果是一个元素的数组，那么该元素必须是一个正整数，代表字体的大小，而字体则为系统缺省字体。如果是包含两个元素的数组，那么第一个元素为字体的大小，第二个元素是基于字符串的字体的名字。一个本函数的例子为：calculate_text_boundary(display, txtStr, [108, 190], [27, "SimSun"])。
 @end
 @language:traditional_chinese
 calculate_text_boundary(display, string, text_origin, text_style)返回一個 文本塊的邊界長方形。邊界長方形是一個4元素數組，第一個元素是左邊界，第二個元素是上邊界，第三個元素是寬度，第四個元素是高度。Calculate_text_boundary的第一個參數是display，它既可以是screen display，也可以是image display。第二個參數是文本塊的文本，可以不止一行。第三個參數是文本塊起始點的位置。這是一個兩元素數組，第一個元素是起始點橫坐標，第二個元素是起始點縱坐標。最後一個參數是可省略參數，用於定義文本的字體和大小。如果它被省略，則字體為系統缺省字體，大小為16。如果它不被省略，那麼它必須是一個包含一個或者兩個元素的數組。如果是一個元素的數組，那麼該元素必須是一個正整數，代表字體的大小，而字體則為系統缺省字體。如果是包含兩個元素的數組，那麼第一個元素為字體的大小，第二個元素是基於字串的字體的名字。一個本函數的例子為：calculate_text_boundary(display, txtStr, [108, 190], [27, "SimSun"])。
 @end
Endh
::mfp::graph_lib::draw::calculate_text_origin 8 FALSE
Help
 @language:
 calculate_text_origin(display, string, boundary_rect_left_top, width, height, horAlign, verAlign, text_style) returns the origin point of a text block given text block's boundary rectangle and alignments. The returned value, origin point, is a two element array (i.e. [x, y]) which will be used in draw_text function. Its first parameter, display, can be either a screen display or an image display. The second parameter, string, is the multi-line text block. The third parameter is the boundary rectangle's left and top. This is a two element array whose first element is left and second is top. The fourth and fifth parameters are width and height of the boundary rectangle respectively. The sixth parameter is the text block's horizontal alignment. -1 means left aligned, 0 means center aligned and 1 means right aligned. The seventh parameter is the text block's vertical alignment. -1 means top aligned, 0 means center aligned and 1 means bottom aligned. The last parameter, text style, is a one or two element array. If it is a one element array. The element is a positve integer which is text font size. And the font is system default font. If it is a two element array, the first element is text font size and the second element is string based font name. Note that the last parameter is optional. By default, the system default font with size being 16 is used. Example of this function is: calculate_text_origin(display, "pei is " + peichoices[idx], [256, 72], peiBndrySize[0], peiBndrySize[1], horAlign, verAlign, [22]) .
 @end
 @language:simplified_chinese
 calculate_text_origin(display, string, boundary_rect_left_top, width, height, horAlign, verAlign, text_style)返回指定边界长方形和对齐方式的文本块的起始点。起始点是一个两元素（[x,y]）数组，将会被draw_text作为参数使用。Calculate_text_origin的第一个参数是display，它既可以是screen display，也可以是image display。第二个参数是文本块的文本，可以不止一行。第三个参数是边界长方形的左上角位置。这是一个两元素数组，第一个元素是左边界坐标，第二个元素是上边界坐标。第四个和第五个参数是边界长方形的宽度和高度。第六个参数是文本块的横向对齐方式。-1表示左对齐，0表示中对齐，1表示右对齐。第七个参数是文本块的纵向对齐方式。-1表示上对齐，0表示中对齐，1表示下对齐。最后一个参数是可省略参数，用于定义文本的字体和大小。如果它被省略，则字体为系统缺省字体，大小为16。如果它不被省略，那么它必须是一个包含一个或者两个元素的数组。如果是一个元素的数组，那么该元素必须是一个正整数，代表字体的大小，而字体则为系统缺省字体。如果是包含两个元素的数组，那么第一个元素为字体的大小，第二个元素是基于字符串的字体的名字。一个本函数的例子为：calculate_text_origin(display, "pei is " + peichoices[idx], [256, 72], peiBndrySize[0], peiBndrySize[1], horAlign, verAlign, [22])。
 @end
 @language:traditional_chinese
 calculate_text_origin(display, string, boundary_rect_left_top, width, height, horAlign, verAlign, text_style)返回指定邊界長方形和對齊方式的文本塊的起始點。起始點是一個兩元素（[x,y]）數組，將會被draw_text作為參數使用。Calculate_text_origin的第一個參數是display，它既可以是screen display，也可以是image display。第二個參數是文本塊的文本，可以不止一行。第三個參數是邊界長方形的左上角位置。這是一個兩元素數組，第一個元素是左邊界座標，第二個元素是上邊界座標。第四個和第五個參數是邊界長方形的寬度和高度。第六個參數是文本塊的橫向對齊方式。-1表示左對齊，0表示中對齊，1表示右對齊。第七個參數是文本塊的縱向對齊方式。-1表示上對齊，0表示中對齊，1表示下對齊。最後一個參數是可省略參數，用於定義文本的字體和大小。如果它被省略，則字體為系統缺省字體，大小為16。如果它不被省略，那麼它必須是一個包含一個或者兩個元素的數組。如果是一個元素的數組，那麼該元素必須是一個正整數，代表字體的大小，而字體則為系統缺省字體。如果是包含兩個元素的數組，那麼第一個元素為字體的大小，第二個元素是基於字串的字體的名字。一個本函數的例子為：calculate_text_origin(display, "pei is " + peichoices[idx], [256, 72], peiBndrySize[0], peiBndrySize[1], horAlign, verAlign, [22])。
 @end
Endh
::mfp::io::file::cd 1 FALSE
Help
 @language:
 change_dir(path) (with alias cd(path)) changes current directory to string based value path. If successful, return true. Otherwise, return falses. Examples are change_dir("D:\\Windows") (Windows) and cd("/") (Android).
 @end
 @language:simplified_chinese
 change_dir(path)（别名cd(path)）将当前路径变为字符串路径path。如果成功，返回true，否则返回false。例子包括change_dir("D:\\Windows") (Windows)和cd("/") (Android)。
 @end
 @language:traditional_chinese
 change_dir(path)（別名cd(path)）將當前路徑變為字串路徑path。如果成功，返回true，否則返回false。例子包括change_dir("D:\\Windows") (Windows)和cd("/") (Android)。
 @end
Endh
::mfp::math::number::ceil 1 FALSE
Help
 @language:
 ceil(x), where x is a float value, returns the smallest integer no smaller than x.
 @end
 @language:simplified_chinese
 ceil(x)，x是浮点数，返回不小于x的最小整数。
 @end
 @language:traditional_chinese
 ceil(x)，x是浮點數，返回不小於x的最小整數。
 @end
Endh
::mfp::math::number::ceil 2 FALSE
Help
 @language:
 ceil(x,y), where x is a float value and y is a positive integer, returns the smallest float value with y digits after decimal point no smaller than x.
 @end
 @language:simplified_chinese
 ceil(x,y)，x是浮点数，y是非负整数，返回不小于x的小数点后面保留y位有效数字的最小数值。
 @end
 @language:traditional_chinese
 ceil(x,y)，x是浮點數，y是非負整數，返回不小於x的小數點後面保留y位有效數字的最小數值。
 @end
Endh
::mfp::io::file::change_dir 1 FALSE
Help
 @language:
 change_dir(path) (with alias cd(path)) changes current directory to string based value path. If successful, return true. Otherwise, return falses. Examples are change_dir("D:\\Windows") (Windows) and cd("/") (Android).
 @end
 @language:simplified_chinese
 change_dir(path)（别名cd(path)）将当前路径变为字符串路径path。如果成功，返回true，否则返回false。例子包括change_dir("D:\\Windows") (Windows)和cd("/") (Android)。
 @end
 @language:traditional_chinese
 change_dir(path)（別名cd(path)）將當前路徑變為字串路徑path。如果成功，返回true，否則返回false。例子包括change_dir("D:\\Windows") (Windows)和cd("/") (Android)。
 @end
Endh
::mfp::graph_lib::draw::clear_oval 5 FALSE
Help
 @language:
 clear_oval(owner_info, display, left_top, width, height) adds a painting event in the painting event scheduler. This painting event will clear an oval area from a display when the scheduler calls it. It has at 5 parameters. First parameter is owner_info, which tells painting event scheduler who owns this painting event. The owner_info can be a string (i.e. owner name), or an integer (i.e. owner id), or NULL (meaning that system owns it), or a two element array with its first element is either string based owner name, or integer based owner id, or NULL, and its second element is a double value representing a pseudo timestamp (It is not a real timestamp. It can be any double value. It will be used when developer tries to remove this event from painting event scheduler). The second parameter is display. It can be either a screen display or an image display. The third parameter is a two element array (i.e. [x, y]). It is the left top corner of the rectangle which contains the oval. The next two parameters are the width and height of the rectangle contains the oval. An example of this function is: clear_oval(["my draw", 0.381], d, [128, 45], 18, 30) . And another example is: clear_oval(NULL, d, [23, 111], 70, 19) .
 @end
 @language:simplified_chinese
 clear_oval(owner_info, display, left_top, width, height)为绘图事件调度器添加一个清除椭圆形的事件。在绘图事件调度器调用这个绘制事件时，该事件将在display上清除一个椭圆形。Clear_oval有5个参数。第一个参数是owner_info。Owner_info告诉绘图事件调度器谁拥有这个绘图事件。Owner_info可以是一个字符串，代表拥有者的名字，也可以是一个整数，代表拥有者的id，还可以是NULL，代表系统拥有该事件，更可以是一个包含两个元素的数组，其中第一个元素是一个代表拥有者名字的字符串，或者代表拥有者id的整数，或者代表系统的NULL，第二个元素是一个代表时标的浮点数，但要注意这里的时标不是真正的时标，该浮点数可以是任意值。该浮点数的值在清除本绘图事件时会发挥作用。第二个参数是display，它既可以是screen display，也可以是image display。第三个参数是包含两个元素的数组（[x,y]），表示该椭圆的包络长方形左上顶点的位置。第四个和第五个参数为该椭圆的包络长方形的长度和高度。Clear_oval的例子包括：clear_oval(["my draw", 0.381], d, [128, 45], 18, 30)以及clear_oval(NULL, d, [23, 111], 70, 19)。
 @end
 @language:traditional_chinese
 clear_oval(owner_info, display, left_top, width, height)為繪圖事件調度器添加一個清除橢圓形的事件。在繪圖事件調度器調用這個繪製事件時，該事件將在display上清除一個橢圓形。Clear_oval有5個參數。第一個參數是owner_info。Owner_info告訴繪圖事件調度器誰擁有這個繪圖事件。Owner_info可以是一個字串，代表擁有者的名字，也可以是一個整數，代表擁有者的id，還可以是NULL，代表系統擁有該事件，更可以是一個包含兩個元素的數組，其中第一個元素是一個代表擁有者名字的字串，或者代表擁有者id的整數，或者代表系統的NULL，第二個元素是一個代表時標的浮點數，但要注意這裏的時標不是真正的時標，該浮點數可以是任意值。該浮點數的值在清除本繪圖事件時會發揮作用。第二個參數是display，它既可以是screen display，也可以是image display。第三個參數是包含兩個元素的數組（[x,y]），表示該橢圓的包絡長方形左上頂點的位置。第四個和第五個參數為該橢圓的包絡長方形的長度和高度。Clear_oval的例子包括：clear_oval(["my draw", 0.381], d, [128, 45], 18, 30)以及clear_oval(NULL, d, [23, 111], 70, 19)。
 @end
Endh
::mfp::graph_lib::draw::clear_rect 5 FALSE
Help
 @language:
 clear_rect(owner_info, display, left_top, width, height) adds a painting event in the painting event scheduler. This painting event will clear a rectangle area from a display when the scheduler calls it. It has at 5 parameters. First parameter is owner_info, which tells painting event scheduler who owns this painting event. The owner_info can be a string (i.e. owner name), or an integer (i.e. owner id), or NULL (meaning that system owns it), or a two element array with its first element is either string based owner name, or integer based owner id, or NULL, and its second element is a double value representing a pseudo timestamp (It is not a real timestamp. It can be any double value. It will be used when developer tries to remove this event from painting event scheduler). The second parameter is display. It can be either a screen display or an image display. The third parameter is a two element array (i.e. [x, y]). It is the left top corner of the rectangle. The next two parameters are the width and height of the rectangle. An example of this function is: clear_rect(["my draw", 0.381], d, [128, 45], 18, 30) . And another example is: clear_rect(NULL, d, [23, 111], 70, 19) .
 @end
 @language:simplified_chinese
 clear_rect(owner_info, display, left_top, width, height)为绘图事件调度器添加一个清除长方形的事件。在绘图事件调度器调用这个绘制事件时，该事件将在display上清除一个长方形。Clear_rect有5个参数。第一个参数是owner_info。Owner_info告诉绘图事件调度器谁拥有这个绘图事件。Owner_info可以是一个字符串，代表拥有者的名字，也可以是一个整数，代表拥有者的id，还可以是NULL，代表系统拥有该事件，更可以是一个包含两个元素的数组，其中第一个元素是一个代表拥有者名字的字符串，或者代表拥有者id的整数，或者代表系统的NULL，第二个元素是一个代表时标的浮点数，但要注意这里的时标不是真正的时标，该浮点数可以是任意值。该浮点数的值在清除本绘图事件时会发挥作用。第二个参数是display，它既可以是screen display，也可以是image display。第三个参数是包含两个元素的数组（[x,y]），表示该长方形左上顶点的位置。第四个和第五个参数为长方形的长度和高度。Clear_rect的例子包括：clear_rect(["my draw", 0.381], d, [128, 45], 18, 30)以及clear_rect(NULL, d, [23, 111], 70, 19)。
 @end
 @language:traditional_chinese
 clear_rect(owner_info, display, left_top, width, height)為繪圖事件調度器添加一個清除長方形的事件。在繪圖事件調度器調用這個繪製事件時，該事件將在display上清除一個長方形。Clear_rect有5個參數。第一個參數是owner_info。Owner_info告訴繪圖事件調度器誰擁有這個繪圖事件。Owner_info可以是一個字串，代表擁有者的名字，也可以是一個整數，代表擁有者的id，還可以是NULL，代表系統擁有該事件，更可以是一個包含兩個元素的數組，其中第一個元素是一個代表擁有者名字的字串，或者代表擁有者id的整數，或者代表系統的NULL，第二個元素是一個代表時標的浮點數，但要注意這裏的時標不是真正的時標，該浮點數可以是任意值。該浮點數的值在清除本繪圖事件時會發揮作用。第二個參數是display，它既可以是screen display，也可以是image display。第三個參數是包含兩個元素的數組（[x,y]），表示該長方形左上頂點的位置。第四個和第五個參數為長方形的長度和高度。Clear_rect的例子包括：clear_rect(["my draw", 0.381], d, [128, 45], 18, 30)以及clear_rect(NULL, d, [23, 111], 70, 19)。
 @end
Endh
::mfp::object::clone 1 FALSE
Help
 @language:
 clone(source_value) clones source value and returns cloned copy of the source value. Source value can be anything including string, number, complex number and array. For example, if variable a is [1,2], user executes statement variable b = clone(a) and gets b = [1,2]. However, the returned [1,2] is not the same copy as parameter a. So if user changes a[0] to 3, a's new value is [3, 2] while b is still [1, 2].
 @end
 @language:simplified_chinese
 clone(source_value)复制输入参数source_value并返回source_value的拷贝。输入参数可以是任何数据类型，包括字符串，数，复数以及数组。比如，如果变量a等于[1,2]，用户执行语句variable b = clone(a)就会得的b等于[1,2]。但是这时候b和a是两个不同的数据。如果用户改变a的值，比如，设置a[0]等于3，a将会变成[3,2]但是b依然是[1，2]。
 @end
 @language:traditional_chinese
 clone(source_value)復制輸入參數source_value並返回source_value的拷貝。輸入參數可以是任何數據類型，包括字串，數，復數以及陣列。比如，如果變量a等於[1,2]，用戶執行語句variable b = clone(a)就會得的b等於[1,2]。但是這時候b和a是兩個不同的數據。如果用戶改變a的值，比如，設置a[0]等於3，a將會變成[3,2]但是b依然是[1，2]。
 @end
Endh
::mfp::multimedia::image_lib::clone_image 7 FALSE
Help
 @language:
 clone_image(image_src, src_left, src_top, src_right, src_bottom, dest_width, dest_height) returns a new wrapped JAVA image object with width = dest_width and height = dest_height. The returned image is a (zoomed) copy of image_src's selected area. The selected area's left, top, right and bottom are src_left, src_top, src_right and src_bottom respectively. Note that src_left, src_top, src_right and src_bottom are optional. By default, they equal 0, 0, width of image_src and height of image_src respectively. dest_width and dest_height are also optional. By default, dest_width equals src_right - src_left and dest_height equals src_bottom - src_top. An example of this function is clone_image(img_src, 0, 0, 100, 200, 50, 300) .
 @end
 @language:simplified_chinese
 clone_image(image_src, src_left, src_top, src_right, src_bottom, dest_width, dest_height)返回一个新的被包装过的JAVA图像对象。该图形对象的宽度为dest_width，高度为dest_height。这个被返回的图像是（被拉缩过的）原图像image_src的被选中的区块的拷贝。被选中的区块的左、上、右、下的坐标分别是src_left、src_top、src_right和src_bottom。注意src_left、src_top、src_right和src_botto是可选参数，它们的缺省值分别是0、0、image_src的宽度和image_src的高度。dest_width和dest_height也是可选参数。它们的缺省值分别是src_right - src_left以及src_bottom - src_top。本函数的一个例子为 clone_image(img_src, 0, 0, 100, 200, 50, 300)。
 @end
 @language:traditional_chinese
 clone_image(image_src, src_left, src_top, src_right, src_bottom, dest_width, dest_height)返回一個新的被包裝過的JAVA圖像對象。該圖形對象的寬度為dest_width，高度為dest_height。這個被返回的圖像是（被拉縮過的）原圖像image_src的被選中的區塊的拷貝。被選中的區塊的左、上、右、下的座標分別是src_left、src_top、src_right和src_bottom。注意src_left、src_top、src_right和src_botto是可選參數，它們的缺省值分別是0、0、image_src的寬度和image_src的高度。dest_width和dest_height也是可選參數。它們的缺省值分別是src_right - src_left以及src_bottom - src_top。本函數的一個例子為 clone_image(img_src, 0, 0, 100, 200, 50, 300)。
 @end
Endh
::mfp::paracomp::connect::close_connection 1 FALSE
Help
 @language:
 close_connection closes a connection. It has one parameter which is the connection object returned from connect function, accept function or get_incoming_connect function. A example of this function is close_connection(conn_obj).
 @end
 @language:simplified_chinese
 close_connection关闭一个连接对象。它只有一个参数，就是connect函数，accept函数或者get_incoming_connect函数返回的连接对象。本函数的一个例子为close_connection(conn_obj)。
 @end
 @language:traditional_chinese
 close_connection關閉一個連接對象。它只有一個參數，就是connect函數，accept函數或者get_incoming_connect函數返回的連接對象。本函數的一個例子為close_connection(conn_obj)。
 @end
Endh
::mfp::paracomp::connect::close_local 1 FALSE
Help
 @language:
 close_local closes a local interface. It has one parameter which is the local interface object returned from generate_interface function. A example of this function is close_local(local_info).
 @end
 @language:simplified_chinese
 close_local关闭一个本地网络界面。它只有一个参数，就是generate_interface函数返回的连接对象。本函数的一个例子为close_local(local_info)。
 @end
 @language:traditional_chinese
 close_local關閉一個本地網絡界面。它只有一個參數，就是generate_interface函數返回的連接對象。本函數的一個例子為close_local(local_info)。
 @end
Endh
::mfp::multimedia::webrtc_lib::close_rtc_media_peer 1 FALSE
Help
 @language:
 This function closes a web RTC peer connection. Note that web RTC here is the web RTC library for voice and video communication, not the same thing as the WEBRTC protocol for data communication. This function's only parameter is the web RTC peer connection Id, i.e. its remote address.
 @end
 @language:simplified_chinese
 本函数关闭一个web RTC的peer connection对象。注意此处的web RTC是指的用于支持声音和视频通信的web RTC函数库，而不是用于支持数据通信的WEBRTC协议栈。本函数唯一的参数是peer connection对象的Id，也就是它的远端地址。
 @end
 @language:traditional_chinese
 本函數關閉一個web RTC的peer connection對象。註意此處的web RTC是指的用於支持聲音和視頻通信的web RTC函數庫，而不是用於支持數據通信的WEBRTC協議棧。本函數唯一的參數是peer connection對象的Id，也就是它的遠端地址。
 @end
Endh
::mfp::data_struct::array_based::concat_ablists 2 FALSE
Help
 @language:
 concat_ablists(list1, list2) concatenates array based list2 to array_based list1 and returns merged array based list. The parameters list1 and list2 will not change.
 @end
 @language:simplified_chinese
 concat_ablists(list1, list2)将基于数组的序列list2并入基于数组的序列list1的尾部并返回合并后的基于数组的序列。作为参数的list1和list2不会发生改变。
 @end
 @language:traditional_chinese
 concat_ablists(list1, list2)將基於數組的序列list2併入基於數組的序列list1的尾部並返回合併後的基於數組的序列。作為參數的list1和list2不會發生改變。
 @end
Endh
::mfp::paracomp::connect::connect 3 FALSE
Help
 @language:
 connect(local_info, remote_info, not_reuse_exist) initializes a connection from a local interface object defined by local_info to a remote interface object defined by remote_info. Both local_info and remote_info are returned by calling generate_interface function. The third parameter, not_reuse_exist, is a boolean value. This parameter is optional. Its default value is false. If it is true, this function always creates a new connection instead of using an existing one (if there is). Note that a connection is two way. A connection can be reused by this function whether it is connected from the remote interface to the local interface or the other way around. However, reusing an incoming connection at server side is not straightforward for TCPIP protocol. This is because of two reasons. First, when a new connection is initialized at client side, the client side IP port is selected by operating system and is invisible to MFP. However, to reuse the incoming connection at server side, parameter remote_info has to include full client side address including both IP address and IP port. Second, if NAT layer exists between client side and server side, server side has no idea about client's real IP address and IP port anyway. In this case, MFP needs to analyze any message sent from the client side via this connection, read the field "TransConnectDestRemote" from the message where the accurate client side IP address and port are stored. Note that this client address is client's external address, i.e. client's address seen from server side, if NAT exists. Then generate_interface function can be called using the accurate client side IP address + port as a parameter to return the correct remote_info object. This function returns a dictionary with "CONNECT" key points to the definition of the connection object if successful, otherwise the "CONNECT" key corresponds to NULL and there is an "ERROR" key points to the error message.
 @end
 @language:simplified_chinese
 connect(local_info, remote_info, not_reuse_exist)函数建立一条从local_info所定义的本地网络界面到remote_info所定义的远端网络界面的网络连接。参数local_info和remote_info均可通过调用generate_interface函数获得。第三个参数也就是not_reuse_exist是一个可以省略的布尔值，其缺省值为false。如果它是true，本函数会重用本地网络界面和远端网络界面之间已存在的网络连接（如果有的话）。注意网络连接是双向的。一个网络连接无论是从本地网络界面连接到远端网络界面还是反过来，都是可以被本函数重用的。但需要注意的是，对于TCPIP协议，在服务端重用一个连入的网络连接不是那么容易。原因有两个，第一，当客户端发起一个连接时，客户端所使用的IP端口是由操作系统而不是MFP语言决定的，然而，在服务端，如果想要找到一个连入的网络连接，客户端的地址必须完整而精确，也就是说客户端的IP端口必不可少；其次，如果客户端和服务端之间存在NAT层，服务端不可能知道位于NAT层内部客户端实际的IP地址和端口。在这种情况下，如果想要重用已有的反向网络连接，MFP语言需要分析从客户端发送到服务端的消息，读取消息的"TransConnectDestRemote"值。该值就是该网络连接的客户端的地址的精确完整信息，如果该连接基于TCPIP协议，该值就是客户端的IP地址加IP端口。注意如果NAT层存在的话，该地址是从服务端看到的客户端地址而并非NAT层内部客户端实际的地址。获取客户端详细地址后再将该地址作为一个参数传入generate_interface函数便可获取准确的远端网络界面的信息，也就是remote_info。connect函数返回一个字典对象，如果调用成功，其"CONNECT"关键字的值便是连接对象的详细信息；反之，如果调用失败，"CONNECT"的值则是NULL，而额外的"ERROR"关键字的值就是出错信息。
 @end
 @language:traditional_chinese
 connect(local_info, remote_info, not_reuse_exist)函數建立一條從local_info所定義的本地網絡界面到remote_info所定義的遠端網絡界面的網絡連接。參數local_info和remote_info均可通過調用generate_interface函數獲得。第三個參數也就是not_reuse_exist是一個可以省略的布爾值，其缺省值為false。如果它是true，本函數會重用本地網絡界面和遠端網絡界面之間已存在的網絡連接（如果有的話）。註意網絡連接是雙向的。一個網絡連接無論是從本地網絡界面連接到遠端網絡界面還是反過來，都是可以被本函數重用的。但需要註意的是，對於TCPIP協議，在服務端重用一個連入的網絡連接不是那麽容易。原因有兩個，第一，當客戶端發起一個連接時，客戶端所使用的IP端口是由操作系統而不是MFP語言決定的，然而，在服務端，如果想要找到一個連入的網絡連接，客戶端的地址必須完整而精確，也就是說客戶端的IP端口必不可少；其次，如果客戶端和服務端之間存在NAT層，服務端不可能知道位於NAT層內部客戶端實際的IP地址和端口。在這種情況下，如果想要重用已有的反向網絡連接，MFP語言需要分析從客戶端發送到服務端的消息，讀取消息的"TransConnectDestRemote"值。該值就是該網絡連接的客戶端的地址的精確完整信息，如果該連接基於TCPIP協議，該值就是客戶端的IP地址加IP端口。註意如果NAT層存在的話，該地址是從服務端看到的客戶端地址而並非NAT層內部客戶端實際的地址。獲取客戶端詳細地址後再將該地址作為一個參數傳入generate_interface函數便可獲取準確的遠端網絡界面的信息，也就是remote_info。connect函數返回一個字典對象，如果調用成功，其"CONNECT"關鍵字的值便是連接對象的詳細信息；反之，如果調用失敗，"CONNECT"的值則是NULL，而額外的"ERROR"關鍵字的值就是出錯信息。
 @end
Endh
::mfp::math::number::conv_bin_to_dec 1 FALSE
Help
 @language:
 conv_bin_to_dec(x) converts a non-negative binary value or string x (can be float or integer) to a decimal value.
 @end
 @language:simplified_chinese
 conv_bin_to_dec(x)将一个二进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个十进制的数值。
 @end
 @language:traditional_chinese
 conv_bin_to_dec(x)將一個二進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個十進制的數值。
 @end
Endh
::mfp::math::number::conv_bin_to_hex 1 FALSE
Help
 @language:
 conv_bin_to_hex(x) converts a non-negative binary value or string x (can be float or integer) to a hexadecimal string.
 @end
 @language:simplified_chinese
 conv_bin_to_hex(x)将一个二进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个代表16进制数的字符串。
 @end
 @language:traditional_chinese
 conv_bin_to_hex(x)將一個二進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個代表16進制數的字串。
 @end
Endh
::mfp::math::number::conv_bin_to_oct 1 FALSE
Help
 @language:
 conv_bin_to_oct(x) converts a non-negative binary value or string x (can be float or integer) to an octal string.
 @end
 @language:simplified_chinese
 conv_bin_to_oct(x)将一个二进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个代表八进制数的字符串。
 @end
 @language:traditional_chinese
 conv_bin_to_oct(x)將一個二進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個代表八進制數的字串。
 @end
Endh
::mfp::math::number::conv_dec_to_bin 1 FALSE
Help
 @language:
 conv_dec_to_bin(x) converts a non-negative decimal value or string x (can be float or integer) to a binary string.
 @end
 @language:simplified_chinese
 conv_dec_to_bin(x)将一个十进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个代表二进制数的字符串。
 @end
 @language:traditional_chinese
 conv_dec_to_bin(x)將一個十進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個代表二進制數的字串。
 @end
Endh
::mfp::math::number::conv_dec_to_hex 1 FALSE
Help
 @language:
 conv_dec_to_hex(x) converts a non-negative decimal value or string x (can be float or integer) to a hexadecimal string.
 @end
 @language:simplified_chinese
 conv_dec_to_hex(x)将一个十进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个代表16进制数的字符串。
 @end
 @language:traditional_chinese
 conv_dec_to_hex(x)將一個十進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個代表16進制數的字串。
 @end
Endh
::mfp::math::number::conv_dec_to_oct 1 FALSE
Help
 @language:
 conv_dec_to_oct(x) converts a non-negative decimal value or string x (can be float or integer) to an octal string.
 @end
 @language:simplified_chinese
 conv_dec_to_oct(x)将一个十进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个代表八进制数的字符串。
 @end
 @language:traditional_chinese
 conv_dec_to_oct(x)將一個十進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個代表八進制數的字串。
 @end
Endh
::mfp::math::number::conv_hex_to_bin 1 FALSE
Help
 @language:
 conv_hex_to_bin(x) converts a non-negative hexadecimal value or string x (can be float or integer) to a binary string.
 @end
 @language:simplified_chinese
 conv_hex_to_bin(x)将一个16进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个代表二进制数的字符串。
 @end
 @language:traditional_chinese
 conv_hex_to_bin(x)將一個16進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個代表二進制數的字串。
 @end
Endh
::mfp::math::number::conv_hex_to_dec 1 FALSE
Help
 @language:
 conv_hex_to_dec(x) converts a non-negative hexadecimal value or string x (can be float or integer) to a decimal value.
 @end
 @language:simplified_chinese
 conv_hex_to_dec(x)将一个16进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个十进制的数值。
 @end
 @language:traditional_chinese
 conv_hex_to_dec(x)將一個16進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個十進制的數值。
 @end
Endh
::mfp::math::number::conv_hex_to_oct 1 FALSE
Help
 @language:
 conv_hex_to_oct(x) converts a non-negative hexadecimal value or string x (can be float or integer) to an octal string.
 @end
 @language:simplified_chinese
 conv_hex_to_oct(x)将一个16进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个代表八进制数的字符串。
 @end
 @language:traditional_chinese
 conv_hex_to_oct(x)將一個16進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個代表八進制數的字串。
 @end
Endh
::mfp::string::conv_ints_to_str 1 FALSE
Help
 @language:
 conv_ints_to_str(int_or_array) converts a single integer or a list of integer to a unicode string. If int_or_array is a single integer, then returned string includes a single char. Otherwise, returned string should have same number of characters as the element number in the integer array. If an integer is negative or beyond unicode char set range, this integer will be converted to the unicode char whose integer value is 0. For example, conv_ints_to_str([97, 98, 99]) returns "abc" and conv_ints_to_str(97) returns "a".
 @end
 @language:simplified_chinese
 conv_ints_to_str(int_or_array)将一个整数或者一组整数转换成一个Unicode字符串。如果只有一个整数，返回的字符串只包含一个Unicode字符，否则，返回字符串的字符数目和int_or_array中的元素数目一致。如果需要转换的整数是负数或者超出了Unicode字符集的定义范围，则被转换成整数0所对应的Unicode字符。示例包括conv_ints_to_str([20320, 22909, 25105, 22909, 22823, 23478, 22909])返回"你好我好大家好"，以及conv_ints_to_str(20320)返回"你"。
 @end
 @language:traditional_chinese
 conv_ints_to_str(int_or_array)將一個整數或者一組整數轉換成一個Unicode字串。如果只有一個整數，返回的字串只包含一個Unicode字符，否則，返回字串的字符數目和int_or_array中的元素數目一致。如果需要轉換的整數是負數或者超出了Unicode字符集的定義範圍，則被轉換成整數0所對應的Unicode字符。示例包括conv_ints_to_str([20320, 22909, 25105, 22909, 22823, 23478, 22909])返回"你好我好大家好"，以及conv_ints_to_str(20320)返回"你"。
 @end
Endh
::mfp::math::number::conv_oct_to_bin 1 FALSE
Help
 @language:
 conv_oct_to_bin(x) converts a non-negative octal value or string x (can be float or integer) to a binary string.
 @end
 @language:simplified_chinese
 conv_oct_to_bin(x)将一个八进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个代表二进制数的字符串。
 @end
 @language:traditional_chinese
 conv_oct_to_bin(x)將一個八進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個代表二進制數的字串。
 @end
Endh
::mfp::math::number::conv_oct_to_dec 1 FALSE
Help
 @language:
 conv_oct_to_dec(x) converts a non-negative octal value or string x (can be float or integer) to a decimal value.
 @end
 @language:simplified_chinese
 conv_oct_to_dec(x)将一个八进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个十进制的数值。
 @end
 @language:traditional_chinese
 conv_oct_to_dec(x)將一個八進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個十進制的數值。
 @end
Endh
::mfp::math::number::conv_oct_to_hex 1 FALSE
Help
 @language:
 conv_oct_to_hex(x) converts a non-negative octal value or string x (can be float or integer) to a hexadecimal string.
 @end
 @language:simplified_chinese
 conv_oct_to_hex(x)将一个八进制的非负数或代表该数的字符串x（x可以为浮点数，也可以为整数）转换为一个代表16进制数的字符串。
 @end
 @language:traditional_chinese
 conv_oct_to_hex(x)將一個八進制的非負數或代表該數的字串x（x可以為浮點數，也可以為整數）轉換為一個代表16進制數的字串。
 @end
Endh
::mfp::string::conv_str_to_ints 1 FALSE
Help
 @language:
 conv_str_to_ints(str) converts a unicode string to an integer array. Each unicode char in general corresponds to one integer (could be two integers, if the unicode char is beyond UTF-16 char set. However, this kind of unicode chars are not widely used). If string is empty, return a zero length array. For example, conv_str_to_ints("abc") returns [97, 98, 99].
 @end
 @language:simplified_chinese
 conv_str_to_ints(str)将一个Unicode字符串转换成一个整数数组。通常，一个Unicode字符对应一个整数（但也有可能对应两个整数，如果该Unicode字符超出了UTF-16字符集的范围。但这种情况很少出现）。如果字符串是空的，则返回一个空数组。一个示例为conv_str_to_ints("你好我好大家好")返回[20320, 22909, 25105, 22909, 22823, 23478, 22909]。
 @end
 @language:traditional_chinese
 conv_str_to_ints(str)將一個Unicode字串轉換成一個整數數組。通常，一個Unicode字符對應一個整數（但也有可能對應兩個整數，如果該Unicode字符超出了UTF-16字符集的範圍。但這種情況很少出現）。如果字串是空的，則返回一個空數組。一個示例為conv_str_to_ints("你好我好大家好")返回[20320, 22909, 25105, 22909, 22823, 23478, 22909]。
 @end
Endh
::mfp::io::file::copy_file 3 FALSE
Help
 @language:
 copy_file(source, destination, replace_exist) copies file or folder whose path is string source to file or folder whose path is string destination. If the 3rd parameter, replace_exist, is true, then source file (or any file in source folder) will replace destination file (or corresponding file in destination folder) if destination exists. Note that the 3rd parameter is optional. By default it is false. Examples are copy_file("c:\\temp\\try1", "D:\\", true) (Windows) and copy_file("/mnt/sdcard/testfile.txt", "./testfile_copy.txt") (Android).
 @end
 @language:simplified_chinese
 copy_file(source, destination, replace_exist)函数拷贝位于字符串source路径的文件或文件夹到位于字符串destination路径的文件或文件夹。如果第三个参数，replace_exist，是true，那么如果目标文件已经存在，它将会被源文件（或者源文件夹中的对应文件）替换。注意第三个参数可以省略，它的缺省值为false。 例子包括copy_file("c:\\temp\\try1", "D:\\", true) (Windows)和copy_file("/mnt/sdcard/testfile.txt", "./testfile_copy.txt") (Android)。
 @end
 @language:traditional_chinese
 copy_file(source, destination, replace_exist)函數程式拷貝位於字串source路徑的檔案或檔案目錄到位於字串destination路徑的檔案或檔案目錄。如果第三個參數，replace_exist，是true，那麼如果目標檔案已經存在，它將會被源檔案（或者源檔案目錄中的對應檔案）替換。註意第三個參數可以省略，它的缺省值為false。例子包括copy_file("c:\\temp\\try1", "D:\\", true) (Windows)和copy_file("/mnt/sdcard/testfile.txt", "./testfile_copy.txt") (Android)。
 @end
Endh
::mfp_compiler::annotation::build_asset::copy_to_resource 2 FALSE
Help
 @language:
 copy_to_resource(source_path, destination_path) is a function for MFP compiler, which means it takes effect only when MFP is packing scripts to build an MFP app. It copies file(s) in source_path to the destination_path inside Android assets folder. In this way an MFP app built from the current script can still find referred sound or image files by searching the MFP app's assets. It returns a three element array with first element is string based source path, second element is string based resource name and last element is string based destination path.
 @end
 @language:simplified_chinese
 copy_to_resource(source_path, destination_path)是一个用于编译的函数，也就是说它在打包脚本生成MFP应用时发挥作用。本函数source_path所指向的目标文件会被函数拷贝到assets目录下的destination_path所指向的文件。这样一来，一个从本脚本生成的MFP应用仍然能够在该应用的assets中找到程序中引用的图像或者声音文件。本函数返回一个包含三个元素的数组，第一个元素是一个字符串包含源文件路径，第二个是基于字符串的资源文件名，第三个是目标路径。
 @end
 @language:traditional_chinese
 copy_to_resource(source_path, destination_path)是一個用於編譯的函數，也就是說它在打包腳本生成MFP應用時發揮作用。本函數source_path所指向的目標檔會被函數拷貝到assets目錄下的destination_path所指向的檔。這樣一來，一個從本腳本生成的MFP應用仍然能夠在該應用的assets中找到程式中引用的圖像或者聲音檔。本函數返回一個包含三個元素的數組，第一個元素是一個字串包含原始檔案路徑，第二個是基於字串的資源檔案名，第三個是目標路徑。
 @end
Endh
::mfp::math::trigon::cos 1 FALSE
Help
 @language:
 cos(x) returns cos value of x, where x can be a complex number.
 @end
 @language:simplified_chinese
 cos(x)返回x的余弦值，x可以为复数。
 @end
 @language:traditional_chinese
 cos(x)返回x的余弦值，x可以為復數。
 @end
Endh
::mfp::data_struct::array_based::create_abdict 0 FALSE
Help
 @language:
 create_abdict() creates an empty array based dictionary.
 @end
 @language:simplified_chinese
 create_abdict()创建一个新的，基于数组的字典。
 @end
 @language:traditional_chinese
 create_abdict()創建一個新的，基於數組的字典。
 @end
Endh
::mfp::io::file::create_file 2 FALSE
Help
 @language:
 create_file(path, is_folder) create a file (if is_folder is false or does not exist) or folder (if is_folder is true). If the parent of string based parameter path does not exist, the parent will be created. If the file can be created, this function returns true, otherwise, returns false. Examples are create_file("c:\\temp\\try1", true) (Windows) and create_file("testfile_copy.txt") (Android).
 @end
 @language:simplified_chinese
 create_file(path, is_folder)创建一个文件（如果is_folder是false或者不存在）或者目录（如果if_folder是true）。如果这个基于字符串的路径path的上级目录不存在，不存在的上级目录将会被创建。如果文件能够被创建，这个函数返回true，否则返回false。例子包括create_file("c:\\temp\\try1", true) (Windows)和create_file("testfile_copy.txt") (Android)。
 @end
 @language:traditional_chinese
 create_file(path, is_folder)創建一個檔案（如果is_folder是false或者不存在）或者檔案 目錄（如果if_folder是true）。如果這個基於字串的路徑path的上級目錄不存在，不存在的上級目錄將會被創建。如果檔案能夠被創建，這個函數程式返回true，否則返回false。例子包括create_file("c:\\temp\\try1", true) (Windows)和create_file("testfile_copy.txt") (Android)。
 @end
Endh
::mfp::multimedia::image_lib::create_image 2 FALSE
Help
 @language:
 create_image(w, h) returns a new and blank wrapped JAVA image object with width = w and height = h.
 @end
 @language:simplified_chinese
 create_image(w, h)返回一个全新的，空白的被包装过的JAVA图像对象。该图形对象的宽度为w，高度为h。
 @end
 @language:traditional_chinese
 create_image(w, h)返回一個全新的，空白的被包裝過的JAVA圖像對象。該圖形對象的寬度為w，高度為h。
 @end
Endh
::mfp::multimedia::webrtc_lib::create_rtc_media_answer 5 FALSE
Help
 @language:
 This function creates a web RTC answer signal after an offer signal is received. Note that web RTC here is the web RTC library for voice and video communication, not the same thing as the WEBRTC protocol for data communication. It has five parameters. First is peer connection id. Second is SDP type. A string whose value is "offer" is expected. The third one is a string based SDP content, i.e. offer signal content. The fourth one is a map for mandatory constraint parameters. The last one is also a map for optional constraint parameters. The last parameter is optional. An example of this function is create_rtc_media_answer(remoteAddr, sdpType, sdpContent, [["OfferToReceiveAudio", "true"], ["OfferToReceiveVideo", supportVideoStr]], [["DtlsSrtpKeyAgreement", "true"]]) .
 @end
 @language:simplified_chinese
 本函数在接收到一个offer信令之后创建一个web RTC的answer信令。注意此处的web RTC是指的用于支持声音和视频通信的web RTC函数库，而不是用于支持数据通信的WEBRTC协议栈。本函数有5个参数。第一个是peer connection对象的id。第二个是SDP的类型。该参数应该就是一个"offer"字符串。第三个参数是SDP的内容，也就是offer信令的内容。第四个参数是强制性的限制参数集。最后一个参数是可选的限制参数集。最后一个参数可以省略。本函数的一个例子是create_rtc_media_answer(remoteAddr, sdpType, sdpContent, [["OfferToReceiveAudio", "true"], ["OfferToReceiveVideo", supportVideoStr]], [["DtlsSrtpKeyAgreement", "true"]])。
 @end
 @language:traditional_chinese
 本函數在接收到一個offer信令之後創建一個web RTC的answer信令。註意此處的web RTC是指的用於支持聲音和視頻通信的web RTC函數庫，而不是用於支持數據通信的WEBRTC協議棧。本函數有5個參數。第一個是peer connection對象的id。第二個是SDP的類型。該參數應該就是一個"offer"字符串。第三個參數是SDP的內容，也就是offer信令的內容。第四個參數是強制性的限制參數集。最後一個參數是可選的限制參數集。最後一個參數可以省略。本函數的一個例子是create_rtc_media_answer(remoteAddr, sdpType, sdpContent, [["OfferToReceiveAudio", "true"], ["OfferToReceiveVideo", supportVideoStr]], [["DtlsSrtpKeyAgreement", "true"]])。
 @end
Endh
::mfp::multimedia::webrtc_lib::create_rtc_media_offer 3 FALSE
Help
 @language:
 This function creates a web RTC offer signal. Note that web RTC here is the web RTC library for voice and video communication, not the same thing as the WEBRTC protocol for data communication. It has three parameters. First is peer connection id. The second one is a map for mandatory constraint parameters. The last one is also a map for optional constraint parameters. The last parameter is optional. An example of this function is create_rtc_media_offer(remoteAddr, [["OfferToReceiveAudio", "true"], ["OfferToReceiveVideo", supportVideoStr]], [["DtlsSrtpKeyAgreement", "true"]]) .
 @end
 @language:simplified_chinese
 本函数创建一个web RTC的offer信令。注意此处的web RTC是指的用于支持声音和视频通信的web RTC函数库，而不是用于支持数据通信的WEBRTC协议栈。本函数有3个参数。第一个是peer connection对象的id。第二个参数是强制性的限制参数集。最后一个参数是可选的限制参数集。最后一个参数可以省略。本函数的一个例子是create_rtc_media_offer(remoteAddr, [["OfferToReceiveAudio", "true"], ["OfferToReceiveVideo", supportVideoStr]], [["DtlsSrtpKeyAgreement", "true"]])。
 @end
 @language:traditional_chinese
 本函數創建一個web RTC的offer信令。註意此處的web RTC是指的用於支持聲音和視頻通信的web RTC函數庫，而不是用於支持數據通信的WEBRTC協議棧。本函數有3個參數。第一個是peer connection對象的id。第二個參數是強制性的限制參數集。最後一個參數是可選的限制參數集。最後一個參數可以省略。本函數的一個例子是create_rtc_media_offer(remoteAddr, [["OfferToReceiveAudio", "true"], ["OfferToReceiveVideo", supportVideoStr]], [["DtlsSrtpKeyAgreement", "true"]])。
 @end
Endh
::mfp::io::file::delete_file 2 FALSE
Help
 @language:
 delete_file(path, delete_children_in_folder) deletes a file or folder at string based parameter path. If it is a folder and the second parameter is true, all the files in the folder will be recursively deleted. The second parameter is optional. By default, it is false. If the file or folder can be deleted, this function returns true, otherwise, returns false. Examples are delete_file("c:\\temp\\try1", true) (Windows) and delete_file("testfile_copy.txt") (Android).
 @end
 @language:simplified_chinese
 delete_file(path, delete_children_in_folder)删除一个位于字符串path的文件或者目录。如果是一个目录且第二个参数delete_children_in_folder是true，目录中的所以文件和子目录将会被删除。注意第二个参数可以省略，它的缺省值是false。如果删除成功，本函数返回true，否则返回false。例子包括delete_file("c:\\temp\\try1", true) (Windows)和delete_file("testfile_copy.txt") (Android)。
 @end
 @language:traditional_chinese
 delete_file(path, delete_children_in_folder)刪除一個位於字串path的檔案或者檔案目錄。如果是一個目錄且第二個參數delete_children_in_folder是true，目錄中的所以檔案和子目錄將會被刪除。註意第二個參數可以省略，它的缺省值是false。如果刪除成功，本函數程式返回true，否則返回false。例子包括delete_file("c:\\temp\\try1", true) (Windows)和delete_file("testfile_copy.txt") (Android)。
 @end
Endh
::mfp::math::calculus::deri_ridders 4 FALSE
Help
 @language:
 deri_ridders(expr, var, val, ord) calculate ord-order derivative value of expression expr which is based on variable var when the variable's value is equal to val. This function always uses Ridders method. For example, deri_ridders("x**2+x","x",3,2) returns 2.
 @end
 @language:simplified_chinese
 deri_ridders(expr, var, val, ord)返回基于变量var的表达式expr在var等于val的时候的ord阶导数值。这个函数使用Ridders法进行计算。比如，deri_ridders("x**2+x","x",3,2)返回2。
 @end
 @language:traditional_chinese
 deri_ridders(expr, var, val, ord)返回基於變數var的運算式expr在var等於val的時候的ord階導數值。這個函數程式使用Ridders法進行計算。比如，deri_ridders("x**2+x","x",3,2)返回2。
 @end
Endh
::mfp::math::calculus::derivative 2 FALSE
Help
 @language:
 derivative(expression, variable) calculate derivative of expression which is based on variable. Note that both expression and variable must be strings. For example, derivative("x**2+x","x") returns a string based expression which is "2*x+1".
 @end
 @language:simplified_chinese
 derivative(expression, variable)返回基于变量variable的表达式expression的导数表达式。注意expression和variable均为字符串。比如，derivative("x**2+x","x")返回一个字符串表达式"2*x+1"。
 @end
 @language:traditional_chinese
 delete_file(path, derivative(expression, variable)返回基於變數variable的運算式expression的導數運算式。注意expression和variable均為字串。比如，derivative("x**2+x","x")返回一個字串運算式"2*x+1"。
 @end
Endh
::mfp::math::calculus::derivative 4 FALSE
Help
 @language:
 derivative(expr, var, val, method) calculate derivative value of expression expr which is based on variable var when the variable's value is equal to val. The parameter method selects the method to use. True means using Ridders method while false means simply calculating derivative expression value at val. For example, derivative("x**2+x","x",2,true) returns 5.
 @end
 @language:simplified_chinese
 derivative(expr, var, val, method)返回基于变量var的表达式expr在var等于val的时候的导数值。参数method用于选择计算方法，如果是true，意味着使用Ridders法进行计算，如果是false，则只是简单地计算导数表达式在val时候的值。比如，derivative("x**2+x","x",2,true)返回5。
 @end
 @language:traditional_chinese
 derivative(expr, var, val, method)返回基於變數var的運算式expr在var等於val的時候的導數值。參數method用於選擇計算方法，如果是true，意味著使用Ridders法進行計算，如果是false，則只是簡單地計算導數運算式在val時候的值。比如，derivative("x**2+x","x",2,true)返回5。
 @end
Endh
::mfp::math::matrix::det 1 FALSE
Help
 @language:
 det(x) calculates square matrix x's determinant.
 @end
 @language:simplified_chinese
 det(x)计算2维方阵x的行列式值。
 @end
 @language:traditional_chinese
 det(x)計算2維方陣x的行列式值。
 @end
Endh
::mfp::math::matrix::deter 1 FALSE
Help
 @language:
 deter(x) calculates square matrix x's determinant.
 @end
 @language:simplified_chinese
 deter(x)计算2维方阵x的行列式值。
 @end
 @language:traditional_chinese
 deter(x)計算2維方陣x的行列式值。
 @end
Endh
::mfp::io::file::dir 1 FALSE
Help
 @language:
 print_file_list(path) (alias ls(path) or dir(path)) works like ls command in Linux or dir command in Windows. It print the information for the file or all the files in folder at string based path. It returns the number of entries that printed. If the path does not corresponds to an existing file or folder, it returns -1. Note that path is optional. By default it is current folder ("."). Examples are dir() (Windows) and ls("../testfile_copy.txt") (Android).
 @end
 @language:simplified_chinese
 print_file_list(path) (alias ls(path) or dir(path))函数和Windows平台上的dir命令以及Linux平台上的ls命令类似。它打印出位于字符串path路径的文件或者目录中的所有子文件和子目录的信息。它返回打印的条目的个数。如果不存在一个文件或者目录对应于path路径，它返回-1。注意参数path是可以省略的。它的缺省值是当前目录。例子包括dir() (Windows)和ls("../testfile_copy.txt") (Android)。
 @end
 @language:traditional_chinese
 print_file_list(path) (alias ls(path) or dir(path))函數程式和Windows平臺上的dir命令以及Linux平臺上的ls命令類似。它打印出位於字串path路徑的档案或者目錄中的所有子档案和子目錄的信息。它返回打印的條目的個數。如果不存在一個檔案或者目錄對應於path路徑，它返回-1。註意參數path是可以省略的。它的缺省值是當前目錄。例子包括dir("c:\\temp\\try1") (Windows)和ls("../testfile_copy.txt") (Android)。
 @end
Endh
::mfp::graph_lib::draw::draw_image 12 FALSE
Help
 @language:
 Function draw_image adds a painting event in the painting event scheduler. This painting event will draw an image in a display when the scheduler calls it. This function has two different overloads. First is draw_image(owner_info, display, image_or_path, left, top, width_ratio, height_ratio, painting_extra_info). Second is draw_image(owner_info, display, image_or_path, srcx1, srcy1, srcx2, srcy2, destx1, desty1, destx2, desty2, painting_extra_info). In both of the overloads, the first parameter is owner_info, which tells painting event scheduler who owns this painting event. The owner_info can be a string (i.e. owner name), or an integer (i.e. owner id), or NULL (meaning that system owns it), or a two element array with its first element is either string based owner name, or integer based owner id, or NULL, and its second element is a double value representing a pseudo timestamp (It is not a real timestamp. It can be any double value. It will be used when developer tries to remove this event from painting event scheduler). The second parameter is display. It can be either a screen display or an image display. The third parameter is an image handle or a path string which points to an image file. The last parameter is painting_extra_info. It tells painting event scheduler what porterduff mode should be selected to draw. This parameter is optional. Because the underlying mechanism of porterduff mode is quite intricate, developer may simply use its default value (i.e. ignore it since it is optional). For detailed information about painting extra info, developer may refer to set_porterduff_mode and get_porterduff_mode functions. For detailed information about porterduff mode, developer may refer to JAVA documentation. In the first overload, the fourth to seventh parameters are, respectively, left of the rectangle where the image will be drawn to, top of the rectangle where the image will be drawn to, the ratio by which the image will be zoomed along width when drawing (optional with 1.0 as its default), and the ratio by which the image will be zoomed along height when drawing (optional with 1.0 as its default). In the second overload, the fourth to eleventh parameters are, respectively, left of source rectangle, top of source rectangle, right of source rectangle, bottom of source rectangle, left of destination rectangle, top of destination rectangle, right of destination rectangle, and bottom of destination rectangle.
Examples of this function are: draw_image("image", display, get_upper_level_path(get_src_file_path()) + "gem4.png", 48, 157) , draw_image("image", display, gem3Img, 148, 257, 3, 0.5) and draw_image("imagesrc", display, gem3Img, 0, 0, 32, 32, 210, 540, 300, 580, a_painting_extra_info).
 @end
 @language:simplified_chinese
 draw_image为绘图事件调度器添加一个绘制图像的事件。在绘图事件调度器调用这个绘制事件时，该事件将在display上绘制一个图像。Draw_image有两个不同的重载调用方式。第一个是draw_image(owner_info, display, image_or_path, left, top, width_ratio, height_ratio, painting_extra_info)。第二个是draw_image(owner_info, display, image_or_path, srcx1, srcy1, srcx2, srcy2, destx1, desty1, destx2, desty2, painting_extra_info)。在这两种不同的调用方式中，第一个参数是owner_info。Owner_info告诉绘图事件调度器谁拥有这个绘图事件。Owner_info可以是一个字符串，代表拥有者的名字，也可以是一个整数，代表拥有者的id，还可以是NULL，代表系统拥有该事件，更可以是一个包含两个元素的数组，其中第一个元素是一个代表拥有者名字的字符串，或者代表拥有者id的整数，或者代表系统的NULL，第二个元素是一个代表时标的浮点数，但要注意这里的时标不是真正的时标，该浮点数可以是任意值。该浮点数的值在清除本绘图事件时会发挥作用。第二个参数是display，它既可以是screen display，也可以是image display。第三个参数是图像的句柄或者是一个指向图像文件的地址字符串。最后一个参数是painting_extra_info，它告诉绘图事件调度器采用什么样的porterduff模式来绘制目标图像。这个参数是可选参数。porterduff模式内部机制比较复杂，建议开发者省略这个参数（也就是使用参数的缺省值）。如果开发者想要详细了解painting extra info，可以参考set_porterduff_mode以及get_porterduff_mode的函数帮助信息。如果开发者想要详细了解porterduff模式，建议阅读相关的JAVA文档。在第一种调用方式中，从第四个到第七个参数分别是图像将被绘制的位置的左边界的坐标，图像将被绘制的位置的上边界坐标，图像绘制时沿长度方向的缩放比例（是一个可以省略的参数，它的缺省值为1），以及图像绘制时沿高度方向的缩放比例（是一个可以省略的参数，它的缺省值为1）。在第二种调用方式中，从第四个到第十一个参数分别是选取图像将被绘制的部分的源长方形的左边界，选取图像将被绘制的部分的源长方形的上边界，选取图像将被绘制的部分的源长方形的右边界，选取图像将被绘制的部分的源长方形的下边界，目标位置的左边界，目标位置的上边界，目标位置的右边界以及目标位置的下边界。Draw_image的例子包括：draw_image("image", display, get_upper_level_path(get_src_file_path()) + "gem4.png", 48, 157) ，draw_image("image", display, gem3Img, 148, 257, 3, 0.5)以及draw_image("imagesrc", display, gem3Img, 0, 0, 32, 32, 210, 540, 300, 580, a_painting_extra_info)。
 @end
 @language:traditional_chinese
 draw_image為繪圖事件調度器添加一個繪製圖像的事件。在繪圖事件調度器調用這個繪製事件時，該事件將在display上繪製一個圖像。Draw_image有兩個不同的重載調用方式。第一個是draw_image(owner_info, display, image_or_path, left, top, width_ratio, height_ratio, painting_extra_info)。第二個是draw_image(owner_info, display, image_or_path, srcx1, srcy1, srcx2, srcy2, destx1, desty1, destx2, desty2, painting_extra_info)。在這兩種不同的調用方式中，第一個參數是owner_info。Owner_info告訴繪圖事件調度器誰擁有這個繪圖事件。Owner_info可以是一個字串，代表擁有者的名字，也可以是一個整數，代表擁有者的id，還可以是NULL，代表系統擁有該事件，更可以是一個包含兩個元素的數組，其中第一個元素是一個代表擁有者名字的字串，或者代表擁有者id的整數，或者代表系統的NULL，第二個元素是一個代表時標的浮點數，但要注意這裏的時標不是真正的時標，該浮點數可以是任意值。該浮點數的值在清除本繪圖事件時會發揮作用。第二個參數是display，它既可以是screen display，也可以是image display。第三個參數是圖像的句柄或者是一個指向圖像檔的地址字串。最後一個參數是painting_extra_info，它告訴繪圖事件調度器採用什麼樣的porterduff模式來繪製目標圖像。這個參數是可選參數。porterduff模式內部機制比較複雜，建議開發者省略這個參數（也就是使用參數的缺省值）。如果開發者想要詳細瞭解painting extra info，可以參考set_porterduff_mode以及get_porterduff_mode的函數幫助資訊。如果開發者想要詳細瞭解porterduff模式，建議閱讀相關的JAVA文檔。在第一種調用方式中，從第四個到第七個參數分別是圖像將被繪製的位置的左邊界的座標，圖像將被繪製的位置的上邊界座標，圖像繪製時沿長度方向的縮放比例（是一個可以省略的參數，它的缺省值為1），以及圖像繪製時沿高度方向的縮放比例（是一個可以省略的參數，它的缺省值為1）。在第二種調用方式中，從第四個到第十一個參數分別是選取圖像將被繪製的部分的源長方形的左邊界，選取圖像將被繪製的部分的源長方形的上邊界，選取圖像將被繪製的部分的源長方形的右邊界，選取圖像將被繪製的部分的源長方形的下邊界，目標位置的左邊界，目標位置的上邊界，目標位置的右邊界以及目標位置的下邊界。Draw_image的例子包括：draw_image("image", display, get_upper_level_path(get_src_file_path()) + "gem4.png", 48, 157) ，draw_image("image", display, gem3Img, 148, 257, 3, 0.5)以及draw_image("imagesrc", display, gem3Img, 0, 0, 32, 32, 210, 540, 300, 580, a_painting_extra_info)。
 @end
Endh
::mfp::graph_lib::draw::draw_line 7 FALSE
Help
 @language:
 draw_line(owner_info, display, start_point_place, end_point_place, color, line_style, painting_extra_info) adds a painting event in the painting event scheduler. This painting event will draw a line in a display when the scheduler calls it. It has 7 parameters. First parameter is owner_info, which tells painting event scheduler who owns this painting event. The owner_info can be a string (i.e. owner name), or an integer (i.e. owner id), or NULL (meaning that system owns it), or a two element array with its first element is either string based owner name, or integer based owner id, or NULL, and its second element is a double value representing a pseudo timestamp (It is not a real timestamp. It can be any double value. It will be used when developer tries to remove this event from painting event scheduler). The second parameter is display. It can be either a screen display or an image display. The third one and the fourth one are start_point_place and end_point_place respectively. They both are a two element array (i.e. [x, y]). The fifth one is color. It is a 4-elem array ([Alpha, R, G, B]) or 3-elem array ([R, G, B]) with each elem from 0 to 255. The sixth parameter is line style. At this moment, it is one element array whose element is a positive integer value representing line width. This parameter is optional, by default, it is [1]. The last parameter is painting_extra_info. It tells painting event scheduler what porterduff mode should be selected to draw. This parameter is also optional. Because the underlying mechanism of porterduff mode is quite intricate, developer may simply use its default value (i.e. ignore it since it is optional). For detailed information about painting extra info, developer may refer to set_porterduff_mode and get_porterduff_mode functions. For detailed information about porterduff mode, developer may refer to JAVA documentation.
An example of this function is: draw_line(["my draw", 0.381], d, [128, 45], [250, -72], [79, 255, 0, 142]) . And another example is: draw_line(NULL, d, [23, 111], [70, 333], [23, 178, 222], [7]) .
 @end
 @language:simplified_chinese
 draw_line(owner_info, display, start_point_place, end_point_place, color, line_style, painting_extra_info)为绘图事件调度器添加一个绘制线段的事件。在绘图事件调度器调用这个绘制线段的事件时，该事件将在display上绘制一条线。Draw_line有7个参数。第一个参数是owner_info。Owner_info告诉绘图事件调度器谁拥有这个绘图事件。Owner_info可以是一个字符串，代表拥有者的名字，也可以是一个整数，代表拥有者的id，还可以是NULL，代表系统拥有该事件，更可以是一个包含两个元素的数组，其中第一个元素是一个代表拥有者名字的字符串，或者代表拥有者id的整数，或者代表系统的NULL，第二个元素是一个代表时标的浮点数，但要注意这里的时标不是真正的时标，该浮点数可以是任意值。该浮点数的值在清除本绘图事件时会发挥作用。第二个参数是display，它既可以是screen display，也可以是image display。第三个参数和第四个参数是线段的起始位置（[x1,y1]）和终止位置（[x2,y2]），它们均为包含两个元素的数组。第五个参数是color，代表绘制使用的颜色，它是一个4个或3个元素的数组，如果是4个元素，就是[Alpha，R，G，B]，如果是3个元素，就是[R，G，B]，在该数组中，每一个元素的值都是从0到255。第六个参数是line_style。在现阶段它是一个包含一个元素的数组，该元素是一个正整数，代表线的粗细。这个参数是可省略的，它的缺省值是[1]。最后一个参数是painting_extra_info，它告诉绘图事件调度器采用什么样的porterduff模式来绘制目标图像。这个参数也是可选参数。porterduff模式内部机制比较复杂，建议开发者省略这个参数（也就是使用参数的缺省值）。如果开发者想要详细了解painting extra info，可以参考set_porterduff_mode以及get_porterduff_mode的函数帮助信息。如果开发者想要详细了解porterduff模式，建议阅读相关的JAVA文档。
Draw_line的例子包括：draw_line(["my draw", 0.381], d, [128, 45], [250, -72], [79, 255, 0, 142])以及draw_line(NULL, d, [23, 111], [70, 333], [23, 178, 222], [7])。
 @end
 @language:traditional_chinese
 draw_line(owner_info, display, start_point_place, end_point_place, color, line_style, painting_extra_info)為繪圖事件調度器添加一個繪製線段的事件。在繪圖事件調度器調用這個繪製線段的事件時，該事件將在display上繪製一條線。Draw_line有7個參數。第一個參數是owner_info。Owner_info告訴繪圖事件調度器誰擁有這個繪圖事件。Owner_info可以是一個字串，代表擁有者的名字，也可以是一個整數，代表擁有者的id，還可以是NULL，代表系統擁有該事件，更可以是一個包含兩個元素的數組，其中第一個元素是一個代表擁有者名字的字串，或者代表擁有者id的整數，或者代表系統的NULL，第二個元素是一個代表時標的浮點數，但要注意這裏的時標不是真正的時標，該浮點數可以是任意值。該浮點數的值在清除本繪圖事件時會發揮作用。第二個參數是display，它既可以是screen display，也可以是image display。第三個參數和第四個參數是線段的起始位置（[x1,y1]）和終止位置（[x2,y2]），它們均為包含兩個元素的數組。第五個參數是color，代表繪圖使用的顏色，它是一個4個或3個元素的數組，如果是4個元素，就是[Alpha，R，G，B]，如果是3個元素，就是[R，G，B]，在該數組中，每一個元素的值都是從0到255。第六個參數是line_style。在現階段它是一個包含一個元素的數組，該元素是一個正整數，代表線的粗細。這個參數是可省略的，它的缺省值是[1]。最後一個參數是painting_extra_info，它告訴繪圖事件調度器採用什麼樣的porterduff模式來繪製目標圖像。這個參數也是可選參數。porterduff模式內部機制比較複雜，建議開發者省略這個參數（也就是使用參數的缺省值）。如果開發者想要詳細瞭解painting extra info，可以參考set_porterduff_mode以及get_porterduff_mode的函數幫助資訊。如果開發者想要詳細瞭解porterduff模式，建議閱讀相關的JAVA文檔。
Draw_line的例子包括：draw_line(["my draw", 0.381], d, [128, 45], [250, -72], [79, 255, 0, 142])以及draw_line(NULL, d, [23, 111], [70, 333], [23, 178, 222], [7])。
 @end
Endh
::mfp::graph_lib::draw::draw_oval 8 FALSE
Help
 @language:
 draw_oval(owner_info, display, left_top, width, height, color, frame_or_fill, painting_extra_info) adds a painting event in the painting event scheduler. This painting event will draw an oval in a display when the scheduler calls it. It has at least 7 parameters. First parameter is owner_info, which tells painting event scheduler who owns this painting event. The owner_info can be a string (i.e. owner name), or an integer (i.e. owner id), or NULL (meaning that system owns it), or a two element array with its first element is either string based owner name, or integer based owner id, or NULL, and its second element is a double value representing a pseudo timestamp (It is not a real timestamp. It can be any double value. It will be used when developer tries to remove this event from painting event scheduler). The second parameter is display. It can be either a screen display or an image display. The third parameter is a two element array (i.e. [x, y]). It is the left top corner of the rectangle which contains the oval. The next two parameters are the width and height of the rectangle which contains the oval. Then the parameter is color to draw. It is a 4-elem array ([Alpha, R, G, B]) or 3-elem array ([R, G, B]) with each elem from 0 to 255. The second last parameter is an integer. If it is less than or equal to zero, the oval is filled. If it is larger than zero, it is the width of the oval's border. The last parameter is painting_extra_info. It tells painting event scheduler what porterduff mode should be selected to draw. This parameter is optional. Because the underlying mechanism of porterduff mode is quite intricate, developer may simply use its default value (i.e. ignore it since it is optional). For detailed information about painting extra info, developer may refer to set_porterduff_mode and get_porterduff_mode functions. For detailed information about porterduff mode, developer may refer to JAVA documentation.
An example of this function is: draw_oval(["my draw", 0.381], d, [128, 45], 18, 30, [79, 255, 0, 142], 0) . And another example is: draw_oval(NULL, d, [23, 111], 70, 19, [23, 178, 222], 3) .
 @end
 @language:simplified_chinese
 draw_oval(owner_info, display, left_top, width, height, color, frame_or_fill, painting_extra_info)为绘图事件调度器添加一个绘制椭圆形的事件。在绘图事件调度器调用这个绘制事件时，该事件将在display上绘制一个椭圆形。Draw_oval有至少7个参数。第一个参数是owner_info。Owner_info告诉绘图事件调度器谁拥有这个绘图事件。Owner_info可以是一个字符串，代表拥有者的名字，也可以是一个整数，代表拥有者的id，还可以是NULL，代表系统拥有该事件，更可以是一个包含两个元素的数组，其中第一个元素是一个代表拥有者名字的字符串，或者代表拥有者id的整数，或者代表系统的NULL，第二个元素是一个代表时标的浮点数，但要注意这里的时标不是真正的时标，该浮点数可以是任意值。该浮点数的值在清除本绘图事件时会发挥作用。第二个参数是display，它既可以是screen display，也可以是image display。第三个参数是包含两个元素的数组（[x,y]），表示该椭圆的包络长方形左上顶点的位置。第四个和第五个参数为该椭圆的包络长方形的长度和高度。紧接着的参数是color，代表绘制使用的颜色，它是一个4个或3个元素的数组，如果是4个元素，就是[Alpha，R，G，B]，如果是3个元素，就是[R，G，B]，在该数组中，每一个元素的值都是从0到255。倒数第二个参数是是一个整数。它等于或小于零表示填充椭圆形，大于零表示椭圆形的边的宽度。最后一个参数是painting_extra_info，它告诉绘图事件调度器采用什么样的porterduff模式来绘制目标图像。这个参数是可选参数。porterduff模式内部机制比较复杂，建议开发者省略这个参数（也就是使用参数的缺省值）。如果开发者想要详细了解painting extra info，可以参考set_porterduff_mode以及get_porterduff_mode的函数帮助信息。如果开发者想要详细了解porterduff模式，建议阅读相关的JAVA文档。
Draw_oval的例子包括：draw_oval(["my draw", 0.381], d, [128, 45], 18, 30, [79, 255, 0, 142], 0)以及draw_oval(NULL, d, [23, 111], 70, 19, [23, 178, 222], 3)。
 @end
 @language:traditional_chinese
 draw_oval(owner_info, display, left_top, width, height, color, frame_or_fill, painting_extra_info)為繪圖事件調度器添加一個繪製橢圓形的事件。在繪圖事件調度器調用這個繪製事件時，該事件將在display上繪製一個橢圓形。Draw_oval有至少7個參數。第一個參數是owner_info。Owner_info告訴繪圖事件調度器誰擁有這個繪圖事件。Owner_info可以是一個字串，代表擁有者的名字，也可以是一個整數，代表擁有者的id，還可以是NULL，代表系統擁有該事件，更可以是一個包含兩個元素的數組，其中第一個元素是一個代表擁有者名字的字串，或者代表擁有者id的整數，或者代表系統的NULL，第二個元素是一個代表時標的浮點數，但要注意這裏的時標不是真正的時標，該浮點數可以是任意值。該浮點數的值在清除本繪圖事件時會發揮作用。第二個參數是display，它既可以是screen display，也可以是image display。第三個參數是包含兩個元素的數組（[x,y]），表示該橢圓的包絡長方形左上頂點的位置。第四個和第五個參數為該橢圓的包絡長方形的長度和高度。緊接著的參數是color，代表繪製使用的顏色，它是一個4個或3個元素的數組，如果是4個元素，就是[Alpha，R，G，B]，如果是3個元素，就是[R，G，B]，在該數組中，每一個元素的值都是從0到255。倒數第二個參數是是一個整數。它等於或小於零表示填充橢圓形，大於零表示橢圓形的邊的寬度。最後一個參數是painting_extra_info，它告訴繪圖事件調度器採用什麼樣的porterduff模式來繪製目標圖像。這個參數是可選參數。porterduff模式內部機制比較複雜，建議開發者省略這個參數（也就是使用參數的缺省值）。如果開發者想要詳細瞭解painting extra info，可以參考set_porterduff_mode以及get_porterduff_mode的函數幫助資訊。如果開發者想要詳細瞭解porterduff模式，建議閱讀相關的JAVA文檔。
Draw_oval的例子包括：draw_oval(["my draw", 0.381], d, [128, 45], 18, 30, [79, 255, 0, 142], 0)以及draw_oval(NULL, d, [23, 111], 70, 19, [23, 178, 222], 3)。
 @end
Endh
::mfp::graph_lib::draw::draw_point 6 FALSE
Help
 @language:
 draw_point(owner_info, display, point_place, color, point_style, painting_extra_info) adds a painting event in the painting event scheduler. This painting event will draw a point in a display when the scheduler calls it. It has 6 parameters. First parameter is owner_info, which tells painting event scheduler who owns this painting event. The owner_info can be a string (i.e. owner name), or an integer (i.e. owner id), or NULL (meaning that system owns it), or a two element array with its first element is either string based owner name, or integer based owner id, or NULL, and its second element is a double value representing a pseudo timestamp (It is not a real timestamp. It can be any double value. It will be used when developer tries to remove this event from painting event scheduler). The second parameter is display. It can be either a screen display or an image display. The third one is point_place. It is a two element array (i.e. [x, y]). The fourth one is color. It is a 4-elem array ([Alpha, R, G, B]) or 3-elem array ([R, G, B]) with each elem from 0 to 255. The fifth parameter is point style. At this moment, its format is [point_size, point_shape]. Point size is a positive integer value. Point shape is a string which allows the following values: "dot", "circle", "square", "diamond", "up_triangle", "down_triangle", "cross" and "x". Note that if point shape is "dot", point size has no effect because dot point's size is always 1. This parameter is optional, by default, it is [1, "dot"]. The last parameter is painting_extra_info. It tells painting event scheduler what porterduff mode should be selected to draw this point. This parameter is also optional. Because the underlying mechanism of porterduff mode is quite intricate, developer may simply use its default value (i.e. ignore it since it is optional). For detailed information about painting extra info, developer may refer to set_porterduff_mode and get_porterduff_mode functions. For detailed information about porterduff mode, developer may refer to JAVA documentation.
An example of draw_point is: draw_point(["my draw", 0.381], d, [128, 45], [79, 255, 0, 142]) . And another example is: draw_point(NULL, d, [23, 111], [23, 178, 222], [78, "square"]) .
 @end
 @language:simplified_chinese
 draw_point(owner_info, display, point_place, color, point_style, painting_extra_info)为绘图事件调度器添加一个绘制点的事件。在绘图事件调度器调用这个绘制点的事件时，该事件将在display上绘制一个点。Draw_point有六个参数。第一个参数是owner_info。Owner_info告诉绘图事件调度器谁拥有这个绘图事件。Owner_info可以是一个字符串，代表拥有者的名字，也可以是一个整数，代表拥有者的id，还可以是NULL，代表系统拥有该事件，更可以是一个包含两个元素的数组，其中第一个元素是一个代表拥有者名字的字符串，或者代表拥有者id的整数，或者代表系统的NULL，第二个元素是一个代表时标的浮点数，但要注意这里的时标不是真正的时标，该浮点数可以是任意值。该浮点数的值在清除本绘图事件时会发挥作用。第二个参数是display，它既可以是screen display，也可以是image display。第三个参数是point_place，也就是点的位置，他是一个包含两个元素的数组，也就是[x,y]。第四个参数color，代表点的颜色，它是一个4个或3个元素的数组，如果是4个元素，就是[Alpha，R，G，B]，如果是3个元素，就是[R，G，B]，在该数组中，每一个元素的值都是从0到255。第五个参数是point_style。在现阶段它的格式是[point_size, point_shape]。Point_size是点的大小。它是一个正整数。Point_shape是一个字符串，代表点的形状，可以取以下值："dot"（点，注意它的大小只能是1，point_size对它不起作用），"circle"（圆圈），"square"（方块），"diamond"（正菱形），"up_triangle"（尖朝上的三角形），"down_triangle"（尖朝下的三角形），"cross"（十字形）和"x"（叉号）。这个参数是可省略的，它的缺省值是[1, "dot"]。最后一个参数是painting_extra_info，它告诉绘图事件调度器采用什么样的porterduff模式来绘制目标图像。这个参数也是可选参数。porterduff模式内部机制比较复杂，建议开发者省略这个参数（也就是使用参数的缺省值）。如果开发者想要详细了解painting extra info，可以参考set_porterduff_mode以及get_porterduff_mode的函数帮助信息。如果开发者想要详细了解porterduff模式，建议阅读相关的JAVA文档。
Draw_point的例子包括：draw_point(["my draw", 0.381], d, [128, 45], [79, 255, 0, 142])以及draw_point(NULL, d, [23, 111], [23, 178, 222], [78, "square"])。
 @end
 @language:traditional_chinese
 draw_point(owner_info, display, point_place, color, point_style, painting_extra_info)為繪圖事件調度器添加一個繪製點的事件。在繪圖事件調度器調用這個繪製點的事件時，該事件將在display上繪製一個點。Draw_point有六個參數。第一個參數是owner_info。Owner_info告訴繪圖事件調度器誰擁有這個繪圖事件。Owner_info可以是一個字串，代表擁有者的名字，也可以是一個整數，代表擁有者的id，還可以是NULL，代表系統擁有該事件，更可以是一個包含兩個元素的數組，其中第一個元素是一個代表擁有者名字的字串，或者代表擁有者id的整數，或者代表系統的NULL，第二個元素是一個代表時標的浮點數，但要注意這裏的時標不是真正的時標，該浮點數可以是任意值。該浮點數的值在清除本繪圖事件時會發揮作用。第二個參數是display，它既可以是screen display，也可以是image display。第三個參數是point_place，也就是點的位置，他是一個包含兩個元素的數組，也就是[x,y]。第四個參數color，代表點的顏色，它是一個4個或3個元素的數組，如果是4個元素，就是[Alpha，R，G，B]，如果是3個元素，就是[R，G，B]，在該數組中，每一個元素的值都是從0到255。第五個參數是point_style。在現階段它的格式是[point_size, point_shape]。Point_size是點的大小。它是一個正整數。Point_shape是一個字串，代表點的形狀，可以取以下值："dot"（點，注意它的大小只能是1，point_size對它不起作用），"circle"（圓圈），"square"（方塊），"diamond"（正菱形），"up_triangle"（尖朝上的三角形），"down_triangle"（尖朝下的三角形），"cross"（十字形）和"x"（叉號）。這個參數是可省略的，它的缺省值是[1, "dot"]。最後一個參數是painting_extra_info，它告訴繪圖事件調度器採用什麼樣的porterduff模式來繪製這個點。這個參數也是可選參數。porterduff模式內部機制比較複雜，建議開發者省略這個參數（也就是使用參數的缺省值）。如果開發者想要詳細瞭解painting extra info，可以參考set_porterduff_mode以及get_porterduff_mode的函數幫助資訊。如果開發者想要詳細瞭解porterduff模式，建議閱讀相關的JAVA文檔。
Draw_point的例子包括：draw_point(["my draw", 0.381], d, [128, 45], [79, 255, 0, 142])以及draw_point(NULL, d, [23, 111], [23, 178, 222], [78, "square"])。
 @end
Endh
::mfp::graph_lib::draw::draw_polygon 7 TRUE
Help
 @language:
 draw_polygon(owner_info, display, point1_place, point2_place, point3_place, ..., color, frame_or_fill, painting_extra_info) adds a painting event in the painting event scheduler. This painting event will draw a polygon in a display when the scheduler calls it. It has at least 7 parameters. First parameter is owner_info, which tells painting event scheduler who owns this painting event. The owner_info can be a string (i.e. owner name), or an integer (i.e. owner id), or NULL (meaning that system owns it), or a two element array with its first element is either string based owner name, or integer based owner id, or NULL, and its second element is a double value representing a pseudo timestamp (It is not a real timestamp. It can be any double value. It will be used when developer tries to remove this event from painting event scheduler). The second parameter is display. It can be either a screen display or an image display. From the third parameter forward the vertices of the polygon are defined. There should be at least three vertices. All the vertices are a two element array (i.e. [x, y]). The next parameter is color. It is a 4-elem array ([Alpha, R, G, B]) or 3-elem array ([R, G, B]) with each elem from 0 to 255. The second last parameter is an integer. If it is less than or equal to zero, the polygon is filled. If it is larger than zero, it is the width of the polygon's sides. The last parameter is painting_extra_info. It tells painting event scheduler what porterduff mode should be selected to draw. This parameter is optional. Because the underlying mechanism of porterduff mode is quite intricate, developer may simply use its default value (i.e. ignore it since it is optional). For detailed information about painting extra info, developer may refer to set_porterduff_mode and get_porterduff_mode functions. For detailed information about porterduff mode, developer may refer to JAVA documentation.
An example of this function is: draw_polygon(["my draw", 0.381], d, [128, 45], [250, -72], [338, 29], [79, 255, 0, 142], 0) . And another example is: draw_polygon(NULL, d, [23, 111], [70, 333], [-239, 89], [66, 183], [23, 178, 222], 3) .
 @end
 @language:simplified_chinese
 draw_polygon(owner_info, display, point1_place, point2_place, point3_place, ..., color, frame_or_fill, painting_extra_info)为绘图事件调度器添加一个绘制多边形的事件。在绘图事件调度器调用这个绘制事件时，该事件将在display上绘制一个多边形。Draw_polygon有至少7个参数。第一个参数是owner_info。Owner_info告诉绘图事件调度器谁拥有这个绘图事件。Owner_info可以是一个字符串，代表拥有者的名字，也可以是一个整数，代表拥有者的id，还可以是NULL，代表系统拥有该事件，更可以是一个包含两个元素的数组，其中第一个元素是一个代表拥有者名字的字符串，或者代表拥有者id的整数，或者代表系统的NULL，第二个元素是一个代表时标的浮点数，但要注意这里的时标不是真正的时标，该浮点数可以是任意值。该浮点数的值在清除本绘图事件时会发挥作用。第二个参数是display，它既可以是screen display，也可以是image display。从第三个参数开始是多边形顶点的位置，它们均为包含两个元素的数组。紧接着的参数是color，代表绘制使用的颜色，它是一个4个或3个元素的数组，如果是4个元素，就是[Alpha，R，G，B]，如果是3个元素，就是[R，G，B]，在该数组中，每一个元素的值都是从0到255。倒数第二个参数是是一个整数。它等于或小于零表示填充多边形，大于零表示多边形的边的宽度。最后一个参数是painting_extra_info，它告诉绘图事件调度器采用什么样的porterduff模式来绘制目标图像。这个参数是可选参数。porterduff模式内部机制比较复杂，建议开发者省略这个参数（也就是使用参数的缺省值）。如果开发者想要详细了解painting extra info，可以参考set_porterduff_mode以及get_porterduff_mode的函数帮助信息。如果开发者想要详细了解porterduff模式，建议阅读相关的JAVA文档。
Draw_polygon的例子包括：draw_polygon(["my draw", 0.381], d, [128, 45], [250, -72], [338, 29], [79, 255, 0, 142], 0)以及draw_polygon(NULL, d, [23, 111], [70, 333], [-239, 89], [66, 183], [23, 178, 222], 3)。
 @end
 @language:traditional_chinese
 draw_polygon(owner_info, display, point1_place, point2_place, point3_place, ..., color, frame_or_fill, painting_extra_info)為繪圖事件調度器添加一個繪製多邊形的事件。在繪圖事件調度器調用這個繪製事件時，該事件將在display上繪製一個多邊形。Draw_polygon有至少7個參數。第一個參數是owner_info。Owner_info告訴繪圖事件調度器誰擁有這個繪圖事件。Owner_info可以是一個字串，代表擁有者的名字，也可以是一個整數，代表擁有者的id，還可以是NULL，代表系統擁有該事件，更可以是一個包含兩個元素的數組，其中第一個元素是一個代表擁有者名字的字串，或者代表擁有者id的整數，或者代表系統的NULL，第二個元素是一個代表時標的浮點數，但要注意這裏的時標不是真正的時標，該浮點數可以是任意值。該浮點數的值在清除本繪圖事件時會發揮作用。第二個參數是display，它既可以是screen display，也可以是image display。從第三個參數開始是多邊形頂點的位置，它們均為包含兩個元素的數組。緊接著的參數是color，代表繪製使用的顏色，它是一個4個或3個元素的數組，如果是4個元素，就是[Alpha，R，G，B]，如果是3個元素，就是[R，G，B]，在該數組中，每一個元素的值都是從0到255。倒數第二個參數是是一個整數。它等於或小於零表示填充多邊形，大於零表示多邊形的邊的寬度。最後一個參數是painting_extra_info，它告訴繪圖事件調度器採用什麼樣的porterduff模式來繪製目標圖像。這個參數是可選參數。porterduff模式內部機制比較複雜，建議開發者省略這個參數（也就是使用參數的缺省值）。如果開發者想要詳細瞭解painting extra info，可以參考set_porterduff_mode以及get_porterduff_mode的函數幫助資訊。如果開發者想要詳細瞭解porterduff模式，建議閱讀相關的JAVA文檔。
Draw_polygon的例子包括：draw_polygon(["my draw", 0.381], d, [128, 45], [250, -72], [338, 29], [79, 255, 0, 142], 0)以及draw_polygon(NULL, d, [23, 111], [70, 333], [-239, 89], [66, 183], [23, 178, 222], 3)。
 @end
Endh
::mfp::graph_lib::draw::draw_rect 8 FALSE
Help
 @language:
 draw_rect(owner_info, display, left_top, width, height, color, frame_or_fill, painting_extra_info) adds a painting event in the painting event scheduler. This painting event will draw a rectangle in a display when the scheduler calls it. It has at least 7 parameters. First parameter is owner_info, which tells painting event scheduler who owns this painting event. The owner_info can be a string (i.e. owner name), or an integer (i.e. owner id), or NULL (meaning that system owns it), or a two element array with its first element is either string based owner name, or integer based owner id, or NULL, and its second element is a double value representing a pseudo timestamp (It is not a real timestamp. It can be any double value. It will be used when developer tries to remove this event from painting event scheduler). The second parameter is display. It can be either a screen display or an image display. The third parameter is a two element array (i.e. [x, y]). It is the left top corner of the rectangle. The next two parameters are the width and height of the rectangle. Then the parameter is color to draw. It is a 4-elem array ([Alpha, R, G, B]) or 3-elem array ([R, G, B]) with each elem from 0 to 255. The second last parameter is an integer. If it is less than or equal to zero, the rectangle is filled. If it is larger than zero, it is the width of the rectangle's sides. The last parameter is painting_extra_info. It tells painting event scheduler what porterduff mode should be selected to draw. This parameter is optional. Because the underlying mechanism of porterduff mode is quite intricate, developer may simply use its default value (i.e. ignore it since it is optional). For detailed information about painting extra info, developer may refer to set_porterduff_mode and get_porterduff_mode functions. For detailed information about porterduff mode, developer may refer to JAVA documentation.
An example of this function is: draw_rect(["my draw", 0.381], d, [128, 45], 18, 30, [79, 255, 0, 142], 0) . And another example is: draw_rect(NULL, d, [23, 111], 70, 19, [23, 178, 222], 3) .
 @end
 @language:simplified_chinese
 draw_rect(owner_info, display, left_top, width, height, color, frame_or_fill, painting_extra_info)为绘图事件调度器添加一个绘制长方形的事件。在绘图事件调度器调用这个绘制事件时，该事件将在display上绘制一个长方形。Draw_rect有至少7个参数。第一个参数是owner_info。Owner_info告诉绘图事件调度器谁拥有这个绘图事件。Owner_info可以是一个字符串，代表拥有者的名字，也可以是一个整数，代表拥有者的id，还可以是NULL，代表系统拥有该事件，更可以是一个包含两个元素的数组，其中第一个元素是一个代表拥有者名字的字符串，或者代表拥有者id的整数，或者代表系统的NULL，第二个元素是一个代表时标的浮点数，但要注意这里的时标不是真正的时标，该浮点数可以是任意值。该浮点数的值在清除本绘图事件时会发挥作用。第二个参数是display，它既可以是screen display，也可以是image display。第三个参数是包含两个元素的数组（[x,y]），表示该长方形左上顶点的位置。第四个和第五个参数为长方形的长度和高度。紧接着的参数是color，代表绘制使用的颜色，它是一个4个或3个元素的数组，如果是4个元素，就是[Alpha，R，G，B]，如果是3个元素，就是[R，G，B]，在该数组中，每一个元素的值都是从0到255。倒数第二个参数是是一个整数。它等于或小于零表示填充长方形，大于零表示长方形的边的宽度。最后一个参数是painting_extra_info，它告诉绘图事件调度器采用什么样的porterduff模式来绘制目标图像。这个参数是可选参数。porterduff模式内部机制比较复杂，建议开发者省略这个参数（也就是使用参数的缺省值）。如果开发者想要详细了解painting extra info，可以参考set_porterduff_mode以及get_porterduff_mode的函数帮助信息。如果开发者想要详细了解porterduff模式，建议阅读相关的JAVA文档。
Draw_rect的例子包括：draw_rect(["my draw", 0.381], d, [128, 45], 18, 30, [79, 255, 0, 142], 0)以及draw_rect(NULL, d, [23, 111], 70, 19, [23, 178, 222], 3)。
 @end
 @language:traditional_chinese
 draw_rect(owner_info, display, left_top, width, height, color, frame_or_fill, painting_extra_info)為繪圖事件調度器添加一個繪製長方形的事件。在繪圖事件調度器調用這個繪製事件時，該事件將在display上繪製一個長方形。Draw_rect有至少7個參數。第一個參數是owner_info。Owner_info告訴繪圖事件調度器誰擁有這個繪圖事件。Owner_info可以是一個字串，代表擁有者的名字，也可以是一個整數，代表擁有者的id，還可以是NULL，代表系統擁有該事件，更可以是一個包含兩個元素的數組，其中第一個元素是一個代表擁有者名字的字串，或者代表擁有者id的整數，或者代表系統的NULL，第二個元素是一個代表時標的浮點數，但要注意這裏的時標不是真正的時標，該浮點數可以是任意值。該浮點數的值在清除本繪圖事件時會發揮作用。第二個參數是display，它既可以是screen display，也可以是image display。第三個參數是包含兩個元素的數組（[x,y]），表示該長方形左上頂點的位置。第四個和第五個參數為長方形的長度和高度。緊接著的參數是color，代表繪製使用的顏色，它是一個4個或3個元素的數組，如果是4個元素，就是[Alpha，R，G，B]，如果是3個元素，就是[R，G，B]，在該數組中，每一個元素的值都是從0到255。倒數第二個參數是是一個整數。它等於或小於零表示填充長方形，大於零表示長方形的邊的寬度。最後一個參數是painting_extra_info，它告訴繪圖事件調度器採用什麼樣的porterduff模式來繪製目標圖像。這個參數是可選參數。porterduff模式內部機制比較複雜，建議開發者省略這個參數（也就是使用參數的缺省值）。如果開發者想要詳細瞭解painting extra info，可以參考set_porterduff_mode以及get_porterduff_mode的函數幫助資訊。如果開發者想要詳細瞭解porterduff模式，建議閱讀相關的JAVA文檔。
Draw_rect的例子包括：draw_rect(["my draw", 0.381], d, [128, 45], 18, 30, [79, 255, 0, 142], 0)以及draw_rect(NULL, d, [23, 111], 70, 19, [23, 178, 222], 3)。
 @end
Endh
::mfp::graph_lib::draw::draw_text 7 FALSE
Help
 @language:
 draw_text(owner_info, display, string, origin_place, color, text_style, painting_extra_info) adds a painting event in the painting event scheduler. This painting event will draw a text block in a display when the scheduler calls it. The first parameter is owner_info, which tells painting event scheduler who owns this painting event. The owner_info can be a string (i.e. owner name), or an integer (i.e. owner id), or NULL (meaning that system owns it), or a two element array with its first element is either string based owner name, or integer based owner id, or NULL, and its second element is a double value representing a pseudo timestamp (It is not a real timestamp. It can be any double value. It will be used when developer tries to remove this event from painting event scheduler). The second parameter is display. It can be either a screen display or an image display. The third parameter is string based multi-line text block. The fourth parameter is origin place of the text block ([x, y]). The fifth parameter is color to draw. It is a 4-elem array ([Alpha, R, G, B]) or 3-elem array ([R, G, B]) with each elem from 0 to 255. The sixth parameter, text_style, is a one or two element array. If it is a one element array. The element is a positve integer which is text font size. And the font is system default font. If it is a two element array, the first element is text font size and the second element is string based font name. Note that this parameter is optional. By default, the system default font with size being 16 is used. The last parameter is painting_extra_info. It tells painting event scheduler what porterduff mode should be selected to draw. This parameter is optional. Because the underlying mechanism of porterduff mode is quite intricate, developer may simply use its default value (i.e. ignore it since it is optional). For detailed information about painting extra info, developer may refer to set_porterduff_mode and get_porterduff_mode functions. For detailed information about porterduff mode, developer may refer to JAVA documentation.
Examples of this function are: draw_text("image", display, txtStr, [108, 190], [255, 255, 255], [10 + idx, font]) and draw_text("image", display, txtStr, [108, 190], [255, 255, 255], [idx * 2]) .
 @end
 @language:simplified_chinese
 draw_text(owner_info, display, string, origin_place, color, text_style, painting_extra_info)为绘图事件调度器添加一个绘制文本块的事件。在绘图事件调度器调用这个绘制事件时，该事件将在display上绘制一个文本块。Draw_text的第一个参数是owner_info。Owner_info告诉绘图事件调度器谁拥有这个绘图事件。Owner_info可以是一个字符串，代表拥有者的名字，也可以是一个整数，代表拥有者的id，还可以是NULL，代表系统拥有该事件，更可以是一个包含两个元素的数组，其中第一个元素是一个代表拥有者名字的字符串，或者代表拥有者id的整数，或者代表系统的NULL，第二个元素是一个代表时标的浮点数，但要注意这里的时标不是真正的时标，该浮点数可以是任意值。该浮点数的值在清除本绘图事件时会发挥作用。第二个参数是display，它既可以是screen display，也可以是image display。第三个参数是基于字符串的文本块，它可以多于一行。第四个参数是文本块起始点的位置。这是一个两元素数组，第一个元素是起始点横坐标，第二个元素是起始点纵坐标。第五个参数是color，代表绘制使用的颜色，它是一个4个或3个元素的数组，如果是4个元素，就是[Alpha，R，G，B]，如果是3个元素，就是[R，G，B]，在该数组中，每一个元素的值都是从0到255。第六个参数是可省略参数，用于定义文本的字体和大小。如果它被省略，则字体为系统缺省字体，大小为16。如果它不被省略，那么它必须是一个包含一个或者两个元素的数组。如果是一个元素的数组，那么该元素必须是一个正整数，代表字体的大小，而字体则为系统缺省字体。如果是包含两个元素的数组，那么第一个元素为字体的大小，第二个元素是基于字符串的字体的名字。最后一个参数是painting_extra_info，它告诉绘图事件调度器采用什么样的porterduff模式来绘制目标图像。这个参数是可选参数。porterduff模式内部机制比较复杂，建议开发者省略这个参数（也就是使用参数的缺省值）。如果开发者想要详细了解painting extra info，可以参考set_porterduff_mode以及get_porterduff_mode的函数帮助信息。如果开发者想要详细了解porterduff模式，建议阅读相关的JAVA文档。Draw_text的例子包括draw_text("image", display, txtStr, [108, 190], [255, 255, 255], [10 + idx, font])以及draw_text("image", display, txtStr, [108, 190], [255, 255, 255], [idx * 2])。
 @end
 @language:traditional_chinese
 draw_text(owner_info, display, string, origin_place, color, text_style, painting_extra_info)為繪圖事件調度器添加一個繪製文本塊的事件。在繪圖事件調度器調用這個繪製事件時，該事件將在display上繪製一個文本塊。Draw_text的第一個參數是owner_info。Owner_info告訴繪圖事件調度器誰擁有這個繪圖事件。Owner_info可以是一個字串，代表擁有者的名字，也可以是一個整數，代表擁有者的id，還可以是NULL，代表系統擁有該事件，更可以是一個包含兩個元素的數組，其中第一個元素是一個代表擁有者名字的字串，或者代表擁有者id的整數，或者代表系統的NULL，第二個元素是一個代表時標的浮點數，但要注意這裏的時標不是真正的時標，該浮點數可以是任意值。該浮點數的值在清除本繪圖事件時會發揮作用。第二個參數是display，它既可以是screen display，也可以是image display。第三個參數是基於字串的文本塊，它可以多於一行。第四個參數是文本塊起始點的位置。這是一個兩元素數組，第一個元素是起始點橫坐標，第二個元素是起始點縱坐標。第五個參數是color，代表繪製使用的顏色，它是一個4個或3個元素的數組，如果是4個元素，就是[Alpha，R，G，B]，如果是3個元素，就是[R，G，B]，在該數組中，每一個元素的值都是從0到255。第六個參數是可省略參數，用於定義文本的字體和大小。如果它被省略，則字體為系統缺省字體，大小為16。如果它不被省略，那麼它必須是一個包含一個或者兩個元素的數組。如果是一個元素的數組，那麼該元素必須是一個正整數，代表字體的大小，而字體則為系統缺省字體。如果是包含兩個元素的數組，那麼第一個元素為字體的大小，第二個元素是基於字串的字體的名字。最後一個參數是painting_extra_info，它告訴繪圖事件調度器採用什麼樣的porterduff模式來繪製目標圖像。這個參數是可選參數。porterduff模式內部機制比較複雜，建議開發者省略這個參數（也就是使用參數的缺省值）。如果開發者想要詳細瞭解painting extra info，可以參考set_porterduff_mode以及get_porterduff_mode的函數幫助資訊。如果開發者想要詳細瞭解porterduff模式，建議閱讀相關的JAVA文檔。Draw_text的例子包括draw_text("image", display, txtStr, [108, 190], [255, 255, 255], [10 + idx, font])以及draw_text("image", display, txtStr, [108, 190], [255, 255, 255], [idx * 2])。
 @end
Endh
::mfp::graph_lib::draw::drop_old_painting_requests 2 FALSE
Help
 @language:
 drop_old_painting_requests(owner_info, display) removes selected painting events from painting event scheduler for a screen or image display. The criteria is, if a painting event's owner is the same as drop_old_painting_requests's owner (read from owner_info) and a painting event's owner info's timestamp is older (i.e. smaller) than drop_old_painting_requests's owner info's timestamp, the painting event is dropped. Note that some owner_info parameter doesn't include timestamp. In this case, it's timestamp is the system time when the painting function or drop_old_painting_requests is called. An example is drop_old_painting_requests("my owner", display). This example equals to drop_old_painting_requests(["my owner", now()], display).
 @end
 @language:simplified_chinese
 drop_old_painting_requests(owner_info, display)用于从screen或者image display的绘图事件调度器中移除一些绘图事件。移除的标准为，检查一个绘图事件的owner_info参数（也就是该事件的拥有者和创建时标），如果该绘图事件的拥有者和drop_old_painting_requests的拥有者完全一样，并且创建时标早于（小于）drop_old_painting_requests的创建时标，则该事件被移除。注意，有很多owner_info参数不包括创建时标，这种情况下创建时标为创建时的系统时间。本函数的例子为：drop_old_painting_requests("my owner", display)。该例子等价于drop_old_painting_requests(["my owner", now()], display)。
 @end
 @language:traditional_chinese
 drop_old_painting_requests(owner_info, display)用於從screen或者image display的繪圖事件調度器中移除一些繪圖事件。移除的標準為，檢查一個繪圖事件的owner_info參數（也就是該事件的擁有者和創建時標），如果該繪圖事件的擁有者和drop_old_painting_requests的擁有者完全一樣，並且創建時標早於（小於）drop_old_painting_requests的創建時標，則該事件被移除。注意，有很多owner_info參數不包括創建時標，這種情況下創建時標為創建時的系統時間。本函數的例子為：drop_old_painting_requests("my owner", display)。該例子等價於drop_old_painting_requests(["my owner", now()], display)。
 @end
Endh
::mfp::math::matrix::eig 1 FALSE
Help
 @language:
 eig(A) calculates 2D square matrix A's eigen vectors and eigen values. This function returns a two element list. First element is the eigen vector matrix, each column is an eigen vector. Second element is a diagonal matrix. Each diagonal element is an eigen value. Note that this function needs big memory to run and consumes significant CPU time. If running in mobile device, size of A and B should be no greater than 6*6. If running on PC, A and B should be no greater than 8*8. Otherwise, it may fail because lack of memory or run for very long time.
 @end
 @language:simplified_chinese
 eig(A)计算2维方阵A的特征向量和特征值。这个函数返回一个包含两个成员的列表。第一个成员是特征向量矩阵，每一列是一个特征向量。第二个成员是一个对角矩阵，每一个对角线元素是一个特征值。注意运算这个函数非常耗费内存和CPU资源，如果在手机上运行，矩阵A的尺寸最好不要超过6*6，如果在电脑上运行，最好不要超过8*8，否则可能造成内存不足而程序崩溃或者运行很长时间而没有结果。
 @end
 @language:traditional_chinese
 eig(A)計算2維方陣A的特征向量和特征值。這個函數程式返回一個包含兩個成員的列表。第一個成員是特征向量陣列，每一列是一個特征向量。第二個成員是一個對角陣列，每一個對角線元素是一個特征值。註意運算這個程式非常耗費內存和CPU資源，如果在移動設備上運行，征列A的尺寸最好不要超過6*6，如果在電腦上運行，最好不要超過8*8，否則可能造成內存不足而程序崩潰或者運行很長時間而沒有結果。
 @end
Endh
::mfp::math::matrix::eig 2 FALSE
Help
 @language:
 eig(A, B) calculates 2D square matrix A's eigen vectors and eigen values against same size matrix B, i.e. Av = lambda * Bv, where lambda is an eigen value and v is an eigen vector. The second parameter, B, is optional. By default, B is an I matrix. This function returns a two element list. First element is the eigen vector matrix, each column is an eigen vector. Second element is a diagonal matrix. Each diagonal element is an eigen value. Note that this function needs big memory to run and consumes significant CPU time. If running in mobile device, size of A and B should be no greater than 6*6. If running on PC, A and B should be no greater than 8*8. Otherwise, it may fail because lack of memory or run for very long time.
 @end
 @language:simplified_chinese
 eig(A, B)计算2维方阵A相对于同样尺寸的方阵B的特征向量和特征值，也就是Av = lambda * Bv，在这里，。lambda是一个特征值，v是一个特征向量。第二个参数，B，可以省略，其缺省值为I矩阵。这个函数返回一个包含两个成员的列表。第一个成员是特征向量矩阵，每一列是一个特征向量。第二个成员是一个对角矩阵，每一个对角线元素是一个特征值。注意运算这个函数非常耗费内存和CPU资源，如果在手机上运行，矩阵A的尺寸最好不要超过6*6，如果在电脑上运行，最好不要超过8*8，否则可能造成内存不足而程序崩溃或者运行很长时间而没有结果。
 @end
 @language:traditional_chinese
 eig(A, B)計算2維方陣A相對於同樣尺寸的方陣B的特征向量和特征值，也就是Av = lambda * Bv，在這裏，。lambda是一個特征值，v是一個特征向量。第二個參數，B，可以省略，其缺省值為I陣列。這個函數程式返回一個包含兩個成員的列表。第一個成員是特征向量陣列，每一列是一個特征向量。第二個成員是一個對角陣列，每一個對角線元素是一個特征值。註意運算這個程式非常耗費內存和CPU資源，如果在移動設備上運行，征列A的尺寸最好不要超過6*6，如果在電腦上運行，最好不要超過8*8，否則可能造成內存不足而程序崩潰或者運行很長時間而沒有結果。
 @end
Endh
::mfp::statement::evaluate 1 TRUE
Help
 @language:
 evaluate(expr_string,var_string1,var_value1,var_string2,var_value2, ...) returns the value of string based expression expr_string when the string based variable var_string1 equals var_value1, variable var_string2 equals var_value2, ... respectively. Note that var_value1, var_value2, ... can be any type and the number of variables can be zero, i.e. evaluate("3+2") is valid.
 @end
 @language:simplified_chinese
 evaluate(expr_string,var_string1,var_value1,var_string2,var_value2, ...) 返回当基于字符串的变量var_string1等于var_value1，var_string2等于var_value2，...时，基于字符串的表达式expr_string的值。注意变量var_string1，var_string2，...的值可以为任意类型。变量的数目可以为0，也就是说，evaluate("3+2")是合法的。
 @end
 @language:traditional_chinese
 evaluate(expr_string,var_string1,var_value1,var_string2,var_value2, ...) 返回當基於字串的變數var_string1等於var_value1，var_string2等於var_value2，...時，基於字串的表達式expr_string的值。註意變數var_string1，var_string2，...的值可以為任意類型。變數的數目可以為0，也就是說，evaluate("3+2")是合法的。
 @end
Endh
::mfp::math::log_exp::exp 1 FALSE
Help
 @language:
 exp(x), where x is a real or complex number, returns x powers of e.
 @end
 @language:simplified_chinese
 exp(x)返回自然对数e的x次方，x可以为实数或者虚数。
 @end
 @language:traditional_chinese
 exp(x)返回自然對數e的x次方，x可以為實數或者虛數。
 @end
Endh
::mfp::statement::expr_to_string 1 FALSE
Help
 @language:
 expr_to_string(expr) converts a string based expression expr to a string. Any defined function in the expression will be converted to its full name (i.e. citingspace followed by function name). For example, expr_to_string("pwd()") will be converted to "::mfp::io::file::pwd()" while expr_to_string("pwd(1,  2)") will be converted to "pwd(1,2)" because pwd function with zero parameter is defined while there is no pwd function with two parameters.
 @end
 @language:simplified_chinese
 expr_to_string(expr)将一个基于字符串的表达式expr转换成一个字符串。如果表达式中包含已经定义的函数，函数名将会被转换为全名，也就是绝对引用空间加函数名。比如expr_to_string("pwd()")将会返回"::mfp::io::file::pwd()"但是expr_to_string("pwd(1,  2)")将会返回"pwd(1,2)"，原因在于pwd函数没有参数，所以pwd()是合法的但是pwd(1,2)是调用一个没有定义的函数。
 @end
 @language:traditional_chinese
 expr_to_string(expr)將一個基於字串的運算式expr轉換成一個字串。如果運算式中包含已經定義的函數，函數名將會被轉換為全名，也就是絕對引用空間加函數名。比如expr_to_string("pwd()")將會返回"::mfp::io::file::pwd()"但是expr_to_string("pwd(1,  2)")將會返回"pwd(1,2)"，原因在於pwd函數沒有參數，所以pwd()是合法的但是pwd(1,2)是調用一個沒有定義的函數。
 @end
Endh
::mfp::math::matrix::eye 1 FALSE
Help
 @language:
 eye(x), where x is a positive integer, returns 2-D matrix I whose size is x times x.
 @end
 @language:simplified_chinese
 eye(x)返回正整数x乘x的2维方阵I。
 @end
 @language:traditional_chinese
 eye(x)返回正整數x乘x的2維方陣I。
 @end
Endh
::mfp::math::matrix::eye 2 FALSE
Help
 @language:
 eye(x,y), where x and y are both positive integer numbers, returns y-D matrix I whose size of each dimension is x. Note that eye(0) returns 1.
 @end
 @language:simplified_chinese
 eye(x,y)返回y（y为正整数）维方阵I，注意每一维长度均为正整数x。注意表达式eye(0)返回常数1。
 @end
 @language:traditional_chinese
 eye(x,y)返回y（y為正整數）維方陣I，註意每一維長度均為正整數x。註意表達式eye(0)返回常數1。
 @end
Endh
::mfp::io::file::fclose 1 FALSE
Help
 @language:
 fclose(fd) closes the file whose id is fd. If the fd is invalid, returns -1. Otherwise, returns 0.
 @end
 @language:simplified_chinese
 fclose(fd)关闭文件号fd所对应的文件。如果文件号不存在，返回-1，否则返回0。
 @end
 @language:traditional_chinese
 fclose(fd)關閉文件號fd所對應的檔案。如果檔案號不存在，返回-1，否則返回0。
 @end
Endh
::mfp::io::file::feof 1 FALSE
Help
 @language:
 feof(fd) identifies if it has been the end of a read mode file whose id is fd. If so, returns true. Otherwise, returns false. If fd is invalid, throws an exception.
 @end
 @language:simplified_chinese
 feof(fd)用于确定是否已经到达文件号为fd的读模式文件的末尾。如果是，返回true，否则返回false。如果文件号不合法，抛出异常。
 @end
 @language:traditional_chinese
 feof(fd)用于确定是否已经到达档案号为fd的读模式档案的末尾。如果是，返回true，否则返回false。如果档案号不合法，抛出异常。
 @end
Endh
::mfp::math::number::floor 1 FALSE
Help
 @language:
 floor(x), where x is a float value, returns the largest integer no larger than x.
 @end
 @language:simplified_chinese
 floor(x)，x是浮点数，返回不大于x的最大整数。
 @end
 @language:traditional_chinese
 floor(x)，x是浮點數，返回不大於x的最大整數。
 @end
Endh
::mfp::math::number::floor 2 FALSE
Help
 @language:
 floor(x,y), where x is a float value and y is a positive integer, returns the largest float value with y digits after decimal point no larger than x.
 @end
 @language:simplified_chinese
 floor(x,y)，x是浮点数，y是非负整数，返回不大于x的小数点后面保留y位有效数字的最大数值。
 @end
 @language:traditional_chinese
 floor(x,y)，x是浮點數，y是非負整數，返回不大於x的小數點後面保留y位有效數字的最大數值。
 @end
Endh
::mfp::io::file::fopen 2 FALSE
Help
 @language:
 fopen(path, mode) opens file at path to read or write and returns the file id number. It is similar to C and Matlab's same name function. However, only "r", "a", "w", "rb", "ab" and "wb" modes are supported. Examples are fopen("C:\\Temp\\Hello.dat", "ab") (Windows) and fopen("./hello.txt", "r") (Android).
 @end
 @language:simplified_chinese
 fopen(path, mode)打开位于path路径的文件并返回文件号以进行后续读写操作。它和C以及Matlab中的同名函数用法相似。但它仅支持"r"、"a"、"w"、"rb"、"ab"和"wb"六种读写模式。例子包括fopen("C:\\Temp\\Hello.dat", "ab") (Windows)和fopen("./hello.txt", "r") (Android)。
 @end
 @language:traditional_chinese
 fopen(path, mode)打开位于path路径的档案并返回档案号以进行后续读写操作。它和C以及Matlab中的同名函数程式用法相似。但它仅支持"r"、"a"、"w"、"rb"、"ab"和"wb"六种读写模式。例子包括fopen("C:\\Temp\\Hello.dat", "ab") (Windows)和fopen("./hello.txt", "r") (Android)。
 @end
Endh
::mfp::io::file::fopen 3 FALSE
Help
 @language:
 fopen(path, mode, encoding) opens a text file at path using character set encoding to read or write and returns the file id number. Because only text file supports encoding, parameter mode can only be "r", "a" and "w". Examples are fopen("C:\\Temp\\Hello.txt", "a", "LATIN-1") (Windows) and fopen("./hello.txt", "r", "UTF-8") (Android).
 @end
 @language:simplified_chinese
 fopen(path, mode, encoding)用字符编码encoding打开位于path路径的文件并返回文件号以进行后续读写操作。由于只有文本文件支持字符编码，参数mode只能为"r"、"a"和"w"3种读写模式。例子包括fopen("C:\\Temp\\Hello.txt", "a", "LATIN-1") (Windows)和fopen("./hello.txt", "r", "UTF-8") (Android)。
 @end
 @language:traditional_chinese
 fopen(path, mode, encoding)用字符編碼encoding打開位於path路徑的檔案並返回檔案號以進行後續讀寫操作。由於只有文本檔案支持字符編碼，參數mode只能為"r"、"a"和"w"3種讀寫模式。例子包括fopen("C:\\Temp\\Hello.txt", "a", "LATIN-1") (Windows)和fopen("./hello.txt", "r", "UTF-8") (Android)。
 @end
Endh
::mfp::io::file::fprintf 2 TRUE
Help
 @language:
 printf(format_string, ...), sprintf(format_string, ...) and fprintf(fd, format_string, ...) work like corresponding C/C++ functions. Function printf prints formatted string constructed from format_string and other parameter values to output console, sprintf constructs a new string from format_string and other parameters, and returns the new string, fprintf prints the formated string from format_string and other parameter values to the text file whose id is fd. The format_string parameter supports integer (%d, %i, %x, etc), float (%e, %f, etc), character(%c), string(%s) etc. User can find detailed information for construction of a format string by reading C language manual for these functions. For example, printf("Hello world!%f", 3.14) will output "Hello world!3.140000" on the screen, sprintf("%c%d", "A", 9) returns "A9" (MFP does not support single character type, so single character is stored as a one-char string).
 @end
 @language:simplified_chinese
 printf(format_string, ...)，sprintf(format_string, ...)和fprintf(fd, format_string, ...)和C/C++中的对应函数工作方式相似。这些函数通过format_string和其后的数值参数构造出一个新的字符串，printf函数将字符串打印到标准输出，sprintf函数将字符串作为返回值返回，fprintf函数则将字符串输出到文件号为fd的文本文件。字符串format_string支持输入整数（%d、%i、%x等），浮点数（%e、%f等），字符和字符串（%c和%s）等等。用户可以在C语言的帮助文档中找到format_string的构造方法。例如，printf("Hello world!%f", 3.14)将会打印输出"Hello world!3.140000"，而sprintf("%c%d", "A", 9)则返回"A9"（注意MFP不支持单一字符数据类型，所以单一的字符将会存储为一个只包括一个字符的字符串）。
 @end
 @language:traditional_chinese
 printf(format_string, ...)，sprintf(format_string, ...)和fprintf(fd, format_string, ...)和C/C++中的对应函数程式工作方式相似。这些函数程式通过format_string和其后的数值参数构造出一个新的字串，printf将字串打印到标准输出，sprintf将字串作为返回值返回，fprintf则将字串输出到档案号为fd的文本档案。字串format_string支持输入整数（%d、%i、%x等），浮点数（%e、%f等），字符和字串（%c和%s）等等。用户可以在C语言的帮助手册中找到format_string的构造方法。例如，printf("Hello world!%f", 3.14)将会打印输出"Hello world!3.140000"，而sprintf("%c%d", "A", 9)则返回"A9"（注意MFP不支持单一字符数据类型，所以单一的字符将会存储为一个只包括一个字符的字串）。
 @end
Endh
::mfp::io::file::fread 4 FALSE
Help
 @language:
 fread(fd, buffer, from, length) reads length number of bytes from file whose id is fd and stores the bytes in buffer starting from parameter from. Note that from and length must be non-negative and from + length should be no greater than buffer size. From and length are optional. If they do not exist, fread reads buffer size of bytes and fill the buffer. Buffer is also optional. If Buffer does not exist, fread returns a single byte. If fread find that it is end of the file before reading, returns -1. Otherwise, if using buffer, returns number of bytes that are read (if buffer is provided). If file does not exist, or is invalid or inaccessable, exception will be thrown. Examples are fread(1), fread(2, byte_buffer) and fread(2, byte_buffer, 3, 7).
 @end
 @language:simplified_chinese
 fread(fd, buffer, from, length)从文件（文件号fd）中读取length个字节数据，并把读出的数据保存在数组buffer中（从buffer的索引from开始保存）。注意from和length必须非负，并且from+length必须不比buffer的容量大。参数from和length可以同时省略。如果它们被省略，意味着fread读取整个buffer容量的字节数据并保存在整个buffer中。Buffer也可以省略，如果buffer省略，fread读取一个字节并返回。如果fread在读取之前发现已经到达文件末尾，则返回-1，否则返回读取字节的个数（如果buffer不省略）。如果文件不存在或非法或不可以访问，将会抛出异常。例子包括fread(1)、fread(2, byte_buffer)以及fread(2, byte_buffer, 3, 7)。
 @end
 @language:traditional_chinese
 fread(fd, buffer, from, length)從檔案（檔案號fd）中讀取length個字節數據，並把讀出的數據保存在數組buffer中（從buffer的索引from開始保存）。註意from和length必須非負，並且from+length必須不比buffer的容量大。參數from和length可以同時省略。如果它們被省略，意味著fread讀取整個buffer容量的字節數據並保存在整個buffer中。Buffer也可以省略，如果buffer省略，fread讀取一個字節並返回。如果fread在讀取之前發現已經到達檔案末尾，則返回-1，否則返回讀取字節的個數（如果buffer不省略）。如果檔案不存在或非法或不可以訪問，將會拋出異常。例子包括fread(1)、fread(2, byte_buffer)以及fread(2, byte_buffer, 3, 7)。
 @end
Endh
::mfp::io::file::freadline 1 FALSE
Help
 @language:
 freadline(fd) reads one line from text file whose id is fd. If before reading, freadline finds it is end of the file, it returns NULL. Otherwise, it returns the string based line excluding the change-line character(s) at the end.
 @end
 @language:simplified_chinese
 freadline(fd)读取文本文件（文件号是fd）的一行。如果freadline在读取之前发现已经到达文件末尾，它返回NULL。否则，它返回基于字符串的这一行的内容，但不包括结尾的换行符。
 @end
 @language:traditional_chinese
 freadline(fd)讀取文本檔案（檔案號是fd）的一行。如果freadline在讀取之前發現已經到達檔案末尾，它返回NULL。否則，它返回基於字串的這一行的內容，但不包括結尾的換行符。
 @end
Endh
::mfp::io::file::fscanf 2 FALSE
Help
 @language:
 scanf(format_string), sscanf(input_from, format_string) and fscanf(fd, format_string) work like corresponding C/C++ functions. Function scanf reads one line input from user, sscanf reads string based parameter input_from, and fscanf reads content from a file whose id is fd. The format_string parameter supports integer (%d, %i, %x, etc), float (%e, %f, etc), character(%c), string(%s) etc. User can find detailed information for construction of a format string by reading C language manual for these functions. Different from C language, these functions do not accept additional parameters to store read values. These functions simply return all the read values in an array. For example, sscanf("3Hello world!", "%d%c%c%s") will returns [3, "H", "e", "llo"] (MFP does not support single character type, so single character is stored as a one-char string).
 @end
 @language:simplified_chinese
 scanf(format_string)，sscanf(input_from, format_string)和fscanf(fd, format_string)和C/C++中的对应函数工作方式相似。scanf读取用户的一行输入，sscanf读取字符串input_from，fscanf从文件（文件号fd）中读取文件内容。字符串format_string支持输入整数（%d、%i、%x等），浮点数（%e、%f等），字符和字符串（%c和%s）等等。用户可以在C语言的帮助文档中找到format_string的构造方法。但是，和C语言有所不同，MFP中的这些函数不需要输入用于存储读取数值的参数。所有的读取的数值将会保存在一个数组中作为返回值返回。比如，sscanf("3Hello world!", "%d%c%c%s")将会返回[3, "H", "e", "llo"]（注意MFP不支持单一字符数据类型，所以单一的字符将会存储为一个只包括一个字符的字符串）。
 @end
 @language:traditional_chinese
 scanf(format_string)，sscanf(input_from, format_string)和fscanf(fd, format_string)和C/C++中的對應函數程式工作方式相似。scanf讀取用戶的一行輸入，sscanf讀取字串input_from，fscanf從檔案（檔案號fd）中讀取檔案內容。字串format_string支持輸入整數（%d、%i、%x等），浮點數（%e、%f等），字符和字串（%c和%s）等等。用戶可以在C語言的幫助文檔中找到format_string的構造方法。但是，和C語言有所不同，MFP中的這些函數程式不需要輸入用於存儲讀取數值的參數。所有的讀取的數值將會保存在一個數組中作為返回值返回。比如，sscanf("3Hello world!", "%d%c%c%s")將會返回[3, "H", "e", "llo"]（註意MFP不支持單一字符數據類型，所以單一的字符將會存儲為一個只包括一個字符的字串）。
 @end
Endh
::mfp::io::file::fwrite 4 FALSE
Help
 @language:
 fwrite(fd, buffer, from, length) writes length number of bytes to file whose id is fd. The data to write store in parameter buffer starting from parameter from. Note that from and length must be non-negative and from + length should be no greater than buffer size. From and length are optional. If they do not exist, fwrite writes whole buffer to file. Buffer can also be a single byte which means fwrite writes only 1 byte to file. If file does not exist, or is invalid or inaccessable, exception will be thrown. Examples are fwrite(1, 108), fwrite(2, byte_buffer) and fwrite(2, byte_buffer, 3, 7).
 @end
 @language:simplified_chinese
 fwrite(fd, buffer, from, length)向文件（文件号fd）中写入length个字节数据。这些字节数据保存在数组buffer中（从buffer的索引from开始）。注意from和length必须非负，并且from+length必须不比buffer的容量大。参数from和length可以同时省略。如果它们被省略，意味着fwrite写入整个buffer的字节数据。Buffer也可以是一个单独的字节，在这种情况下fwrite仅写入一个字节的数据。如果文件不存在或非法或不可以访问，将会抛出异常。例子包括fwrite(1, 108)、fwrite(2, byte_buffer)以及fwrite(2, byte_buffer, 3, 7)。
 @end
 @language:traditional_chinese
 fwrite(fd, buffer, from, length)向檔案（檔案號fd）中寫入length個字節數據。這些字節數據保存在數組buffer中（從buffer的索引from開始）。註意from和length必須非負，並且from+length必須不比buffer的容量大。參數from和length可以同時省略。如果它們被省略，意味著fwrite寫入整個buffer的字節數據。Buffer也可以是一個單獨的字節，在這種情況下fwrite僅寫入一個字節的數據。如果檔案不存在或非法或不可以訪問，將會拋出異常。例子包括fwrite(1, 108)、fwrite(2, byte_buffer)以及fwrite(2, byte_buffer, 3, 7)。
 @end
Endh
::mfp::paracomp::connect::generate_interface 2 FALSE
Help
 @language:
 generate_interface(protocol, address) returns definition of a local interface object. It needs two parameters. The first parameter is string based protocol, like "TCPIP". The second parameter is address, also string based, like "10.32.202.78". This parameter is optional. By default, it is local host address, e.g. "127.0.0.1" for "TCPIP" protocol.
 @end
 @language:simplified_chinese
 generate_interface(protocol, address)返回一个本地interface对象的定义。它需要两个参数。第一个参数是基于字符串的通信协议名，比如"TCPIP"；第二个参数是基于字符串的地址，比如"10.32.202.78"。第二个参数是可选参数，缺省值为本机的localhost地址，比如，对于"TCPIP"协议，本机localhost地址是"127.0.0.1"。
 @end
 @language:traditional_chinese
 generate_interface(protocol, address)返回一個本地interface對象的定義。它需要兩個參數。第一個參數是基於字符串的通信協議名，比如"TCPIP"；第二個參數是基於字符串的地址，比如"10.32.202.78"。第二個參數是可選參數，缺省值為本機的localhost地址，比如，對於"TCPIP"協議，本機localhost地址是"127.0.0.1"。
 @end
Endh
::mfp::io::file::get_absolute_path 1 FALSE
Help
 @language:
 get_absolute_path(fd_or_path) returns a string value which is the absolute path of file either whose id number is fd_or_path (here fd_or_path is an integer) or whose relative path is fd_or_path (here fd_or_path is a string).
 @end
 @language:simplified_chinese
 get_absolute_path(fd_or_path)返回文件号fd_or_path（这里fd_or_path是一个整数）或者相对路径为fd_or_path（这里fd_or_path是一个字符串）所对应的文件的绝对路径字符串。
 @end
 @language:traditional_chinese
 get_absolute_path(fd_or_path)返回檔案號fd_or_path（這裏fd_or_path是一個整數）或者相對路徑為fd_or_path（這裏fd_or_path是一個字串）所對應的檔案的絕對路徑字串。
 @end
Endh
::mfp::paracomp::connect::get_all_connect_call_ids 1 TRUE
Help
 @language:
 get_all_connect_call_ids returns all connection ids of a network interface or all call ids of a connection. It has two modes. The first mode has one parameter which is an interface object returned by generate_interface function. The returned value is ids of all incoming and outgoing connections of this interface. If the interface is unavailable, an exception is thrown. The second mode has three parameters. The first one is an infterface object returned by generate_interface function. The second one is a connection id (which is remote address if the connection is outgoing or can be returned by get_call_info function if the connection is incoming). The third parameter is a boolean value. If it is true, this function's returned value is an array of all the incoming call ids of this connection. Otherwise, the returned value is all the outgoing call ids of this connection. If the interface is unavailable, an exception is thrown. If the connection id does not exist, it returns null. An example of this function is get_all_connect_call_ids(server_interface, connect_id, false).
 @end
 @language:simplified_chinese
 get_all_connect_call_ids返回一个网络界面所有的连接id或者一个连接的所有call沙盒id。它有两种模式。第一种调用模式只有一个参数，为一个代表本地网络界面信息的对象。 该对象为generate_interface函数的返回值。在这种模式下，本函数的返回值为所有从连入和连出的网络连接的id数组。注意如果本地信息不合法，本函数将抛出异常。第二种调用模式有三个参数。第一个参数为一个代表本地网络界面信息的对象。 该对象为generate_interface函数的返回值。第二个参数为一个连接对象的id（如果该连接是从本地到远端的连出网络连接，该id是远端地址，如果是连入网络连接，该id可以通过调用get_call_info函数得到）。第三个参数是一个布尔值，如果是true，这个函数返回所有通过该连接的连入的call沙盒id的数组，否则，这个函数返回所有通过该连接的连出的call沙盒id的数组。注意如果本地信息不合法，本函数将抛出异常。如果连接id不存在，将返回NULL。本函数的一个例子是get_all_connect_call_ids(server_interface, connect_id, false)。
 @end
 @language:traditional_chinese
 get_all_connect_call_ids返回一個網絡界面所有的連接id或者一個連接的所有call沙盒id。它有兩種模式。第一種調用模式只有一個參數，為一個代表本地網絡界面信息的對象。 該對象為generate_interface函數的返回值。在這種模式下，本函數的返回值為所有從連入和連出的網絡連接的id數組。註意如果本地信息不合法，本函數將拋出異常。第二種調用模式有三個參數。第一個參數為一個代表本地網絡界面信息的對象。 該對象為generate_interface函數的返回值。第二個參數為一個連接對象的id（如果該連接是從本地到遠端的連出網絡連接，該id是遠端地址，如果是連入網絡連接，該id可以通過調用get_call_info函數得到）。第三個參數是一個布爾值，如果是true，這個函數返回所有通過該連接的連入的call沙盒id的數組，否則，這個函數返回所有通過該連接的連出的call沙盒id的數組。註意如果本地信息不合法，本函數將拋出異常。如果連接id不存在，將返回NULL。本函數的一個例子是get_all_connect_call_ids(server_interface, connect_id, false)。
 @end
Endh
::mfp::paracomp::host::get_all_host_addresses 1 FALSE
Help
 @language:
 get_all_host_addresses(protocol_name) returns all string based addresses for all the interfaces of the protocol named by protocol_name. Parameter protocol_name is optional. If not given or is an empty string, this function returns all string based addresses for all the interfaces of all supported protocols. An example of this function is get_all_host_addresses("TCPIP").
 @end
 @language:simplified_chinese
 get_all_host_addresses(protocol_name)返回protocol_name协议在本机的所有界面的所有地址。参数protocol_name是可选的。如果没有给出protocol_name参数或者给出是一个空的字符串，本函数返回本机所有被支持的通信协议在本机所有界面的所有地址。本函数的一个例子是get_all_host_addresses("TCPIP")。
 @end
 @language:traditional_chinese
 get_all_host_addresses(protocol_name)返回protocol_name協議在本機的所有界面的所有地址。參數protocol_name是可選的。如果沒有給出protocol_name參數或者給出是一個空的字符串，本函數返回本機所有被支持的通信協議在本機所有界面的所有地址。本函數的一個例子是get_all_host_addresses("TCPIP")。
 @end
Endh
::mfp_compiler::annotation::compulsory_link::get_all_referred_units 0 FALSE
Help
 @language:
 get_all_referred_units() is a function for MFP compiler, which means it takes effect only when MFP is packing scripts to build an MFP app. It returns an array of all the MFP function and class references defined in all the user defined libs.
 @end
 @language:simplified_chinese
 get_all_referred_units()是一个用于编译的函数，也就是说它在打包脚本生成MFP应用时发挥作用。本函数返回一个数组，其中包括所有的用户定义的MFP函数和类的引用信息。
 @end
 @language:traditional_chinese
 get_all_referred_units()是一個用於編譯的函數，也就是說它在打包腳本生成MFP應用時發揮作用。本函數返回一個數組，其中包括所有的用戶定義的MFP函數和类的引用信息。
 @end
Endh
::mfp::platform_hardware::platform_info::get_asset_file_path 1 FALSE
Help
 @language:
 get_asset_file_path(asset_file_entry) tells developer the path of an asset file (i.e. string based parameter asset_file_entry) if the running script is actually an MFP app. If it is not an MFP app, this functions returns null.
 @end
 @language:simplified_chinese
 get_asset_file_path(asset_file_entry)告诉开发人员一个asset文件（文件名由字符串参数asset_file_entry给出）的路径。注意，如果正在运行的脚本不是一个MFP应用，本函数返回null。
 @end
 @language:traditional_chinese
 get_asset_file_path(asset_file_entry)告訴開發人員一個asset檔（檔案名由字串參數asset_file_entry給出）的路徑。注意，如果正在運行的腳本不是一個MFP應用，本函數返回null。
 @end
Endh
::mfp::multimedia::webrtc_lib::get_audio_track_enable 1 FALSE
Help
 @language:
 This function tests if audio track has been enabled. True is returned if audio track is enabled. Otherwise false. It has only one parameter which is a display handle returned from open_screen_display function.
 @end
 @language:simplified_chinese
 本函数测试音轨是否已经被激活。如果是，返回True，否则返回False。这个函数仅有一个参数，就是一个显示窗口的句柄。该句柄是open_screen_display函数的返回值。
 @end
 @language:traditional_chinese
 本函數測試音軌是否已經被激活。如果是，返回True，否則返回False。這個函數僅有一個參數，就是一個顯示窗口的句柄。該句柄是open_screen_display函數的返回值。
 @end
Endh
::mfp::paracomp::connect::get_call_info 0 FALSE
Help
 @language:
 This function returns NULL if not called within a call sandbox. Otherwise, it returns an array whose first element is its call sandbox id, second element is its connect id and third element is an local info object.
 @end
 @language:simplified_chinese
 本函数如果不是在一个call沙盒中被调用，将会返回NULL。否则本函数返回一个数组。数组的第一个元素是调用本函数的call沙盒的id。数组的第二个元素是调用本函数的call沙盒所在的连接的id，数组的第三个元素是存有本地信息的对象。
 @end
 @language:traditional_chinese
 本函數如果不是在一個call沙盒中被調用，將會返回NULL。否則本函數返回一個數組。數組的第一個元素是調用本函數的call沙盒的id。數組的第二個元素是調用本函數的call沙盒所在的連接的id，數組的第三個元素是存有本地信息的對象。
 @end
Endh
::mfp::io::file::get_canonical_path 1 FALSE
Help
 @language:
 get_canonical_path(fd_or_path) returns a string value which is the canonical path (path which is absolute and does not rely on symbol link) of file either whose id number is fd_or_path (here fd_or_path is an integer) or whose relative path is fd_or_path (here fd_or_path is a string).
 @end
 @language:simplified_chinese
 get_canonical_path(fd_or_path)返回文件号fd_or_path（这里fd_or_path是一个整数）或者相对路径为fd_or_path（这里fd_or_path是一个字符串）所对应的文件的标准路径（不依赖符号链接的绝对路径）字符串。
 @end
 @language:traditional_chinese
 get_canonical_path(fd_or_path)返回檔案號fd_or_path（這裏fd_or_path是一個整數）或者相對路徑為fd_or_path（這裏fd_or_path是一個字串）所對應的檔案的標準路徑（不依賴符號鏈接的絕對路徑）字串。
 @end
Endh
::mfp_compiler::annotation::compulsory_link::get_classes 0 TRUE
Help
 @language:
 get_classes(...) is a function for MFP compiler, which means it takes effect only when MFP is packing scripts to build an MFP app. It has arbitary number of string based parameters. Each parameter is a class name. It returns an array of all the MFP class references defined in the parameters.
 @end
 @language:simplified_chinese
 get_classes(...) 是一个用于编译的函数，也就是说它在打包脚本生成MFP应用时发挥作用。本函数返回一个数组，其中包括所有的出现在参数中的MFP类的引用信息。
 @end
 @language:traditional_chinese
 get_classes(...) 是一個用於編譯的函數，也就是說它在打包腳本生成MFP應用時發揮作用。本函數返回一個數組，其中包括所有的出現在參數中的MFP类的引用信息。
 @end
Endh
::mfp::platform_hardware::platform_info::get_country_language 0 FALSE
Help
 @language:
 This function returns a two element array. The first element is string based country code. Country code should be either the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code. User may check https://en.wikipedia.org/wiki/ISO_3166 for country code list. The second element is string based language code. It generally follows ISO 639 standard. However, please note that ISO 639 is not a stable standard. Some languages' codes have changed. This function always returns old code. User may check https://en.wikipedia.org/wiki/ISO_639 for language code list.
 @end
 @language:simplified_chinese
 本函数返回一个包含两个元素的矩阵。第一个元素是一个基于字符串的国家代码。国家代码要么是一个空字符串，要么是一个大写的，符合ISO 3166国际标准的两字母的代码，要么是一个符合UN M.49的3个数字的代码。用户可以查询百度百科获取ISO 3166国家代码的列表。第二个元素是基于字符串的语言代码。它基本上符合ISO 639国际标准，除了极少数例外。出现例外的原因是ISO 639标准在变化，一些语言的代码已经发生了改变，而这个函数总是返回旧的代码。用户可以查询百度百科获取ISO 639所有的语言代码列表。
 @end
 @language:traditional_chinese
 本函數程式返回一個包含兩個元素的矩陣。第一個元素是一個基於字串的國家代碼。國家代碼要麼是一個空字元串，要麼是一個大寫的，符合ISO 3166國際標準的兩字母的代碼，要麼是一個符合UN M.49的3個數字的代碼。用戶可以查詢https://en.wikipedia.org/wiki/ISO_3166獲取ISO 3166國家代碼的列表。第二個元素是基於字串的語言代碼。它基本上符合ISO 639國際標準，除了極少數例外。出現例外的原因是ISO 639標準在變化，一些語言的代碼已經發生了改變，而這個函數總是返回舊的代碼。用戶可以查詢https://en.wikipedia.org/wiki/ISO_639獲取ISO 639所有的語言代碼列表。
 @end
Endh
::mfp::time_date::get_day_of_month 1 FALSE
Help
 @language:
 get_year(timestamp), get_month(timestamp), get_day_of_year(timestamp), get_day_of_month(timestamp), get_day_of_week(timestamp), get_hour(timestamp), get_minute(timestamp), get_second(timestamp) and get_millisecond(timestamp) return the year, month, day of year, day of month, day of week, hour minute, second and millisecond of the time stamp parameter respectively. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. And day of week is an integer corresponding to Sunday if 0, Monday if 1, ... Saturday if 6. For example, get_day_of_week(get_time_stamp(2014, 12, 21)) returns 0 (Sunday).
 @end
 @language:simplified_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分别返回时标timestamp所对应的年，月，本年中的第几天，本月中的第几天，本星期中的第几天（礼拜天是第0天，礼拜一是第一天，...），小时，分钟，秒钟和毫秒。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是礼拜天。
 @end
 @language:traditional_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分別返回時標timestamp所對應的年，月，本年中的第幾天，本月中的第幾天，本星期中的第幾天（禮拜天是第0天，禮拜一是第一天，...），小時，分鐘，秒鐘和毫秒。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是禮拜天。
 @end
Endh
::mfp::time_date::get_day_of_week 1 FALSE
Help
 @language:
 get_year(timestamp), get_month(timestamp), get_day_of_year(timestamp), get_day_of_month(timestamp), get_day_of_week(timestamp), get_hour(timestamp), get_minute(timestamp), get_second(timestamp) and get_millisecond(timestamp) return the year, month, day of year, day of month, day of week, hour minute, second and millisecond of the time stamp parameter respectively. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. And day of week is an integer corresponding to Sunday if 0, Monday if 1, ... Saturday if 6. For example, get_day_of_week(get_time_stamp(2014, 12, 21)) returns 0 (Sunday).
 @end
 @language:simplified_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分别返回时标timestamp所对应的年，月，本年中的第几天，本月中的第几天，本星期中的第几天（礼拜天是第0天，礼拜一是第一天，...），小时，分钟，秒钟和毫秒。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是礼拜天。
 @end
 @language:traditional_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分別返回時標timestamp所對應的年，月，本年中的第幾天，本月中的第幾天，本星期中的第幾天（禮拜天是第0天，禮拜一是第一天，...），小時，分鐘，秒鐘和毫秒。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是禮拜天。
 @end
Endh
::mfp::time_date::get_day_of_year 1 FALSE
Help
 @language:
 get_year(timestamp), get_month(timestamp), get_day_of_year(timestamp), get_day_of_month(timestamp), get_day_of_week(timestamp), get_hour(timestamp), get_minute(timestamp), get_second(timestamp) and get_millisecond(timestamp) return the year, month, day of year, day of month, day of week, hour minute, second and millisecond of the time stamp parameter respectively. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. And day of week is an integer corresponding to Sunday if 0, Monday if 1, ... Saturday if 6. For example, get_day_of_week(get_time_stamp(2014, 12, 21)) returns 0 (Sunday).
 @end
 @language:simplified_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分别返回时标timestamp所对应的年，月，本年中的第几天，本月中的第几天，本星期中的第几天（礼拜天是第0天，礼拜一是第一天，...），小时，分钟，秒钟和毫秒。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是礼拜天。
 @end
 @language:traditional_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分別返回時標timestamp所對應的年，月，本年中的第幾天，本月中的第幾天，本星期中的第幾天（禮拜天是第0天，禮拜一是第一天，...），小時，分鐘，秒鐘和毫秒。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是禮拜天。
 @end
Endh
::mfp::graph_lib::display::get_display_bgrnd_color 1 FALSE
Help
 @language:
 get_display_bgrnd_color(display) returns background color of a display (whether screen display or image display). Color is a 4-elem array ([Alpha, R, G, B]) or 3-elem array ([R, G, B]) with each elem from 0 to 255.
 @end
 @language:simplified_chinese
 get_display_bgrnd_color(display)返回一个display的背景色。该display既可以是screen display，也可以是image display。背景色是一个4个或3个元素的数组，如果是4个元素，就是[Alpha，R，G，B]，如果是3个元素，就是[R，G，B]，在该数组中，每一个元素的值都是从0到255。
 @end
 @language:traditional_chinese
 get_display_bgrnd_color(display)返回一個display的背景色。該display既可以是screen display，也可以是image display。背景色是一個4個或3個元素的數組，如果是4個元素，就是[Alpha，R，G，B]，如果是3個元素，就是[R，G，B]，在該數組中，每一個元素的值都是從0到255。
 @end
Endh
::mfp::graph_lib::display::get_display_bgrnd_image 1 FALSE
Help
 @language:
 get_display_bgrnd_image(display) returns background image of a display (whether screen display or image display).
 @end
 @language:simplified_chinese
 get_display_bgrnd_image(display)返回一个display的背景图像。
 @end
 @language:traditional_chinese
 get_display_bgrnd_image(display)返回一個display的背景圖像。
 @end
Endh
::mfp::graph_lib::display::get_display_bgrnd_image_mode 1 FALSE
Help
 @language:
 get_display_bgrnd_image_mode(display) returns background image mode of a display (whether screen display or image display). Image mode is an integer whose value is either 0 (original background image is placed on left-top), 1 (background image is scaled to the whole screen), 2 (background image is tiled), or 3 (background image in the middle of screen).
 @end
 @language:simplified_chinese
 get_display_bgrnd_image_mode(display)返回一个display的背景图像的布置方式。0表示原始背景图像被置于左上角，1表示背景图像被缩放值screen大小以便覆盖整个screen，2表示背景图像如贴瓷砖一样重复整齐排列，但每一片“瓷砖”大小保持原状， 3背景图像位于屏幕正中央。在这种情况下背景图像的大小也不会改变。
 @end
 @language:traditional_chinese
 get_display_bgrnd_image_mode(display)返回一個display的背景圖像的布置方式。0表示原始背景圖像被置於左上角，1表示背景圖像被縮放值screen大小以便覆蓋整個screen，2表示背景圖像如貼瓷磚一樣重復整齊排列，但每一片“瓷磚”大小保持原狀， 3背景圖像位於屏幕正中央。在這種情況下背景圖像的大小也不會改變。
 @end
Endh
::mfp::graph_lib::display::get_display_caption 1 FALSE
Help
 @language:
 get_display_caption(display) returns a screen display's caption. If display is an image display or in Android, it always returns an empty string.
 @end
 @language:simplified_chinese
 get_display_caption(display)在JAVA平台上返回一个screen display的标题。对于image display，或者是对于安卓平台，get_display_caption总是返回空字符串。
 @end
 @language:traditional_chinese
 get_display_caption(display)在JAVA平臺上返回一個screen display的標題。對於image display，或者是對於安卓平臺，get_display_caption總是返回空字元串。
 @end
Endh
::mfp::graph_lib::display::get_display_confirm_close 1 FALSE
Help
 @language:
 get_display_confirm_close(display) returns whether confirming is required before closing a screen display. If display is an image display, it always returns false.
 @end
 @language:simplified_chinese
 get_display_confirm_close(display)返回关闭一个screen display是否需要确认。对于image display，get_display_confirm_close总是返回FALSE。
 @end
 @language:traditional_chinese
 get_display_confirm_close(display)返回關閉一個screen display是否需要確認。對於image display，get_display_confirm_close總是返回FALSE。
 @end
Endh
::mfp::graph_lib::display::get_display_orientation 1 FALSE
Help
 @language:
 get_display_orientation(display) returns orientation of a screen display. In Android, if a screen display is landscape, it returns 0; if a screen display is portrait, it returns 1; if a screen display's orientation is unspecified, it returns -1. For image display or on a JAVA platform, it always returns -1.
 @end
 @language:simplified_chinese
 get_display_orientation(display)返回一个screen display是横屏（0）还是竖屏（1）还是横竖均可（-1）。对于image display，或者在JAVA平台上，get_display_orientation总是返回-1。
 @end
 @language:traditional_chinese
 get_display_orientation(display)返回一個screen display是橫屏（0）還是豎屏（1）還是橫豎均可（-1）。對於image display，或者在JAVA平臺上，get_display_orientation總是返回-1。
 @end
Endh
::mfp::graph_lib::display::get_display_resizable 1 FALSE
Help
 @language:
 get_display_resizable(display) tells developer a screen display resizable or not. If display is an image display, it always returns false.
 @end
 @language:simplified_chinese
 get_display_resizable(display)用于返回一个布尔量，表示一个screen display是否可以改变大小。对于image display，get_display_resizable总是返回false。
 @end
 @language:traditional_chinese
 get_display_resizable(display)用於返回一個布爾量，表示一個screen display是否可以改變大小。對於image display，get_display_resizable總是返回false。
 @end
Endh
::mfp::graph_lib::display::get_display_size 1 FALSE
Help
 @language:
 get_display_size(display) returns a display (whether screen display or image display)'s size. The returned value is a two element array, i.e. [width, height].
 @end
 @language:simplified_chinese
 get_display_size(display)返回一个display（既可以是screen display，也可以是image display）的长度和高度。返回值是一个包含两个元素的矩阵，第一个元素是长度，第二个元素是高度。
 @end
 @language:traditional_chinese
 get_display_size(display)返回一個display（既可以是screen display，也可以是image display）的長度和高度。返回值是一個包含兩個元素的矩陣，第一個元素是長度，第二個元素是高度。
 @end
Endh
::mfp::graph_lib::display::get_display_snapshot 4 FALSE
Help
 @language:
 get_display_snapshot(display, update_screen_or_not, width_ratio, height_ratio) returns a display (whether screen display or image display)'s snapshot. Its second parameter, update_screen_or_not, telling MFP whether or not the display should be refreshed so that latest image can be captured. The third and fourth parameters are optional. They tell MFP how to zoom the snapshot. By default, both of them are 1. For example, get_display_snapshot(d, true, 0.5, 3) refreshes display d (i.e. all the painting event callbacks take effect) and then takes snapshot of the display and returns a zoomed image. The width of returned image is 0.5 * original snapshot width and the height of returned image is 3 * original snapshot height.
 @end
 @language:simplified_chinese
 get_display_snapshot(display, update_screen_or_not, width_ratio, height_ratio)返回一个display（既可以是screen display，也可以是image display）的截屏。它的第二个参数，update_screen_or_not，告诉MFP在截屏之前该display是否需要刷新；它的第三个和第四个参数，是可选参数，缺省值均为1，分别用于告诉MFP返回的截屏的长度和高度的缩放比例。比如，get_display_snapshot(d, true, 0.5, 3)首先刷新屏幕d，然后截取d的图像，最后将截取的图像长度上压缩为原来的一半，高度上拉伸为原来的三倍并返回新的图像。
 @end
 @language:traditional_chinese
 get_display_snapshot(display, update_screen_or_not, width_ratio, height_ratio)返回一個display（既可以是screen display，也可以是image display）的截屏。它的第二個參數，update_screen_or_not，告訴MFP在截屏之前該display是否需要刷新；它的第三個和第四個參數，是可選參數，缺省值均為1，分別用於告訴MFP返回的截屏的長度和高度的縮放比例。比如，get_display_snapshot(d, true, 0.5, 3)首先刷新螢幕d，然後截取d的圖像，最後將截取的圖像長度上壓縮為原來的一半，高度上拉伸為原來的三倍並返回新的圖像。
 @end
Endh
::mfp::math::matrix::get_eigen_values 1 FALSE
Help
 @language:
 get_eigen_values(A) calculates 2D square matrix A's eigen values. This function returns an eigen value list which includes all the eigen values including duplicated ones. Note that this function needs big memory to run and consumes significant CPU time. If running in mobile device, size of A and B should be no greater than 6*6. If running on PC, A and B should be no greater than 8*8. Otherwise, it may fail because lack of memory or run for very long time.
 @end
 @language:simplified_chinese
 get_eigen_values(A)计算2维方阵A的特征值。这个函数返回所有特征值，包括重复的特征值的列表。注意运算这个函数非常耗费内存和CPU资源，如果在手机上运行，矩阵A的尺寸最好不要超过6*6，如果在电脑上运行，最好不要超过8*8，否则可能造成内存不足而程序崩溃或者运行很长时间而没有结果。
 @end
 @language:traditional_chinese
 get_eigen_values(A)計算2維方陣A的特征值。這個函數程式返回所有特征值，包括重復的特征值的列表。註意運算這個程式非常耗費內存和CPU資源，如果在移動設備上運行，征列A的尺寸最好不要超過6*6，如果在電腦上運行，最好不要超過8*8，否則可能造成內存不足而程序崩潰或者運行很長時間而沒有結果。
 @end
Endh
::mfp::math::matrix::get_eigen_values 2 FALSE
Help
 @language:
 get_eigen_values(A, B) calculates 2D square matrix A's eigen values against same size matrix B, i.e. Av = lambda * Bv, where lambda is an eigen value and v is an eigen vector. The second parameter, B, is optional. By default, B is an I matrix. This function returns an eigen value list which includes all the eigen values including duplicated ones. Note that this function needs big memory to run and consumes significant CPU time. If running in mobile device, size of A and B should be no greater than 6*6. If running on PC, A and B should be no greater than 8*8. Otherwise, it may fail because lack of memory or run for very long time.
 @end
 @language:simplified_chinese
 get_eigen_values(A, B)计算2维方阵A相对于同样尺寸的方阵B的特征值，也就是Av = lambda * Bv，在这里，。lambda是一个特征值，v是一个特征向量。第二个参数，B，可以省略，其缺省值为I矩阵。这个函数返回所有特征值，包括重复的特征值的列表。注意运算这个函数非常耗费内存和CPU资源，如果在手机上运行，矩阵A的尺寸最好不要超过6*6，如果在电脑上运行，最好不要超过8*8，否则可能造成内存不足而程序崩溃或者运行很长时间而没有结果。
 @end
 @language:traditional_chinese
 get_eigen_values(A, B)計算2維方陣A相對於同樣尺寸的方陣B的特征值，也就是Av = lambda * Bv，在這裏，。lambda是一個特征值，v是一個特征向量。第二個參數，B，可以省略，其缺省值為I陣列。這個函數程式返回所有特征值，包括重復的特征值的列表。註意運算這個程式非常耗費內存和CPU資源，如果在移動設備上運行，征列A的尺寸最好不要超過6*6，如果在電腦上運行，最好不要超過8*8，否則可能造成內存不足而程序崩潰或者運行很長時間而沒有結果。
 @end
Endh
::mfp::data_struct::array_based::get_elem_from_ablist 2 FALSE
Help
 @language:
 get_elem_from_ablist(array_based_list, idx) returns a reference of the value at idx from an array based list array_based_list. If the idx is invalid, an exception is thrown.
 @end
 @language:simplified_chinese
 get_elem_from_ablist(array_based_list, idx)返回基于数组的序列array_based_list在idx处的值的引用。如果idx不合法，一个异常将会被抛出。
 @end
 @language:traditional_chinese
 get_elem_from_ablist(array_based_list, idx)返回基於數組的序列array_based_list在idx處的值的引用。如果idx不合法，一個異常將會被拋出。
 @end
Endh
::mfp::graph_lib::event::get_event_info 2 FALSE
Help
 @language:
 get_event_info(event, property_name) returns a property of event. Its first parameter is the event and its second parameter is string based property name. The GDI_INITIALIZE and GDI_CLOSE events don't have any properties. WINDOW_RESIZED event has four integer properties which are "width" (current width of the window), "height" (current height of the window), "last_width" (width of the window before this event was triggered), "last_height" (height of the window before this event was triggered). POINTER_DOWN event has three properties which are "button" (an integer property telling developer which mouse button triggers this event in PC or always zero in Android), "x" (x coordinate which is a double) and "y" (y coordinate which is a double). Similar to POINTER_DOWN, POINTER_UP event and POINTER_CLICKED event also have three properties which are "button", "x" and "y". POINTER_DRAGGED event and POINTER_SLIDED event both have five properties which are "button", "x", "y", "last_x" and "last_y". Among them, "button" has same meaning as for POINTER_DOWN, "last_x" and "last_y" are coordinates before the event is triggered, and "x" and "y" are coordinates after the event is triggered. POINTER_PINCHED event has eight double value properties which store the coordinates of fingers before pinching and after pinching. The properties are "x", "y", "x2", "y2", "last_x", "last_y", "last_x2", and "last_y2".
 @end
 @language:simplified_chinese
 get_event_info(event, property_name)返回event事件的一个特性。它的第一个参数是事件，第二个参数是基于字符串的特性的名字。GDI_INITIALIZE和GDI_CLOSE事件没有单独的特性。WINDOW_RESIZED事件有四个整数特性，它们是"width"，"height"，"last_width"，"last_height"。它们分别表示当前窗口的宽度和高度，以及事件触发前窗口的宽度和高度。POINT_DOWN，POINT_UP和POINT_CLICKED事件均有三个特性。其中，"button"特性是一个整数，表示鼠标的哪一个键触发了这个事件。注意在安卓平台上，"button"特性总是0。"x"和"y"表示事件触发时的坐标位子，它们均为浮点数。POINT_DRAGGED和POINT_SLICED事件均有5个特性。其中，"button"特性是一个整数，表示鼠标的哪一个键触发了这个事件。注意在安卓平台上，"button"特性总是0。"last_x"和"last_y"表示事件触发前的坐标位子，它们均为浮点数。"x"和"y"表示事件触发后的坐标位子，它们均为浮点数。POINTER_PINCHED事件有八个特性，它们是"last_x"、"last_y"、"last_x2"、"last_y2"、"x"、"y"、"x2"以及"y2"。这些特性定义了参与POINTER_PINCHED事件的两根手指头在事件触发前和事件触发后的坐标位置。这些特性均为浮点数。
 @end
 @language:traditional_chinese
 get_event_info(event, property_name)返回event事件的一個特性。它的第一個參數是事件，第二個參數是基於字串的特性的名字。GDI_INITIALIZE和GDI_CLOSE事件沒有單獨的特性。WINDOW_RESIZED事件有四個整數特性，它們是"width"，"height"，"last_width"，"last_height"。它們分別表示當前窗口的寬度和高度，以及事件觸發前窗口的寬度和高度。POINT_DOWN，POINT_UP和POINT_CLICKED事件均有三個特性。其中，"button"特性是一個整數，表示滑鼠的哪一個鍵觸發了這個事件。注意在安卓平臺上，"button"特性總是0。"x"和"y"表示事件觸發時的座標位子，它們均為浮點數。POINT_DRAGGED和POINT_SLICED事件均有5個特性。其中，"button"特性是一個整數，表示滑鼠的哪一個鍵觸發了這個事件。注意在安卓平臺上，"button"特性總是0。"last_x"和"last_y"表示事件觸發前的座標位子，它們均為浮點數。"x"和"y"表示事件觸發後的座標位子，它們均為浮點數。POINTER_PINCHED事件有八個特性，它們是"last_x"、"last_y"、"last_x2"、"last_y2"、"x"、"y"、"x2"以及"y2"。這些特性定義了參與POINTER_PINCHED事件的兩根手指頭在事件觸發前和事件觸發後的座標位置。這些特性均為浮點數。
 @end
Endh
::mfp::graph_lib::event::get_event_type 1 FALSE
Help
 @language:
 get_event_type(event) returns an integer which is type of the event. At this stage it supports the following events: GDI_INITIALIZE (type is 1, when a screen display is created), GDI_CLOSE (type is 10, when a screen display is shutdown), WINDOW_RESIZED (JAVA platform only, type is 21, when a screen display window is resized), POINTER_DOWN (type is 102, when a mouse button is pushed down in PC or user's finger is tapping down in Android), POINTER_UP (type is 103, when a mouse button bounces up in PC or user's finger is moving away from touchpad in Android), POINTER_CLICKED (type is 104, when a mouse button is clicked in PC or user's finger taps touchpad in Android), POINTER_DRAGGED (type is 105, when a mouse or user's finger is dragging. Different from POINTER_SLIDED event, this event is continously triggered during the dragging process), POINTER_SLIDED (type is 106, when a mouse is dragged to the destination and its button is released in PC, or when user's finger drags to the destination and starts to leave touchpad in Android. Different from POINTER_DRAGGED, this event is triggered once-off), POINTER_PINCHED (Android only, type is 201, when user pinches to zoom in Android).
 @end
 @language:simplified_chinese
 get_event_type(event)返回一个整数，表示事件event的类型。在现阶段支持以下事件：GDI_INITIALIZE（类型为1，产生于screen display被创建的时候），GDI_CLOSE（类型为10，产生于screen display被关闭的时候），WINDOW_RESIZED（仅仅用于JAVA平台，类型为21，产生于screen display的窗口大小被调整的时候），POINTER_DOWN（类型为102，产生于鼠标按钮被按下或者用户手指点到触摸屏的时候），POINTER_UP（类型为103，产生于鼠标按钮弹起或者用户手指离开触摸屏的时候），POINTER_CLICKED（类型为104，产生于鼠标按钮快速按下再立即弹起或者用户手指轻敲触摸屏的时候），POINTER_DRAGGED（类型为105，产生于鼠标或者用户手指按下并拖动的时候。注意只要拖动还在进行中，这个事件就会连续地触发），POINTER_SLIDED（类型为106，产生于鼠标或者用户手指按下并拖动到终点，鼠标按钮弹起或者用户手指离开触摸屏的时候，注意这个事件只是在拖动事件结束的时候触发一次），POINTER_PINCHED（仅用于安卓平台，类型为201，当用户捏合手指进行类似缩放操作的时候触发）。
 @end
 @language:traditional_chinese
 get_event_type(event)返回一個整數，表示事件event的類型。在現階段支持以下事件：GDI_INITIALIZE（類型為1，產生於screen display被創建的時候），GDI_CLOSE（類型為10，產生於screen display被關閉的時候），WINDOW_RESIZED（僅僅用於JAVA平臺，類型為21，產生於screen display的窗口大小被調整的時候），POINTER_DOWN（類型為102，產生於滑鼠按鈕被按下或者用戶手指點到觸摸屏的時候），POINTER_UP（類型為103，產生於滑鼠按鈕彈起或者用戶手指離開觸摸屏的時候），POINTER_CLICKED（類型為104，產生於滑鼠按鈕快速按下再立即彈起或者用戶手指輕敲觸摸屏的時候），POINTER_DRAGGED（類型為105，產生於滑鼠或者用戶手指按下並拖動的時候。注意只要拖動還在進行中，這個事件就會連續地觸發），POINTER_SLIDED（類型為106，產生於滑鼠或者用戶手指按下並拖動到終點，滑鼠按鈕彈起或者用戶手指離開觸摸屏的時候，注意這個事件只是在拖動事件結束的時候觸發一次），POINTER_PINCHED（僅用於安卓平臺，類型為201，當用戶捏合手指進行類似縮放操作的時候觸發）。
 @end
Endh
::mfp::graph_lib::event::get_event_type_name 1 FALSE
Help
 @language:
 get_event_type_name(event) returns a string which is type name of the event. At this stage it supports the following events: "GDI_INITIALIZE" (when a screen display is created), "GDI_CLOSE" (when a screen display is shutdown), "WINDOW_RESIZED" (JAVA platform only, when a screen display window is resized), "POINTER_DOWN" (when a mouse button is pushed down in PC or user's finger is tapping down in Android), "POINTER_UP" (when a mouse button bounces up in PC or user's finger is moving away from touchpad in Android), "POINTER_CLICKED" (when a mouse button is clicked in PC or user's finger taps touchpad in Android), "POINTER_DRAGGED" (when a mouse or user's finger is dragging. Different from "POINTER_SLIDED" event, this event is continously triggered during the dragging process), "POINTER_SLIDED" (when a mouse is dragged to the destination and its button is released in PC, or when user's finger drags to the destination and starts to leave touchpad in Android. Different from "POINTER_DRAGGED", this event is triggered once-off), "POINTER_PINCHED" (when user pinches to zoom in Android).
 @end
 @language:simplified_chinese
 get_event_type_name(event)返回一个字符串，表示事件event的类型的名字。在现阶段支持以下事件："GDI_INITIALIZE"（产生于screen display被创建的时候），"GDI_CLOSE"（产生于screen display被关闭的时候），"WINDOW_RESIZED"（仅仅用于JAVA平台，产生于screen display的窗口大小被调整的时候），"POINTER_DOWN"（产生于鼠标按钮被按下或者用户手指点到触摸屏的时候），"POINTER_UP"（产生于鼠标按钮弹起或者用户手指离开触摸屏的时候），"POINTER_CLICKED"（产生于鼠标按钮快速按下再立即弹起或者用户手指轻敲触摸屏的时候），"POINTER_DRAGGED"（产生于鼠标或者用户手指按下并拖动的时候。注意只要拖动还在进行中，这个事件就会连续地触发），"POINTER_SLIDED"（产生于鼠标或者用户手指按下并拖动到终点，鼠标按钮弹起或者用户手指离开触摸屏的时候，注意这个事件只是在拖动事件结束的时候触发一次），"POINTER_PINCHED"（仅用于安卓平台，当用户捏合手指进行类似缩放操作的时候触发）。
 @end
 @language:traditional_chinese
 get_event_type_name(event)返回一個字串，表示事件event的類型的名字。在現階段支持以下事件："GDI_INITIALIZE"（產生於screen display被創建的時候），"GDI_CLOSE"（產生於screen display被關閉的時候），"WINDOW_RESIZED"（僅僅用於JAVA平臺，產生於screen display的窗口大小被調整的時候），"POINTER_DOWN"（產生於滑鼠按鈕被按下或者用戶手指點到觸摸屏的時候），"POINTER_UP"（產生於滑鼠按鈕彈起或者用戶手指離開觸摸屏的時候），"POINTER_CLICKED"（產生於滑鼠按鈕快速按下再立即彈起或者用戶手指輕敲觸摸屏的時候），"POINTER_DRAGGED"（產生於滑鼠或者用戶手指按下並拖動的時候。注意只要拖動還在進行中，這個事件就會連續地觸發），"POINTER_SLIDED"（產生於滑鼠或者用戶手指按下並拖動到終點，滑鼠按鈕彈起或者用戶手指離開觸摸屏的時候，注意這個事件只是在拖動事件結束的時候觸發一次），"POINTER_PINCHED"（僅用於安卓平臺，當用戶捏合手指進行類似縮放操作的時候觸發）。
 @end
Endh
::mfp::io::file::get_file_last_modified_time 1 FALSE
Help
 @language:
 get_file_last_modified_time(path) returns the last modified time of the file or folder corresponding to a string based path. The time is measured by the number of milliseconds since midnight on January 1st, 1970. If path does not exist or the file is not accessable, returns -1.
 @end
 @language:simplified_chinese
 get_file_last_modified_time(path)返回基于字符串路径的path的文件或目录的上一次更改时间。该时间等于从1970年1月1日午夜开始到上一次更改时刻所经历的毫秒数。如果path不存在或者没有访问权限，返回-1。
 @end
 @language:traditional_chinese
 get_file_last_modified_time(path)返回基於字串路徑的path的檔案或目錄的上一次更改時間。該時間等於從1970年1月1日午夜開始到上一次更改時刻所經歷的毫秒數。如果path不存在或者沒有訪問權限，返回-1。
 @end
Endh
::mfp::io::file::get_file_path 1 FALSE
Help
 @language:
 get_file_path(fd) returns a string value which is the path of file whose id number is fd.
 @end
 @language:simplified_chinese
 get_file_path(fd)返回文件号fd（fd是一个整数）所对应的文件的路径字符串。
 @end
 @language:traditional_chinese
 get_file_path(fd)返回文件號fd（fd是一個整數）所對應的文件的路徑字串。
 @end
Endh
::mfp::io::file::get_file_separator 0 FALSE
Help
 @language:
 get_file_separator() returns the seperator used in path. In Windows it returns string "\\". In Linux or Android it returns string "/".
 @end
 @language:simplified_chinese
 get_file_separator()返回路径分割符。在Windows平台下返回字符串"\\"，在Linux和Android平台下返回字符串"/"。
 @end
 @language:traditional_chinese
 get_file_separator()返回路徑分割符。在Windows平臺下返回字串"\\"，在Linux和Android平臺下返回字串"/"。
 @end
Endh
::mfp::io::file::get_file_size 1 FALSE
Help
 @language:
 get_file_size(path) returns the size of the file corresponding to a string based path. If path does not corresponds to a file, or the file does not exist or the file is not accessable, returns -1.
 @end
 @language:simplified_chinese
 get_file_size(path)返回基于字符串路径的path的文件大小。如果path不是对应一个文件或者没有权限或者不存在，返回-1。
 @end
 @language:traditional_chinese
 get_file_size(path)返回基于字串路径的path的档案大小。如果path不是对应一个档案或者没有权限或者不存在，返回-1。
 @end
Endh
::mfp::reflection::get_func_fullname 3 FALSE
Help
 @language:
 get_func_fullname(function_name, number_of_params, citing_spaces_to_check) returns the full name (i.e. full citingspace followed by "::" followed by function's own name) of a function. It has three parameters. The first parameter is string based function name without citingspace or with partial citingspace. The second parameter is number of parameters. This is an optional parameter. Its default value is -1 which means just searching function name without considering number of parameters. The third parameter is citingspaces to check. It is a string array like ["::mfp_compiler", "::mfp::*"]. In this example, this function will first search citingspace ::mfp_compiler and then search citingspace ::mfp and all sub-citingspaces of ::mfp to find function_name. This parameter is also optional. It's default value is the citingspaces currently used in context. If the function_name is not a valid function name or the number of parameters is incorrect or the citingspaces don't include the function, it throws an exception. An example of this function is get_func_fullname("reflection:: get_func_fullname", 2) with returned value being "::mfp::reflection::get_func_fullname". Note that the number of parameters is 2, not 3 because get_func_fullname has two optional parameters so its number of parameters can be 1 or 2 or 3.
 @end
 @language:simplified_chinese
 get_func_fullname(function_name, number_of_params, citing_spaces_to_check)返回一个函数的全名（也就是引用空间加函数名）。它有三个参数。第一个参数是一个基于字符串的函数名，这个函数名可以包含部分或者不包含引用空间。第二个参数是参数的个数。这是一个可选参数，它的缺省值是-1，意思是仅仅搜索比较函数名，不考虑参数个数。第三个参数是将要检视的引用空间列表。这是一个基于数组的一维矩阵，比如["::mfp_compiler", "::mfp::*"]。在这个例子中，本函数将会首先搜索引用空间::mfp_compiler，然后搜索引用空间::mfp以及::mfp的所有子空间。这个参数也是可省略的。它的缺省值就是当前上下文所使用的引用空间。如果get_func_fullname需要寻找的函数在给出的引用空间中没有找到，本函数将会抛出异常。一个函数的例子为get_func_fullname("reflection:: get_func_fullname", 2)。这个例子的返回值为"::mfp::reflection::get_func_fullname"。注意这里参数的个数用的是2而不是3但依然合法，原因是get_func_fullname有两个缺省参数，所以参数个数可以是1或者2或者3。
 @end
 @language:traditional_chinese
 get_func_fullname(function_name, number_of_params, citing_spaces_to_check)返回一個函數的全名（也就是引用空間加函數名）。它有三個參數。第一個參數是一個基於字串的函數名，這個函數名可以包含部分或者不包含引用空間。第二個參數是參數的個數。這是一個可選參數，它的缺省值是-1，意思是僅僅搜索比較函數名，不考慮參數個數。第三個參數是將要檢視的引用空間列表。這是一個基於數組的一維矩陣，比如["::mfp_compiler", "::mfp::*"]。在這個例子中，本函數將會首先搜索引用空間::mfp_compiler，然後搜索引用空間::mfp以及::mfp的所有子空間。這個參數也是可省略的。它的缺省值就是當前上下文所使用的引用空間。如果get_func_fullname需要尋找的函數在給出的引用空間中沒有找到，本函數將會拋出異常。一個函數的例子為get_func_fullname("reflection:: get_func_fullname", 2)。這個例子的返回值為"::mfp::reflection::get_func_fullname"。注意這裏參數的個數用的是2而不是3但依然合法，原因是get_func_fullname有兩個缺省參數，所以參數個數可以是1或者2或者3。
 @end
Endh
::mfp_compiler::annotation::compulsory_link::get_functions 0 TRUE
Help
 @language:
 get_functions(...) is a function for MFP compiler, which means it takes effect only when MFP is packing scripts to build an MFP app. It has arbitary number of string based parameters. Each parameter is a function name. It returns an array of all the MFP function references defined in the parameters.
 @end
 @language:simplified_chinese
 get_functions(...) 是一个用于编译的函数，也就是说它在打包脚本生成MFP应用时发挥作用。本函数返回一个数组，其中包括所有的出现在参数中的MFP函数的引用信息。
 @end
 @language:traditional_chinese
 get_functions(...) 是一個用於編譯的函數，也就是說它在打包腳本生成MFP應用時發揮作用。本函數返回一個數組，其中包括所有的出現在參數中的MFP函數的引用信息。
 @end
Endh
::mfp::time_date::get_hour 1 FALSE
Help
 @language:
 get_year(timestamp), get_month(timestamp), get_day_of_year(timestamp), get_day_of_month(timestamp), get_day_of_week(timestamp), get_hour(timestamp), get_minute(timestamp), get_second(timestamp) and get_millisecond(timestamp) return the year, month, day of year, day of month, day of week, hour minute, second and millisecond of the time stamp parameter respectively. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. And day of week is an integer corresponding to Sunday if 0, Monday if 1, ... Saturday if 6. For example, get_day_of_week(get_time_stamp(2014, 12, 21)) returns 0 (Sunday).
 @end
 @language:simplified_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分别返回时标timestamp所对应的年，月，本年中的第几天，本月中的第几天，本星期中的第几天（礼拜天是第0天，礼拜一是第一天，...），小时，分钟，秒钟和毫秒。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是礼拜天。
 @end
 @language:traditional_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分別返回時標timestamp所對應的年，月，本年中的第幾天，本月中的第幾天，本星期中的第幾天（禮拜天是第0天，禮拜一是第一天，...），小時，分鐘，秒鐘和毫秒。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是禮拜天。
 @end
Endh
::mfp::multimedia::image_lib::get_image_size 1 FALSE
Help
 @language:
 get_image_size(image_handle) returns size (i.e. [width, height]) of a wrapped JAVA image object (i.e. image handle).
 @end
 @language:simplified_chinese
 get_image_size(image_handle)返回由image_handle所代表的被包装过的JAVA图像对象的长和宽组成的数组。
 @end
 @language:traditional_chinese
 get_image_size(image_handle)返回由image_handle所代表的被包裝過的JAVA圖像對象的長和寬組成的數組。
 @end
Endh
::mfp::paracomp::connect::get_incoming_connect 2 FALSE
Help
 @language:
 get_incoming_connect returns a connection object from a remote address to a local network interface, or null if no such a connection exists. It accepts two parameters. The first parameter is local interface info, which can be returned by calling generate_interface function. The second parameter is the remote address where the incoming connection is initialized. Note that for TCPIP protocol, this remote address, i.e. client side address, should include both IP address and IP port. Moreover, if NAT exists between client and server, the remote address should be the client's external address, i.e. client's address seen from server side. An example of this function is get_incoming_connect(local_interface, "192.168.1.100:53521").
 @end
 @language:simplified_chinese
 get_incoming_connect函数返回一个从远端地址连入一个本地网络界面的网络连接对象，或者如果没有这样一个网络连接存在则返回null。这个函数接受两个参数。第一个参数为一个代表本地网络界面信息的对象。 该对象为generate_interface函数的返回值。第二个参数是远端，也就是网络连接发起端（或者说客户端）的地址。注意对于TCPIP协议，客户端的地址必须是包括IP地址和端口的完整地址。此外，如果在远端和本地之间存在NAT层，客户端地址必须是在本地看到的远端地址，也就是客户端在NAT层外侧的地址。本函数的一个例子是get_incoming_connect(local_interface, "192.168.1.100:53521")。
 @end
 @language:traditional_chinese
 get_incoming_connect函數返回一個從遠端地址連入一個本地網絡界面的網絡連接對象，或者如果沒有這樣一個網絡連接存在則返回null。這個函數接受兩個參數。第一個參數為一個代表本地網絡界面信息的對象。 該對象為generate_interface函數的返回值。第二個參數是遠端，也就是網絡連接發起端（或者說客戶端）的地址。註意對於TCPIP協議，客戶端的地址必須是包括IP地址和端口的完整地址。此外，如果在遠端和本地之間存在NAT層，客戶端地址必須是在本地看到的遠端地址，也就是客戶端在NAT層外側的地址。本函數的一個例子是get_incoming_connect(local_interface, "192.168.1.100:53521")。
 @end
Endh
::mfp::exdata::json::get_json_field 3 FALSE
Help
 @language:
 This function gets a field value from a JSON string. It has three parameters. The first parameter is the JSON string. The second parameter is the field name. The third parameter is the field type. "s" means the field is a string, "b" means it is a boolean, "f" means it is float value, "d" means it is an integer, "a" means it is an array, "j" means it is a JSON string and other values or ignored means let MFP detect the type of the field. Note that JSON string and field name are both case sensitive while field type, if it is a string, is case insensative. It returns the field value. An example of this function is get_json_field("{\"ABC\": null, \"JJJ\": {\"DEF\":[1, 8, [\"Welcome\", 9.99]],\"ZZ\":\"hello boy\"}}", "JJJ", "j").
 @end
 @language:simplified_chinese
 此函数从一个代表JSON数据的字符串中获取一个域的值。此函数有三个参数。第一个参数为一个代表JSON数据的字符串，第二个参数为JSON域的名字，第三个参数为JSON域的类型。如果第三个参数值为"s"，则意味着这个JSON域是一个字符串，如果是"b"，则意味着这个JSON域是一个布尔值，如果是"f"，则意味着这个JSON域是一个浮点数值，如果是"d"，则意味着这个JSON域是一个整数值，如果是"a"，则意味着这个JSON域是一个数组，如果是"j"，则意味着这个JSON域是一个代表JSON数据的字符串，如果是其他值或者这个参数被省略，则由MFP自己侦测这个JSON域的数据类型。注意第一个参数和第二个参数都是区分大小写的，但第三个参数不区分大小写。这个函数的返回值是这个JSON域的数据值。本函数的一个例子是get_json_field("{\"ABC\": null, \"JJJ\": {\"DEF\":[1, 8, [\"Welcome\", 9.99]],\"ZZ\":\"hello boy\"}}", "JJJ", "j")。
 @end
 @language:traditional_chinese
 此函數從一個代表JSON數據的字符串中獲取一個域的值。此函數有三個參數。第一個參數為一個代表JSON數據的字符串，第二個參數為JSON域的名字，第三個參數為JSON域的類型。如果第三個參數值為"s"，則意味著這個JSON域是一個字符串，如果是"b"，則意味著這個JSON域是一個布爾值，如果是"f"，則意味著這個JSON域是一個浮點數值，如果是"d"，則意味著這個JSON域是一個整數值，如果是"a"，則意味著這個JSON域是一個數組，如果是"j"，則意味著這個JSON域是一個代表JSON數據的字符串，如果是其他值或者這個參數被省略，則由MFP自己偵測這個JSON域的數據類型。註意第一個參數和第二個參數都是區分大小寫的，但第三個參數不區分大小寫。這個函數的返回值是這個JSON域的數據值。本函數的一個例子是get_json_field("{\"ABC\": null, \"JJJ\": {\"DEF\":[1, 8, [\"Welcome\", 9.99]],\"ZZ\":\"hello boy\"}}", "JJJ", "j")。
 @end
Endh
::mfp::paracomp::host::get_local_host_address 1 FALSE
Help
 @language:
 get_local_host_address(protocol_name) returns local host address of the protocol named by protocol_name. An example of this function is get_local_host_address("TCPIP").
 @end
 @language:simplified_chinese
 get_local_host_address(protocol_name)返回protocol_name协议在本机的localhost地址。本函数的一个例子是get_local_host_address("TCPIP")。
 @end
 @language:traditional_chinese
 get_local_host_address(protocol_name)返回protocol_name協議在本機的localhost地址。本函數的一個例子是get_local_host_address("TCPIP")。
 @end
Endh
::mfp::time_date::get_millisecond 1 FALSE
Help
 @language:
 get_year(timestamp), get_month(timestamp), get_day_of_year(timestamp), get_day_of_month(timestamp), get_day_of_week(timestamp), get_hour(timestamp), get_minute(timestamp), get_second(timestamp) and get_millisecond(timestamp) return the year, month, day of year, day of month, day of week, hour minute, second and millisecond of the time stamp parameter respectively. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. And day of week is an integer corresponding to Sunday if 0, Monday if 1, ... Saturday if 6. For example, get_day_of_week(get_time_stamp(2014, 12, 21)) returns 0 (Sunday).
 @end
 @language:simplified_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分别返回时标timestamp所对应的年，月，本年中的第几天，本月中的第几天，本星期中的第几天（礼拜天是第0天，礼拜一是第一天，...），小时，分钟，秒钟和毫秒。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是礼拜天。
 @end
 @language:traditional_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分別返回時標timestamp所對應的年，月，本年中的第幾天，本月中的第幾天，本星期中的第幾天（禮拜天是第0天，禮拜一是第一天，...），小時，分鐘，秒鐘和毫秒。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是禮拜天。
 @end
Endh
::mfp::time_date::get_minute 1 FALSE
Help
 @language:
 get_year(timestamp), get_month(timestamp), get_day_of_year(timestamp), get_day_of_month(timestamp), get_day_of_week(timestamp), get_hour(timestamp), get_minute(timestamp), get_second(timestamp) and get_millisecond(timestamp) return the year, month, day of year, day of month, day of week, hour minute, second and millisecond of the time stamp parameter respectively. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. And day of week is an integer corresponding to Sunday if 0, Monday if 1, ... Saturday if 6. For example, get_day_of_week(get_time_stamp(2014, 12, 21)) returns 0 (Sunday).
 @end
 @language:simplified_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分别返回时标timestamp所对应的年，月，本年中的第几天，本月中的第几天，本星期中的第几天（礼拜天是第0天，礼拜一是第一天，...），小时，分钟，秒钟和毫秒。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是礼拜天。
 @end
 @language:traditional_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分別返回時標timestamp所對應的年，月，本年中的第幾天，本月中的第幾天，本星期中的第幾天（禮拜天是第0天，禮拜一是第一天，...），小時，分鐘，秒鐘和毫秒。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是禮拜天。
 @end
Endh
::mfp::time_date::get_month 1 FALSE
Help
 @language:
 get_year(timestamp), get_month(timestamp), get_day_of_year(timestamp), get_day_of_month(timestamp), get_day_of_week(timestamp), get_hour(timestamp), get_minute(timestamp), get_second(timestamp) and get_millisecond(timestamp) return the year, month, day of year, day of month, day of week, hour minute, second and millisecond of the time stamp parameter respectively. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. And day of week is an integer corresponding to Sunday if 0, Monday if 1, ... Saturday if 6. For example, get_day_of_week(get_time_stamp(2014, 12, 21)) returns 0 (Sunday).
 @end
 @language:simplified_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分别返回时标timestamp所对应的年，月，本年中的第几天，本月中的第几天，本星期中的第几天（礼拜天是第0天，礼拜一是第一天，...），小时，分钟，秒钟和毫秒。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是礼拜天。
 @end
 @language:traditional_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分別返回時標timestamp所對應的年，月，本年中的第幾天，本月中的第幾天，本星期中的第幾天（禮拜天是第0天，禮拜一是第一天，...），小時，分鐘，秒鐘和毫秒。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是禮拜天。
 @end
Endh
::mfp::math::polynomial::get_num_of_results_sets 1 FALSE
Help
 @language:
 get_num_of_results_sets(x), where variable x is return of an in-line solve block, returns the number of results sets stored in variable x.
 @end
 @language:simplified_chinese
 get_num_of_results_sets(x)返回solve程序块返回值x中所包含的解集的组数。
 @end
 @language:traditional_chinese
 get_num_of_results_sets(x)返回solve返回值x中所包含的解集的組數。
 @end
Endh
::mfp::graph_lib::draw::get_porterduff_mode 1 FALSE
Help
 @language:
 get_porterduff_mode(painting_extra) returns porterduff mode of a painting extra information structure. Painting extra information structure is used in a painting event. Porterduff mode tells MFP the way to draw destination area. It is a capitalized string and supports the following modes: "CLEAR", "SRC", "DST", "SRC_OVER", "DST_OVER", "SRC_IN", "DST_IN", "SRC_OUT", "DST_OUT", "SRC_ATOP", "DST_ATOP", "XOR" or "" (empty string means default value). Developer may refer to JAVA documentation to find out detailed meaning of the above modes.
 @end
 @language:simplified_chinese
 get_porterduff_mode(painting_extra)返回一个painting extra数据结构的porterduff模式。painting extra数据结构在painting事件中被调用。Porterduff模式告诉MFP如何绘制目标区域。它是一个大写的字符串，具有以下可能值："CLEAR"，"SRC"，"DST"，"SRC_OVER"，"DST_OVER"，"SRC_IN"，"DST_IN"，"SRC_OUT"，"DST_OUT"，"SRC_ATOP"，"DST_ATOP"，"XOR"或者""，其中，空字符串""是缺省值。开发者可以参考JAVA文档以获取porterduff模式的详细信息。
 @end
 @language:traditional_chinese
 get_porterduff_mode(painting_extra)返回一個painting extra數據結構的porterduff模式。painting extra數據結構在painting事件中被調用。Porterduff模式告訴MFP如何繪製目標區域。它是一個大寫的字串，具有以下可能值："CLEAR"，"SRC"，"DST"，"SRC_OVER"，"DST_OVER"，"SRC_IN"，"DST_IN"，"SRC_OUT"，"DST_OUT"，"SRC_ATOP"，"DST_ATOP"，"XOR"或者""，其中，空字元串""是缺省值。開發者可以參考JAVA文檔以獲取porterduff模式的詳細資訊。
 @end
Endh
::mfp::multimedia::webrtc_lib::get_rtc_video_output_count 1 FALSE
Help
 @language:
 This function returns the number of RTC video output windows in a display. It has only one parameter which is a display handle returned from open_screen_display function.
 @end
 @language:simplified_chinese
 本函数返回一个显示窗口上的RTC视频子窗口的个数。本函数仅有一个参数就是显示窗口的句柄。该句柄是open_screen_display函数的返回值。
 @end
 @language:traditional_chinese
 本函數返回一個顯示窗口上的RTC視頻子窗口的個數。本函數僅有一個參數就是顯示窗口的句柄。該句柄是open_screen_display函數的返回值。
 @end
Endh
::mfp::multimedia::webrtc_lib::get_rtc_video_output_lefttop 2 FALSE
Help
 @language:
 This function returns a two element array whose first element is the x coordinate and second element is the y coordinate of a RTC video output window's left-top corner. It has two parameters. The first one is a display handle returned from open_screen_display function. The second one is the index of the RTC video output window in this display's RTC video output window list. The first RTC video output window's index is 0, second is 1, etc.
 @end
 @language:simplified_chinese
 本函数返回一个包含两个元素的数组。第一个元素是一个RTC视频输出子窗口的左上角的x坐标。第二个元素是该RTC视频输出子窗口的左上角的y坐标。这个函数有两个参数。第一个参数是一个显示窗口的句柄。该句柄是open_screen_display函数的返回值。第二个参数是该RTC视频输出子窗口在显示窗口的RTC视频输出子窗口序列中的索引。第一个RTC视频输出子窗口的索引是0，第二个RTC视频输出子窗口的索引是1，以此类推。
 @end
 @language:traditional_chinese
 本函數返回一個包含兩個元素的數組。第一個元素是一個RTC視頻輸出子窗口的左上角的x坐標。第二個元素是該RTC視頻輸出子窗口的左上角的y坐標。這個函數有兩個參數。第一個參數是一個顯示窗口的句柄。該句柄是open_screen_display函數的返回值。第二個參數是該RTC視頻輸出子窗口在顯示窗口的RTC視頻輸出子窗口序列中的索引。第一個RTC視頻輸出子窗口的索引是0，第二個RTC視頻輸出子窗口的索引是1，以此類推。
 @end
Endh
::mfp::platform_hardware::platform_info::get_sandbox_session_lib_path 0 FALSE
Help
 @language:
 Function get_sandbox_session_lib_path returns a string based path which is the folder where current sandbox session's MFP user defined libs are located. A sandbox session is a session which runs in server side after a call request from a client is received. A sandbox session has its independant MFP user libs, resources and stack from other sessions in this server. Its user libs, resources and stack are copied from the client who sent the call request whether the client is local or remote. This function has no parameter. If this function is called not by a sandbox session but a normal session, e.g. in a command line box, it returns NULL .
 @end
 @language:simplified_chinese
 函数get_sandbox_session_lib_path返回一个基于字符串的路径，该路径是当前沙盒的用户代码库的所在目录。沙盒是在服务端运行的一个线程。这个线程在服务端收到一个客户端的call指令后启动。这个客户端是一个独立于服务端的进程，它可能位于本机，也可能位于另外一台电脑。该线程拥有独立于服务端其它线程的MFP用户代码库，资源和栈。它的用户代码库,资源和栈是拷贝自发送call指令的客户端。这个函数没有参数。如果当前运行的代码不是位于沙盒中（比如，当前代码是在常规的命令提示符下运行），这个函数返回NULL 。
 @end
 @language:traditional_chinese
 函數get_sandbox_session_lib_path返回一個基於字符串的路徑，該路徑是當前沙盒的用戶代碼庫的所在目錄。沙盒是在服務端運行的一個線程。這個線程在服務端收到一個客戶端的call指令後啟動。這個客戶端是一個獨立於服務端的進程，它可能位於本機，也可能位於另外一臺電腦。該線程擁有獨立於服務端其它線程的MFP用戶代碼庫，資源和棧。它的用戶代碼庫,資源和棧是拷貝自發送call指令的客戶端。這個函數沒有參數。如果當前運行的代碼不是位於沙盒中（比如，當前代碼是在常規的命令提示符下運行），這個函數返回NULL 。
 @end
Endh
::mfp::platform_hardware::platform_info::get_sandbox_session_resource_path 0 FALSE
Help
 @language:
 Function get_sandbox_session_resource_path returns a string based path which is the folder where current sandbox session's MFP resources, e.g. image files, database files and sound files, are located. A sandbox session is a session which runs in server side after a call request from a client is received. A sandbox session has its independant MFP user libs, resources and stack from other sessions in this server. Its user libs, resources and stack are copied from the client who sent the call request whether the client is local or remote. This function has no parameter. If this function is called not by a sandbox session but a normal session, e.g. in a command line box, it returns NULL .
 @end
 @language:simplified_chinese
 函数get_sandbox_session_resource_path返回一个基于字符串的路径，该路径是当前沙盒的资源文件（比如图像文件，声音文件和数据库文件）的所在目录。沙盒是在服务端运行的一个线程。这个线程在服务端收到一个客户端的call指令后启动。这个客户端是一个独立于服务端的进程，它可能位于本机，也可能位于另外一台电脑。该线程拥有独立于服务端其它线程的MFP用户代码库，资源和栈。它的用户代码库,资源和栈是拷贝自发送call指令的客户端。这个函数没有参数。如果当前运行的代码不是位于沙盒中（比如，当前代码是在常规的命令提示符下运行），这个函数返回NULL 。
 @end
 @language:traditional_chinese
 函數get_sandbox_session_resource_path返回一個基於字符串的路徑，該路徑是當前沙盒的資源文件（比如圖像文件，聲音文件和數據庫文件）的所在目錄。沙盒是在服務端運行的一個線程。這個線程在服務端收到一個客戶端的call指令後啟動。這個客戶端是一個獨立於服務端的進程，它可能位於本機，也可能位於另外一臺電腦。該線程擁有獨立於服務端其它線程的MFP用戶代碼庫，資源和棧。它的用戶代碼庫,資源和棧是拷貝自發送call指令的客戶端。這個函數沒有參數。如果當前運行的代碼不是位於沙盒中（比如，當前代碼是在常規的命令提示符下運行），這個函數返回NULL 。
 @end
Endh
::mfp::time_date::get_second 1 FALSE
Help
 @language:
 get_year(timestamp), get_month(timestamp), get_day_of_year(timestamp), get_day_of_month(timestamp), get_day_of_week(timestamp), get_hour(timestamp), get_minute(timestamp), get_second(timestamp) and get_millisecond(timestamp) return the year, month, day of year, day of month, day of week, hour minute, second and millisecond of the time stamp parameter respectively. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. And day of week is an integer corresponding to Sunday if 0, Monday if 1, ... Saturday if 6. For example, get_day_of_week(get_time_stamp(2014, 12, 21)) returns 0 (Sunday).
 @end
 @language:simplified_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分别返回时标timestamp所对应的年，月，本年中的第几天，本月中的第几天，本星期中的第几天（礼拜天是第0天，礼拜一是第一天，...），小时，分钟，秒钟和毫秒。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是礼拜天。
 @end
 @language:traditional_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分別返回時標timestamp所對應的年，月，本年中的第幾天，本月中的第幾天，本星期中的第幾天（禮拜天是第0天，禮拜一是第一天，...），小時，分鐘，秒鐘和毫秒。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是禮拜天。
 @end
Endh
::mfp::math::polynomial::get_solved_results_set 2 FALSE
Help
 @language:
 get_solved_results_set(x, y), where variable x is return of an in-line solve block, returns No. y + 1 results set stored in variable x. Note that this function returns an 1-dim array. The first element in the array is the result of the first to-be-solved variable in the solve block; the second element in the array is the result of the second to-be-solved variable in the solve block; etc ...
 @end
 @language:simplified_chinese
 get_solved_results_set(x, y)返回solve程序块返回值x中所包含的第y+1组解集。注意本函数返回一个一维数组，数组中的第一个元素是solve程序块的第一个待解变量的值，第二个元素是solve程序块的第二个待解变量的值，依次类推。
 @end
 @language:traditional_chinese
 get_solved_results_set(x, y)返回solve程式塊返回值x中所包含的第y+1組解集。註意本函數程式返回一個一維陣列，陣列中的第一個元素是solve程式塊的第一個待解變數的值，第二個元素是solve程式塊的第二個待解變數的值，依次類推。
 @end
Endh
::mfp::multimedia::audio_lib::get_sound_path 1 FALSE
Help
 @language:
 get_sound_path(sound_handle) returns sound file path of the sound handle.
 @end
 @language:simplified_chinese
 get_sound_path(sound_handle)返回sound_handle所指向的声音文件的路径。
 @end
 @language:traditional_chinese
 get_sound_path(sound_handle)返回sound_handle所指向的音效檔的路徑。
 @end
Endh
::mfp::multimedia::audio_lib::get_sound_reference_path 1 FALSE
Help
 @language:
 get_sound_reference_path(sound_handle) returns sound reference file path of the sound handle. If the sound is not extracted from a zip file, sound reference file is the same as sound file. If the sound is extracted from a zip file, sound reference file path is the zip file path followed by the sound's zip entry path, like "/folder1/folder2/snd.zip/zipped_folder/snd.wav", where "/folder1/folder2/snd.zip" is path of the zip file and "zipped_folder/snd.wav" is zip entry path.
 @end
 @language:simplified_chinese
 get_sound_reference_path(sound_handle)返回sound_handle所指向的声音引用文件的路径。如果声音文件不是从zip压缩的读入的，声音引用文件和sound_handle所指向的声音文件（也就是get_sound_file函数的返回值）是同一个文件。如果声音文件是从zip压缩的读入的，声音引用文件路径是压缩文件的路径加上声音文件的压缩路径，比如"/folder1/folder2/snd.zip/zipped_folder/snd.wav"，这里"/folder1/folder2/snd.zip"是压缩文件路径，"zipped_folder/snd.wav"是声音文件的压缩路径。
 @end
 @language:traditional_chinese
 get_sound_reference_path(sound_handle)返回sound_handle所指向的聲音引用檔的路徑。如果音效檔不是從zip壓縮的讀入的，聲音引用檔和sound_handle所指向的音效檔（也就是get_sound_file函數的返回值）是同一個檔。如果音效檔是從zip壓縮的讀入的，聲音引用檔路徑是壓縮檔的路徑加上音效檔的壓縮路徑，比如"/folder1/folder2/snd.zip/zipped_folder/snd.wav"，這裡"/folder1/folder2/snd.zip"是壓縮檔路徑，"zipped_folder/snd.wav"是音效檔的壓縮路徑。
 @end
Endh
::mfp::multimedia::audio_lib::get_sound_repeat 1 FALSE
Help
 @language:
 get_sound_repeat(sound_handle) returns a boolean indicating the sound is repeatedly played or not.
 @end
 @language:simplified_chinese
 get_sound_repeat(sound_handle)返回一个布尔量，表示参数sound_handle所代表的声音是否会被重复演奏。
 @end
 @language:traditional_chinese
 get_sound_repeat(sound_handle)返回一個布爾量，表示參數sound_handle所代表的聲音是否會被重複演奏。
 @end
Endh
::mfp::multimedia::audio_lib::get_sound_source_type 1 FALSE
Help
 @language:
 get_sound_source_type(sound_handle) returns an integer which is sound reference source file type. 0 means normal source file, 1 means zipped source file and 2 means zipped source file in Android asset (for MFP app).
 @end
 @language:simplified_chinese
 get_sound_source_type(sound_handle)返回一个整数，代表sound_handle所指向的声音引用文件的类型。0表示常规文件，1表示压缩的zip文件，2表示引用于MFP App中安卓asset中的zip文件。
 @end
 @language:traditional_chinese
 get_sound_source_type(sound_handle)返回一個整數，代表sound_handle所指向的聲音引用檔的類型。0表示常規檔，1表示壓縮的zip檔，2表示引用於MFP App中安卓asset中的zip檔。
 @end
Endh
::mfp::multimedia::audio_lib::get_sound_volume 1 FALSE
Help
 @language:
 get_sound_volume(sound_handle) returns volume of the sound referred by sound_handle. Volume is a double value ranging from 0 to 1.
 @end
 @language:simplified_chinese
 get_sound_volume(sound_handle)返回参数sound_handle所代表的声音的音量（一个变化范围从0到1的浮点数）。
 @end
 @language:traditional_chinese
 get_sound_volume(sound_handle)返回參數sound_handle所代表的聲音的音量（一個變化範圍從0到1的浮點數）。
 @end
Endh
::mfp::io::file::get_src_file_path 0 FALSE
Help
 @language:
 This function returns the full path of current script, i.e. the script which calls get_src_file_path. If the function is called within command line, it returns null.
 @end
 @language:simplified_chinese
 这个函数返回当前脚本的完整路径。当前脚本是调用get_src_file_path的脚本。如果本函数在命令提示符中被调用，则返回null。
 @end
 @language:traditional_chinese
 這個函數返回當前腳本的完整路徑。當前腳本是調用get_src_file_path的腳本。如果本函數在命令提示符中被調用，則返回null。
 @end
Endh
::mfp::time_date::get_time_stamp 1 TRUE
Help
 @language:
 get_time_stamp(string_or_year, ...) returns the timestamp determined by the parameters. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. This function supports two modes. First mode is get_time_stamp(string_time_stamp) where there is only one string based parameter which must be formatted as yyyy-mm-dd hh:mm:ss[.f...]. The fractional second may be omitted. The second mode is get_time_stamp(year, month, day, hour, minute, second, millisecond). All the parameters except year are optional. If omitted, the default value for the parameters hour, minute, second and millisecond is 0, and the default value for the parameters month and day is 1. For example, get_time_stamp("1981-05-30 17:05:06") will return timestamp at 17:05:06.000 on May 30, 1981. And it works exactly same as get_time_stamp(1981, 5, 30, 17, 5, 6, 0).
 @end
 @language:simplified_chinese
 get_time_stamp(string_or_year, ...)返回由其参数所决定的时标。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。这个函数有两种工作模式。第一种模式是get_time_stamp(string_time_stamp)。这种模式仅仅接受一个字符串参数，该参数必须基于yyyy-mm-dd hh:mm:ss[.f...]的格式。其中，秒的分数部分可以忽略。第二种模式是get_time_stamp(year, month, day, hour, minute, second, millisecond)。这些参数中，除了第一个参数year（年），所有的其他参数都可以省略。如果省略，month（月）和day（日）的缺省值是1，hour（小时），minute（分钟），second（秒）和millisecond（毫秒）的缺省值是0。比如get_time_stamp("1981-05-30 17:05:06")返回1981年5月30日17点5分6秒0毫秒的时标，用户也可以调用get_time_stamp(1981, 5, 30, 17, 5, 6, 0)获得同样的结果。
 @end
 @language:traditional_chinese
 get_time_stamp(string_or_year, ...)返回由其參數所決定的時標。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。這個函數程式有兩種工作模式。第一種模式是get_time_stamp(string_time_stamp)。這種模式僅僅接受一個字串參數，該參數必須基於yyyy-mm-dd hh:mm:ss[.f...]的格式。其中，秒的分數部分可以忽略。第二種模式是get_time_stamp(year, month, day, hour, minute, second, millisecond)。這些參數中，除了第一個參數year（年），所有的其他參數都可以省略。如果省略，month（月）和day（日）的缺省值是1，hour（小時），minute（分鐘），second（秒）和millisecond（毫秒）的缺省值是0。比如get_time_stamp("1981-05-30 17:05:06")返回1981年5月30日17點5分6秒0毫秒的時標，用戶也可以調用get_time_stamp(1981, 5, 30, 17, 5, 6, 0)獲得同樣的結果。
 @end
Endh
::mfp::reflection::get_type_fullname 1 FALSE
Help
 @language:
 get_type_fullname returns the full name, i.e. name with citingspace path, of the type of the parameter. For example, if developer has defined a class A in citingspace ::abc::def, and has already created an object named objA from class A, then get_type_fullname(objA) will return a string which is ::abc::def::a . Note that A is changed to a since MFP is case insensitive and internally all the variable names and types are turned to small case. Also note that this function can return the full name of MFP builtin types. However, user is recommended to only use it to identify if two variables have the same type during program run. User cannot assume that the full name of an MFP builtin type will never change in the future versions.
 @end
 @language:simplified_chinese
 get_type_fullname返回参数类型的全名，即带有引用空间路径的名称。例如，如果开发人员在引用空间::abc::def中定义了一个类A，并且已经从类A创建了一个名为objA的对象，则get_type_fullname(objA)将返回一个字符串，该字符串为::abc::def::a。请注意，由于MFP不区分大小写，并且内部所有变量名称和类型都转换为小写字母，所以A更改为a。另请注意，此函数可以返回MFP内置类型的全名。但是，建议用户仅在程序运行期间使用它来识别两个变量是否具有相同的类型。用户不能假定MFP内置类型的全名在以后的版本中永远不会更改。
 @end
 @language:traditional_chinese
 get_type_fullname返回參數類型的全名，即帶有引用空間路徑的名稱。例如，如果開發人員在引用空間::abc::def中定義了一個類A，並且已經從類A創建了一個名為objA的對象，則get_type_fullname(objA)將返回一個字符串，該字符串為::abc::def::a。請注意，由於MFP不區分大小寫，並且內部所有變量名稱和類型都轉換為小寫字母，所以A更改為a。另請注意，此函數可以返回MFP內置類型的全名。但是，建議用戶僅在程序運行期間使用它來識別兩個變量是否具有相同的類型。用戶不能假定MFP內置類型的全名在以後的版本中永遠不會更改。
 @end
Endh
::mfp::io::file::get_upper_level_path 1 FALSE
Help
 @language:
 This function returns a string based path which is upper folder of its string based parameter. For example, both get_upper_level_path("abc/def") and get_upper_level_path("abc/def/") return "abc/" in Android. However, if upper folder is invalid, it returns null. For example, both get_upper_level_path("") and get_upper_level_path("/") return null in Android. get_upper_level_path("/") returns null because "/"'s upper folder doesn't exist.
 @end
 @language:simplified_chinese
 本函数返回参数字符串的上层目录（也是一个字符串）。比如，get_upper_level_path("abc/def")和get_upper_level_path("abc/def/")在安卓上都返回"abc/"。但是，要注意如果上层目录是非法目录，它返回null。比如get_upper_level_path("")和get_upper_level_path("/")均返回null。原因是""和"/"的上层目录均不存在。
 @end
 @language:traditional_chinese
 本函數返回參數字串的上層目錄（也是一個字串）。比如，get_upper_level_path("abc/def")和get_upper_level_path("abc/def/")在安卓上都返回"abc/"。但是，要注意如果上層目錄是非法目錄，它返回null。比如get_upper_level_path("")和get_upper_level_path("/")均返回null。原因是""和"/"的上層目錄均不存在。
 @end
Endh
::mfp::data_struct::array_based::get_value_from_abdict 2 FALSE
Help
 @language:
 get_value_from_abdict(array_based_dictionary, key) returns a reference to string based key's value from array_based_dictionary. If the key doesn't exist, it throws an exception.
 @end
 @language:simplified_chinese
 get_value_from_abdict(array_based_dictionary, key)返回基于数组的字典array_based_dictionary的key所对应的值的引用。如果key不存在，一个异常将会被抛出。注意key只能是字符串。
 @end
 @language:traditional_chinese
 get_value_from_abdict(array_based_dictionary, key)返回基於數組的字典array_based_dictionary的key所對應的值的引用。如果key不存在，一個異常將會被拋出。注意key只能是字串。
 @end
Endh
::mfp::math::polynomial::get_variable_results 2 FALSE
Help
 @language:
 get_variable_results(x, y), where variable x is return of an in-line solve block, returns all results of No. y + 1 to-be-solved variable in the solve block which returns x. Note that this function returns an 1-dim array. Each element in the array is one root of the to-be-solved variable.
 @end
 @language:simplified_chinese
 get_variable_results(x, y)返回solve程序块返回值x中该solve程序块第y+1个待解变量的所有值。注意本函数返回一个一维数组，数组中的每一个元素是该待解变量的一个根。
 @end
 @language:traditional_chinese
 get_variable_results(x, y)返回solve程式塊返回值x中該solve程式塊第y+1個待解變數的所有值。註意本函數程式返回一個一維陣列，陣列中的每一個元素是該待解變數的一個根。
 @end
Endh
::mfp::multimedia::webrtc_lib::get_video_track_enable 1 FALSE
Help
 @language:
 This function tests if video track has been enabled. True is returned if video track is enabled. Otherwise false. It has only one parameter which is a display handle returned from open_screen_display function.
 @end
 @language:simplified_chinese
 本函数测试视频功能是否已经被激活。如果是，返回True，否则返回False。这个函数仅有一个参数，就是一个显示窗口的句柄。该句柄是open_screen_display函数的返回值。
 @end
 @language:traditional_chinese
 本函數測試視頻功能是否已經被激活。如果是，返回True，否則返回False。這個函數僅有一個參數，就是一個顯示窗口的句柄。該句柄是open_screen_display函數的返回值。
 @end
Endh
::mfp::io::file::get_working_dir 0 FALSE
Help
 @language:
 get_working_dir() (with alias pwd()) return string based current directory.
 @end
 @language:simplified_chinese
 get_working_dir()（别名pwd()）返回基于字符串的当前路径。
 @end
 @language:traditional_chinese
 get_working_dir()（別名pwd()）返回基於字串的當前路徑。
 @end
Endh
::mfp::time_date::get_year 1 FALSE
Help
 @language:
 get_year(timestamp), get_month(timestamp), get_day_of_year(timestamp), get_day_of_month(timestamp), get_day_of_week(timestamp), get_hour(timestamp), get_minute(timestamp), get_second(timestamp) and get_millisecond(timestamp) return the year, month, day of year, day of month, day of week, hour minute, second and millisecond of the time stamp parameter respectively. Timestamp is the difference, measured in milliseconds, between the time and midnight, January 1, 1970 UTC. And day of week is an integer corresponding to Sunday if 0, Monday if 1, ... Saturday if 6. For example, get_day_of_week(get_time_stamp(2014, 12, 21)) returns 0 (Sunday).
 @end
 @language:simplified_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分别返回时标timestamp所对应的年，月，本年中的第几天，本月中的第几天，本星期中的第几天（礼拜天是第0天，礼拜一是第一天，...），小时，分钟，秒钟和毫秒。时标是时标所表示的时刻和1970年1月1日午夜（UTC）的毫秒数时间差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是礼拜天。
 @end
 @language:traditional_chinese
 get_year(timestamp)，get_month(timestamp)，get_day_of_year(timestamp)，get_day_of_month(timestamp)，get_day_of_week(timestamp)，get_hour(timestamp)，get_minute(timestamp)，get_second(timestamp)和get_millisecond(timestamp) 分別返回時標timestamp所對應的年，月，本年中的第幾天，本月中的第幾天，本星期中的第幾天（禮拜天是第0天，禮拜一是第一天，...），小時，分鐘，秒鐘和毫秒。時標是時標所表示的時刻和1970年1月1日午夜（UTC）的毫秒數時間差。例如，get_day_of_week(get_time_stamp(2014, 12, 21))返回0，表示2014年12月21日是禮拜天。
 @end
Endh
::mfp::object::hash_code 1 FALSE
Help
 @language:
 hash_code function returns hash code of its only parameter.
 @end
 @language:simplified_chinese
 hash_code函数返回它唯一一个参数的hash值。
 @end
 @language:traditional_chinese
 hash_code函數返回它唯一一個參數的哈希值。
 @end
Endh
::mfp::command::iff 3 TRUE
Help
 @language:
 iff(condition1, true_result1, condition2, true_result2, ..., false_result), where condition1, condition2, ... are boolean values, returns the result based on the condition values. For example, iff(true, 3, 2) returns 3, iff(3<2, 3, 2) returns 2 (because 3<2 is false), iff(3<2, 3, 5>4, 5, 6==9, 6, 9) returns 5,  and iff(3<2, 3, 5<4, 5, 6==9, 6, 9) returns 9.
 @end
 @language:simplified_chinese
 函数iff(condition1, true_result1, condition2, true_result2, ..., false_result)的参数condition1，condition2，...为代表条件的布尔值，iff函数的返回值由条件值决定。比如，iff(true, 3, 2)返回3，iff(3<2, 3, 2)返回2（这是因为3<2是false），iff(3<2, 3, 5>4, 5, 6==9, 6, 9)返回5，以及iff(3<2, 3, 5<4, 5, 6==9, 6, 9)返回9。
 @end
 @language:traditional_chinese
 函數程式iff(condition1, true_result1, condition2, true_result2, ..., false_result)的參數condition1，condition2，...為代表條件的布爾值，iff函數程式的返回值由條件值決定。比如，iff(true, 3, 2)返回3，iff(3<2, 3, 2)返回2（這是因為3<2是false），iff(3<2, 3, 5>4, 5, 6==9, 6, 9)返回5，以及iff(3<2, 3, 5<4, 5, 6==9, 6, 9)返回9。
 @end
Endh
::mfp::math::complex::image 1 FALSE
Help
 @language:
 image(x) returns image part (a real value) of complex value x.
 @end
 @language:simplified_chinese
 image(x)返回复数x的虚部的实数值。
 @end
 @language:traditional_chinese
 image(x)返回復數x的虛部的實數值。
 @end
Endh
::mfp::math::complex::image 2 FALSE
Help
 @language:
 image(x, mode) returns image part of complex value x. If mode is true, returns image value. Otherwise, returns real value. For example, image(3+2i, true) = 2i while image(3+2i, false) = 2.
 @end
 @language:simplified_chinese
 image(x, mode)返回复数x的虚部。如果参数mode是true，则返回虚数值，否则返回实数值。比如image(3+2i, true) = 2i而image(3+2i, false) = 2。
 @end
 @language:traditional_chinese
 image(x, mode)返回復數x的虛部。如果參數mode是true，則返回虛數值，否則返回實數值。比如image(3+2i, true) = 2i而image(3+2i, false) = 2。
 @end
Endh
::mfp::array::includes_inf 1 FALSE
Help
 @language:
 includes_inf(x) determines if x includes positive infinite or negative infinite. Include means, if x is an array, then one of its elements is or includes the destination value(s), if x is a complex value, then its real or image is the destination value(s), if x is a single value, then it is the destination values(s). If it is, return true. Otherwise, return false.
 @end
 @language:simplified_chinese
 includes_inf(x)用于判断参数x是否包含正负无穷。这里，包含指的是，如果x是个数组，那么它的某一个元素包含或者本身就是目标值，如果x是一个复数，那么它的实部或者虚部是目标值，如果x是一个实数，那么它就是目标值。如果是，返回true，否则，返回false。
 @end
 @language:traditional_chinese
 includes_inf(x)用於判斷參數x是否包含正負無窮。這裏，包含指的是，如果x是個陣列，那麽它的某一個元素包含或者本身就是目標值，如果x是一個復數，那麽它的實部或者虛部是目標值，如果x是一個實數，那麽它就是目標值。如果是，返回true，否則，返回false。
 @end
Endh
::mfp::array::includes_nan 1 FALSE
Help
 @language:
 includes_nan(x) determines if x includes Nan. Include means, if x is an array, then one of its elements is or includes the destination value(s), if x is a complex value, then its real or image is the destination value(s), if x is a single value, then it is the destination values(s). If it is, return true. Otherwise, return false.
 @end
 @language:simplified_chinese
 includes_nan(x)用于判断参数x是否包含Nan。这里，包含指的是，如果x是个数组，那么它的某一个元素包含或者本身就是目标值，如果x是一个复数，那么它的实部或者虚部是目标值，如果x是一个实数，那么它就是目标值。如果是，返回true，否则，返回false。
 @end
 @language:traditional_chinese
 includes_nan(x)用於判斷參數x是否包含Nan。這裏，包含指的是，如果x是個陣列，那麽它的某一個元素包含或者本身就是目標值，如果x是一個復數，那麽它的實部或者虛部是目標值，如果x是一個實數，那麽它就是目標值。如果是，返回true，否則，返回false。
 @end
Endh
::mfp::array::includes_nan_or_inf 1 FALSE
Help
 @language:
 includes_nan_or_inf(x) determines if x includes Nan or positive infinite or negative infinite. Include means, if x is an array, then one of its elements is or includes the destination value(s), if x is a complex value, then its real or image is the destination value(s), if x is a single value, then it is the destination values(s). If it is, return true. Otherwise, return false.
 @end
 @language:simplified_chinese
 includes_nan_or_inf(x)用于判断参数x是否包含Nan或者正负无穷。这里，包含指的是，如果x是个数组，那么它的某一个元素包含或者本身就是目标值，如果x是一个复数，那么它的实部或者虚部是目标值，如果x是一个实数，那么它就是目标值。如果是，返回true，否则，返回false。
 @end
 @language:traditional_chinese
 includes_nan_or_inf(x)用於判斷參數x是否包含Nan或者正負無窮。這裏，包含指的是，如果x是個陣列，那麽它的某一個元素包含或者本身就是目標值，如果x是一個復數，那麽它的實部或者虛部是目標值，如果x是一個實數，那麽它就是目標值。如果是，返回true，否則，返回false。
 @end
Endh
::mfp::array::includes_nan_or_inf_or_null 1 FALSE
Help
 @language:
 includes_nan_or_inf_or_null(x) determines if x includes Nan or positive infinite or negative infinite or null. Include means, if x is an array, then one of its elements is or includes the destination value(s), if x is a complex value, then its real or image is the destination value(s), if x is a single value, then it is the destination values(s). If it is, return true. Otherwise, return false.
 @end
 @language:simplified_chinese
 includes_nan_or_inf_or_null(x)用于判断参数x是否包含Nan或者正负无穷或者null。这里，包含指的是，如果x是个数组，那么它的某一个元素包含或者本身就是目标值，如果x是一个复数，那么它的实部或者虚部是目标值，如果x是一个实数，那么它就是目标值。如果是，返回true，否则，返回false。
 @end
 @language:traditional_chinese
 includes_nan_or_inf_or_null(x)用於判斷參數x是否包含Nan或者正負無窮或者null。這裏，包含指的是，如果x是個陣列，那麽它的某一個元素包含或者本身就是目標值，如果x是一個復數，那麽它的實部或者虛部是目標值，如果x是一個實數，那麽它就是目標值。如果是，返回true，否則，返回false。
 @end
Endh
::mfp::array::includes_null 1 FALSE
Help
 @language:
 includes_null(x) determines if x includes null. Include means, if x is an array, then one of its elements is or includes the destination value(s), if x is a complex value, then its real or image is the destination value(s), if x is a single value, then it is the destination values(s). If it is, return true. Otherwise, return false.
 @end
 @language:simplified_chinese
 includes_null(x)用于判断参数x是否包含null。这里，包含指的是，如果x是个数组，那么它的某一个元素包含或者本身就是目标值，如果x是一个复数，那么它的实部或者虚部是目标值，如果x是一个实数，那么它就是目标值。如果是，返回true，否则，返回false。
 @end
 @language:traditional_chinese
 includes_null(x)用於判斷參數x是否包含null。這裏，包含指的是，如果x是個陣列，那麽它的某一個元素包含或者本身就是目標值，如果x是一個復數，那麽它的實部或者虛部是目標值，如果x是一個實數，那麽它就是目標值。如果是，返回true，否則，返回false。
 @end
Endh
::mfp::paracomp::connect::initialize_local 2 FALSE
Help
 @language:
 initialize_local(local_info, settings) initializes a local interface object defined by local_info which is a returned value of generate_interface function. The second parameter, settings, currently is not used and, as such, is optional. This function returns true if successful, otherwise false.
 @end
 @language:simplified_chinese
 initialize_local(local_info, settings)初始化一个本地interface对象。该对象由local_info定义（local_info是调用generate_interface的返回结果）。这个函数的第二个参数是本地网络界面的设置。这个参数现在还没有被使用，所以可以省略。本函数如果成功返回true，否则返回false。
 @end
 @language:traditional_chinese
 initialize_local(local_info, settings)初始化一個本地interface對象。該對象由local_info定義（local_info是調用generate_interface的返回結果）。這個函數的第二個參數是本地網絡界面的設置。這個參數現在還沒有被使用，所以可以省略。本函數如果成功返回true，否則返回false。
 @end
Endh
::mfp::multimedia::webrtc_lib::initialize_rtc_mmedia 0 FALSE
Help
 @language:
 This function initializes web RTC library. Note that web RTC here is the web RTC library for voice and video communication, not the same thing as the WEBRTC protocol for data communication. This function returns true if it succeeds. Otherwise false.
 @end
 @language:simplified_chinese
 本函数用于初始化web RTC库。注意此处的web RTC是指的用于支持声音和视频通信的web RTC函数库，而不是用于支持数据通信的WEBRTC协议栈。如果初始化成功，函数返回True，否则返回False。
 @end
 @language:traditional_chinese
 本函數用於初始化web RTC庫。註意此處的web RTC是指的用於支持聲音和視頻通信的web RTC函數庫，而不是用於支持數據通信的WEBRTC協議棧。如果初始化成功，函數返回True，否則返回False。
 @end
Endh
::mfp::io::console::input 3 FALSE
Help
 @language:
 input(prompt,input_type,default_value) prints string prompt on the console and waiting for user to input. The second parameter, input_type, and the third parameter default_value, are optional. At this stage if the second parameter exists and it is string "s" or "S", user's input is looked on as a string and this function returns the string. If the second and third parameter exist and the second one is "default" or "DEFAULT", then the third parameter will be the default value. And the default value is used when user just press ENTER or blanks in input. Otherwise, input is treated as an expression and this function returns the value of the expression. If input is not a valid expression, this functions will reprint the prompt and wait for user to input again. An input is finished by press ENTER key. If multiple lines are input, only the first line is read. For example, user runs input("$", "S"), then types 4 + 3 after prompt, presses ENTER, this function returns a string "4 + 3". If user runs input("%"), then type 4 + 3 after prompt, presses ENTER, this function returns 7. If user runs input("#", "default", "e"), then type space after prompt, presses ENTER, this function returns "e".
 @end
 @language:simplified_chinese
 input(prompt,input_type,default_value)在命令控制台上打印出基于字符串的提示符prompt并等待用户输入。第二个参数input_type，以及第三个参数default_value，都是可选参数。在现阶段，如果第二个参数存在，并且它值是字符串"s"或者"S"，用户的输入将会被当作一个字符串并且函数将会返回这个字符串。如果第二个和第三个参数均存在，并且第二个参数是"default"或者"DEFAULT"，第三个参数将会作为缺省值。这个缺省值将在用户直接输入回车或者空格再回车的时候被函数作为返回值。除了前述这两种情况，本函数将把用户的输入看作是一个表达式，表达式的值作为返回值返回。如果用户输入不是一个合法的表达式，本函数会重新打印提示符要求用户再次输入。用户的一次输入由ENTER键结束。如果用户输入了多行，仅仅第一行会被读取。比如，用户运行input("$", "S")，然后在提示符后输入4 + 3，再按回车，这个函数返回一个字符串"4 + 3"，如果用户运行input("%")，然后再提示符后输入4 + 3，再按回车，这个函数返回7。如果用户运行input("#", "default", "e")，然后再提示符后输入空格并回车，本函数返回字符串"e"。
 @end
 @language:traditional_chinese
 input(prompt,input_type,default_value)在命令主控台上列印出基於字串的提示符prompt並等待用戶輸入。第二個參數input_type，以及第三個參數default_value，都是可選參數。在現階段，如果第二個參數存在，並且它值是字串"s"或者"S"，用戶的輸入將會被當作一個字串並且函數將會返回這個字串。如果第二個和第三個參數均存在，並且第二個參數是"default"或者"DEFAULT"，第三個參數將會作為缺省值。這個缺省值將在用戶直接輸入回車或者空格再回車的時候被函數作為返回值。除了前述這兩種情況，本函數將把用戶的輸入看作是一個運算式，運算式的值作為返回值返回。如果用戶輸入不是一個合法的運算式，本函數會重新列印提示符要求用戶再次輸入。用戶的一次輸入由ENTER鍵結束。如果用戶輸入了多行，僅僅第一行會被讀取。比如，用戶運行input("$", "S")，然後在提示符後輸入4 + 3，再按回車，這個函數返回一個字串"4 + 3"，如果用戶運行input("%")，然後再提示符後輸入4 + 3，再按回車，這個函數返回7。 如果用戶運行input("#", "default", "e")，然後再提示符後輸入空格並回車，本函數返回字串"e"。
 @end
Endh
::mfp::data_struct::array_based::insert_elem_into_ablist 3 FALSE
Help
 @language:
 insert_elem_into_ablist(array_based_list, idx, ref_of_elem) inserts a reference of value ref_of_elem before idx of array based list array_based_list. It returns updated array list. The parameter array_based_list will not change. If idx is not valid, an exception will throw.
 @end
 @language:simplified_chinese
 insert_elem_into_ablist(array_based_list, idx, ref_of_elem)将ref_of_elem的引用插入基于数组的序列array_based_list的idx号元素之前并返回更新后的基于数组的序列。作为参数的array_based_list不会发生改变。注意idx必须是一个合法的索引。
 @end
 @language:traditional_chinese
 insert_elem_into_ablist(array_based_list, idx, ref_of_elem)將ref_of_elem的引用插入基於數組的序列array_based_list的idx號元素之前並返回更新後的基於數組的序列。作為參數的array_based_list不會發生改變。注意idx必須是一個合法的索引。
 @end
Endh
::mfp::math::calculus::integrate 2 FALSE
Help
 @language:
 integrate(x,y) returns the indefinite integrated expression of expression x based on variable y where x and y are both strings. Note that if x cannot be indefinitely integrated or x is too complicated to solve, this function will throw an exception.
 @end
 @language:simplified_chinese
 integrate(x,y)返回基于变量y的表达式x的不定积分，表达式x和变量y均为字符串。注意如果表达式x不存在不定积分，或者x过于复杂无法解出其不定积分，本函数将会抛出异常。
 @end
 @language:traditional_chinese
 integrate(x,y)返回基於變數y的表達式x的不定積分，表達式x和變數y均為字串。註意如果表達式x不存在不定積分，或者x過於復雜無法解出其不定積分，本函數程式將會拋出異常。
 @end
Endh
::mfp::math::calculus::integrate 4 FALSE
Help
 @language:
 integrate(x,y,z,w) returns the integrated value of expression x based on variable y changing from z to w. Note that x and y are string type and z and w can be real numbers, complex numbers or strings. The integrating algorithm selected is adaptive Gauss-Kronrod method.
 @end
 @language:simplified_chinese
 integrate(x,y,z,w)返回表达式x在变量y从z到w的积分值。表达式x和变量y均为字符串，z和w可以为实数，复数或字符串。注意本函数采用的积分算法是自适应Gauss-Kronrod积分法。
 @end
 @language:traditional_chinese
 integrate(x,y,z,w)返回表達式x在變數y從z到w的積分值。表達式x和變數y均為字串，z和w可以為實數，復數或字串。註意本函數程式采用的積分算法是自適應Gauss-Kronrod積分法。
 @end
Endh
::mfp::math::calculus::integrate 5 FALSE
Help
 @language:
 integrate(x,y,z,w,v) returns integrated value given a string expression x of a variable y (also a string type) and an interval [z, w]. In calculation, one step length is (w - z)/v, note that v must be a positive integer while w and z can be real numbers, complex values or strings. If v is zero, this function is the same as integrate(x,y,z,w).
 @end
 @language:simplified_chinese
 integrate(x,y,z,w,v)返回表达式x相对于变量y从w到z的积分。计算时每一步步长为(w-z)/v。表达式x和变量y均为字符串，z和w可以为实数，复数或字符串，v必须为正整数。注意如果v是0，则相当于执行integrate(x,y,z,w)。
 @end
 @language:traditional_chinese
 integrate(x,y,z,w,v)返回表達式x相對於變數y從w到z的積分。計算時每一步步長為(w-z)/v。表達式x和變數y均為字串，z和w可以為實數，復數或字串，v必須為正整數。註意如果v是0，則相當於執行integrate(x,y,z,w)。
 @end
Endh
::mfp::math::matrix::invert 1 FALSE
Help
 @language:
 invert(x) inverted 2D matrix x. Note that the elements of x can be complex numbers but x must be a square matrix (i.e. number of rows equals number of columns).
 @end
 @language:simplified_chinese
 invert(x)返回方块2维矩阵x的逆矩阵，注意x中的元素可以为复数。
 @end
 @language:traditional_chinese
 invert(x)返回方塊2維矩陣x的逆矩陣，註意x中的元素可以為復數。
 @end
Endh
::mfp::io::file::is_directory 1 FALSE
Help
 @language:
 is_directory(path) identifies if the file (or folder) at string based parameter path is a directory or not. If it exists and is a directory the function returns true, otherwise false. Examples are is_directory("E:\\") (Windows) and is_directory("/home/tony/Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_directory(path)用于判断位于字符串path的文件（或者目录）是否是一个目录。如果该文件或目录存在并且是一个目录返回true，否则返回false。例子包括is_directory("E:\\") (Windows)和is_directory("/home/tony/Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_directory(path)用於判斷位於字串path的檔案（或者目錄）是否是一個目錄。如果該檔案或目錄存在並且是一個目錄返回true，否則返回false。例子包括is_directory("E:\\") (Windows)和is_directory("/home/tony/Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::graph_lib::display::is_display_on_live 1 FALSE
Help
 @language:
 is_display_on_live(display) tells developer if a display (whether screen display or image display) is still alive.
 @end
 @language:simplified_chinese
 is_display_on_live(display)函数返回布尔值，表示参数display是否依然有效。display既可以是screen display，也可以是image display。
 @end
 @language:traditional_chinese
 is_display_on_live(display)函數程式返回布爾值，表示參數display是否依然有效。display既可以是screen display，也可以是image display。
 @end
Endh
::mfp::math::matrix::is_eye 2 FALSE
Help
 @language:
 is_eye(x,y), where x is an array or number and y is a boolean, identifies x is matrix I (or 1) or not. If x is matrix I (or 1), returns true, otherwise, returns false. If y is true, looks on all null values as zero, otherwise, null values are not looked on as zero. Y is optional. By default, it is false.
 @end
 @language:simplified_chinese
 is_eye(x,y)用于确定数组（或数）x是否是单位阵I（或数字1），如果是，返回true，否则返回false。参数y是布尔量，可以省略，缺省值为false。如果y是true，将所有的null值视为0，否则，null值不被当作0。
 @end
 @language:traditional_chinese
 is_eye(x,y)用於確定數組（或數）x是否是單位陣I（或數字1），如果是，返回true，否則返回false。參數y是布爾量，可以省略，缺省值為false。如果y是true，將所有的null值視為0，否則，null值不被當作0。
 @end
Endh
::mfp::io::file::is_file_executable 1 FALSE
Help
 @language:
 is_file_executable(path) identifies if the file (or folder) at string based parameter path is executable or not. If it exists and is executable the function returns true, otherwise false. Examples are is_file_executable("E:\\") (Windows) and is_file_executable("/home/tony/Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_file_executable(path)用于判断位于字符串path的文件（或者目录）是否可执行。如果该文件或目录存在并且可执行返回true，否则返回false。例子包括is_file_executable("E:\\") (Windows)和is_file_executable("/home/tony/Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_file_executable(path)用于判断位于字串path的档案（或者目录）是否可执行。如果该档案或目录存在并且可执行返回true，否则返回false。例子包括is_file_executable("E:\\") (Windows)和is_file_executable("/home/tony/Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::io::file::is_file_existing 1 FALSE
Help
 @language:
 is_file_existing(path) identifies if the file (or folder) at string based parameter path exists or not. If exists it returns true, otherwise false. Examples are is_file_existing("E:\\") (Windows) and is_file_existing("/home/tony/Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_file_existing(path)用于判断位于字符串path的文件（或者目录）是否存在。如果存在返回true，否则返回false。例子包括is_file_existing("E:\\") (Windows)和is_file_existing("/home/tony/Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_file_existing(path)用於判斷位於字串path的文件（或者目錄）是否存在。如果存在返回true，否則返回false。例子包括is_file_existing("E:\\") (Windows)和is_file_existing("/home/tony/Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::io::file::is_file_hidden 1 FALSE
Help
 @language:
 is_file_hidden(path) identifies if the file (or folder) at string based parameter path is hidden or not. If it exists and is hidden the function returns true, otherwise false. Examples are is_file_hidden("E:\\") (Windows) and is_file_hidden("/home/tony/Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_file_hidden(path)用于判断位于字符串path的文件（或者目录）是否隐藏。如果该文件或目录存在并且隐藏返回true，否则返回false。例子包括is_file_hidden("E:\\") (Windows)和is_file_hidden("/home/tony/Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_file_hidden(path)用于判断位于字串path的档案（或者目录）是否隱藏。如果该档案或目录存在并且隱藏返回true，否则返回false。例子包括is_file_hidden("E:\\") (Windows)和is_file_hidden("/home/tony/Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::io::file::is_file_normal 1 FALSE
Help
 @language:
 is_file_normal(path) identifies if the file (or folder) at string based parameter path is a normal file (not a folder) or not. If it exists and is a normal file the function returns true, otherwise false. Examples are is_file_normal("E:\\") (Windows) and is_file_normal("/home/tony/Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_file_normal(path)用于判断位于字符串path的文件（或者目录）是否是一个常规文件而不是目录。如果该文件或目录存在并且是一个常规文件而不是目录返回true，否则返回false。例子包括is_file_normal("E:\\") (Windows)和is_file_normal("/home/tony/Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_file_normal(path)用于判断位于字串path的档案（或者目录）是否是一個常規檔案而不是目錄。如果该档案或目录存在并且是一個常規檔案而不是目錄返回true，否则返回false。例子包括is_file_normal("E:\\") (Windows)和is_file_normal("/home/tony/Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::io::file::is_file_readable 1 FALSE
Help
 @language:
 is_file_readable(path) identifies if the file (or folder) at string based parameter path is readable or not. If it exists and is readable the function returns true, otherwise false. Examples are is_file_readable("E:\\") (Windows) and is_file_readable("/home/tony/Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_file_readable(path)用于判断位于字符串path的文件（或者目录）是否可读。如果该文件或目录存在并且可读返回true，否则返回false。例子包括is_file_readable("E:\\") (Windows)和is_file_readable("/home/tony/Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_file_readable(path)用于判断位于字串path的档案（或者目录）是否可讀。如果该档案或目录存在并且可讀返回true，否则返回false。例子包括is_file_readable("E:\\") (Windows)和is_file_readable("/home/tony/Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::io::file::is_file_writable 1 FALSE
Help
 @language:
 is_file_writable(path) identifies if the file (or folder) at string based parameter path is writable or not. If it exists and is writable the function returns true, otherwise false. Examples are is_file_writable("E:\\") (Windows) and is_file_writable("/home/tony/Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_file_writable(path)用于判断位于字符串path的文件（或者目录）是否可写。如果该文件或目录存在并且可写返回true，否则返回false。例子包括is_file_writable("E:\\") (Windows)和is_file_writable("/home/tony/Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_file_writable(path)用于判断位于字串path的档案（或者目录）是否可寫。如果该档案或目录存在并且可寫返回true，否则返回false。例子包括is_file_writable("E:\\") (Windows)和is_file_writable("/home/tony/Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::math::number::is_inf 1 FALSE
Help
 @language:
 is_inf(x) determines if x is positive infinite or negative infinite. If it is, return true. Otherwise, return false.
 @end
 @language:simplified_chinese
 is_inf(x)用于判断参数x是否为正负无穷。如果是，返回true，否则，返回false。
 @end
 @language:traditional_chinese
 is_inf(x)用於判斷參數x是否為正負無窮。如果是，返回true，否則，返回false。
 @end
Endh
::mfp::platform_hardware::platform_info::is_mfp_app 0 FALSE
Help
 @language:
 is_mfp_app() tells developer whether the script is running in an MFP app. It returns true if running in an MFP app.
 @end
 @language:simplified_chinese
 is_running_on_android()告诉开发人员脚本是否在MFP应用中运行，如果是，返回true，如果不是，返回false。
 @end
 @language:traditional_chinese
 is_running_on_android()告訴開發人員腳本是否在MFP應用中運行，如果是，返回true，如果不是，返回false。
 @end
Endh
::mfp::math::number::is_nan_or_inf 1 FALSE
Help
 @language:
 is_nan_or_inf(x) determines if x is Nan or positive infinite or negative infinite. If it is, return true. Otherwise, return false.
 @end
 @language:simplified_chinese
 is_nan_or_inf(x)用于判断参数x是否为Nan或者正负无穷。如果是，返回true，否则，返回false。
 @end
 @language:traditional_chinese
 is_nan_or_inf(x)用於判斷參數x是否為Nan或者正負無窮。如果是，返回true，否則，返回false。
 @end
Endh
::mfp::math::number::is_nan_or_inf_or_null 1 FALSE
Help
 @language:
 is_nan_or_inf_or_null(x) determines if x is Nan or positive infinite or negative infinite or null. If it is, return true. Otherwise, return false.
 @end
 @language:simplified_chinese
 is_nan_or_inf_or_null(x)用于判断参数x是否为Nan或者正负无穷或者null。如果是，返回true，否则，返回false。
 @end
 @language:traditional_chinese
 is_nan_or_inf_or_null(x)用於判斷參數x是否為Nan或者正負無窮或者null。如果是，返回true，否則，返回false。
 @end
Endh
::mfp::io::file::is_path_absolute 1 FALSE
Help
 @language:
 is_path_absolute(path) identifies if the string based path is an absolute path (i.e. not relative to current folder). If it is an absolute path the function returns true, otherwise false. Examples are is_path_absolute("E:\\temp") (Windows) and is_path_absolute("Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_path_absolute(path)用于判断位于字符串path是否是一个绝对路径（也就是不是相对于当前目录的路径）。如果是返回true，否则返回false。例子包括is_path_absolute("E:\\temp") (Windows)和is_path_absolute("Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_path_absolute(path)用于判断位于字串path是否是一個絕對路徑（也就是不是相對於當前目錄的路徑）。如果是返回true，否则返回false。例子包括is_path_absolute("E:\\temp") (Windows)和is_path_absolute("Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::io::file::is_path_parent 2 FALSE
Help
 @language:
 is_path_parent(path1, path2) identifies if the string based path1 is the parent of string based path2. If it is returns true, otherwise false. Examples are is_path_parent("E:\\temp", "E:\\temp\\..\\temp\\test") (Windows) and is_path_parent(".", "Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_path_parent(path1, path2)用于判断位于字符串path1是否是字符串path2的上级目录。如果是返回true，否则返回false。例子包括is_path_parent("E:\\temp", "E:\\temp\\..\\temp\\test") (Windows)和is_path_parent(".", "Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_path_parent(path1, path2)用於判斷位於字串path1是否是字符串path2的上級目錄。如果是返回true，否則返回false。例子包括is_path_parent("E:\\temp", "E:\\temp\\..\\temp\\test") (Windows)和is_path_parent(".", "Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::io::file::is_path_same 2 FALSE
Help
 @language:
 is_path_same(path1, path2) identifies if the string based path1 is actually the same as string based path2. If it is returns true, otherwise false. Examples are is_path_same("E:\\temp", "E:\\temp\\..\\temp\\") (Windows) and is_path_parent("/home/tony/Documents", "Documents/") (Android).
 @end
 @language:simplified_chinese
 is_path_same(path1, path2)用于判断位于字符串path1是否和字符串path2指向同一条路径。如果是返回true，否则返回false。例子包括is_path_same("E:\\temp", "E:\\temp\\..\\temp\\") (Windows)和is_path_parent("/home/tony/Documents", "Documents/") (Android)。
 @end
 @language:traditional_chinese
 is_path_same(path1, path2)用於判斷位於字串path1是否和字串path2指向同一條路徑。如果是返回true，否則返回false。例子包括is_path_same("E:\\temp", "E:\\temp\\..\\temp\\") (Windows)和is_path_parent("/home/tony/Documents", "Documents/") (Android)。
 @end
Endh
::mfp::multimedia::audio_lib::is_playing 1 FALSE
Help
 @language:
 This function accepts a single parameter, which is a media player handle. If the sound represented by the handle is playing, this function returns true. If the sound is not playing or the handle is invalid, returns false.
 @end
 @language:simplified_chinese
 这个函数接受一个媒体播放器句柄作为参数。如果该媒体播放器正在播放音乐，这个函数返回true，如果该媒体播放器没有正在播放，或者该句柄无效，这个函数返回false。
 @end
 @language:traditional_chinese
 這個函數程式接受一個媒體播放器句柄作為參數。如果該媒體播放器正在播放音樂，這個函數程式返回true，如果該媒體播放器沒有正在播放，或者該句柄無效，這個函數程式返回false。
 @end
Endh
::mfp::platform_hardware::platform_info::is_running_on_android 0 FALSE
Help
 @language:
 is_running_on_android() tells developer whether the script is running on Android or a JAVA platform. It returns true if running on Android, otherwise false.
 @end
 @language:simplified_chinese
 is_running_on_android()告诉开发人员脚本是否在安卓平台上运行，如果是，返回true，如果不是，而是在普通的JAVA平台上运行，返回false。
 @end
 @language:traditional_chinese
 is_running_on_android()告訴開發人員腳本是否在安卓平臺上運行，如果是，返回true，如果不是，而是在普通的JAVA平臺上運行，返回false。
 @end
Endh
::mfp::platform_hardware::platform_info::is_sandbox_session 0 FALSE
Help
 @language:
 Function is_sandbox_session tells developer if the current MFP code is running in a sandbox session or not. A sandbox session is a session which runs in server side after a call request from a client is received. A sandbox session has its independant MFP user libs, resources and stack from other sessions in this server. Its user libs, resources and stack are copied from the client who sent the call request whether the client is local or remote. This function has no parameter. It returns true if this is a sandbox session. Otherwise false .
 @end
 @language:simplified_chinese
 函数is_sandbox_session告诉开发者当前的MFP代码是否运行在一个沙盒中。沙盒是在服务端运行的一个线程。这个线程在服务端收到一个客户端的call指令后启动。这个客户端是一个独立于服务端的进程，它可能位于本机，也可能位于另外一台电脑。该线程拥有独立于服务端其它线程的MFP用户代码库,资源和栈。它的用户代码库,资源和栈是拷贝自发送call指令的客户端。这个函数没有参数，如果当前代码位于一个沙盒中它返回True，否则返回False 。
 @end
 @language:traditional_chinese
 函數is_sandbox_session告訴開發者當前的MFP代碼是否運行在一個沙盒中。沙盒是在服務端運行的一個線程。這個線程在服務端收到一個客戶端的call指令後啟動。這個客戶端是一個獨立於服務端的進程，它可能位於本機，也可能位於另外一臺電腦。該線程擁有獨立於服務端其它線程的MFP用戶代碼庫，資源和棧。它的用戶代碼庫，資源和棧是拷貝自發送call指令的客戶端。這個函數沒有參數，如果當前代碼位於一個沙盒中它返回True，否則返回False 。
 @end
Endh
::mfp::io::file::is_symbol_link 1 FALSE
Help
 @language:
 is_symbol_link(path) identifies if the file (or folder) at string based parameter path is a symbol link or not. If it exists and is a symbol link the function returns true, otherwise false. Examples are is_symbol_link("E:\\") (Windows) and is_symbol_link("/home/tony/Documents/cv.pdf") (Android).
 @end
 @language:simplified_chinese
 is_symbol_link(path)用于判断位于字符串path的文件（或者目录）是否是一个符号链接。如果该文件或目录存在并且是一个符号链接返回true，否则返回false。例子包括is_symbol_link("E:\\") (Windows)和is_symbol_link("/home/tony/Documents/cv.pdf") (Android)。
 @end
 @language:traditional_chinese
 is_symbol_link(path)用于判断位于字串path的档案（或者目录）是否是一個符號鏈接。如果该档案或目录存在并且是一個符號鏈接返回true，否则返回false。例子包括is_symbol_link("E:\\") (Windows)和is_symbol_link("/home/tony/Documents/cv.pdf") (Android)。
 @end
Endh
::mfp::multimedia::image_lib::is_valid_image_handle 1 FALSE
Help
 @language:
 is_valid_image_handle(image_handle) returns true or false, telling developer if a image handle (i.e. a wrapped JAVA image object) is still valid or has been closed.
 @end
 @language:simplified_chinese
 is_valid_image_handle(image_handle)返回一个布尔量，用于告诉开发人员一个被包装过的JAVA图像对象，也就是image_handle参数，是否依然合法还是已经被关闭。
 @end
 @language:traditional_chinese
 is_valid_image_handle(image_handle)返回一個布爾量，用於告訴開發人員一個被包裝過的JAVA圖像對象，也就是image_handle參數，是否依然合法還是已經被關閉。
 @end
Endh
::mfp::math::matrix::is_zeros 2 FALSE
Help
 @language:
 is_zeros(x,y), where x is an array or number and y is a boolean, identifies x is matrix zeor (or number zero) or not. If x is, returns true, otherwise, returns false. If y is true, looks on all null values as zero, otherwise, null values are not looked on as zero. Y is optional. By default, it is false.
 @end
 @language:simplified_chinese
 is_zeros(x,y)用于确定数组（或数）x是否是零矩阵（或数字0），如果是，返回true，否则返回false。参数y是布尔量，可以省略，缺省值为false。如果y是true，将所有的null值视为0，否则，null值不被当作0。
 @end
 @language:traditional_chinese
 is_zeros(x,y)用於確定數組（或數）x是否是零矩陣（或數字0），如果是，返回true，否則返回false。參數y是布爾量，可以省略，缺省值為false。如果y是true，將所有的null值視為0，否則，null值不被當作0。
 @end
Endh
::mfp::math::matrix::left_recip 1 FALSE
Help
 @language:
 left_recip(x) calculates left-division reciprocal of x. Note that so far x can only be a number or a 2D matrix.
 @end
 @language:simplified_chinese
 left_recip(x)计算x的左除倒数，注意当前仅支持数值或二维矩阵。
 @end
 @language:traditional_chinese
 left_recip(x)計算x的左除倒數，註意當前僅支持數值或二維陣列。
 @end
Endh
::mfp::math::calculus::lim 3 FALSE
Help
 @language:
 lim(expr, var, dest_value) calculates the limit value of expression expr when variable var is closing to dest_value. expr and var should be string and dest_value can be expression or value, whether string based or not. For example, lim("1/x", "x", 0) or lim("(x+2)/(x+3)","x","3+0"). Note that this function is still under development.
 @end
 @language:simplified_chinese
 lim(expr, var, dest_value)用于计算表达式expr在变量var趋近于dest_value时的值。expr和var必须为字符串，dest_value为表达式或者数值，可以基于字符串，也可以不基于字符串。比如，lim("1/x", "x", 0)或者lim("(x+2)/(x+3)","x","3+0")。注意这个函数还在开发中。
 @end
 @language:traditional_chinese
 lim(expr, var, dest_value)用於計算表達式expr在變數var趨近於dest_value時的值。expr和var必須為字串，dest_value為表達式或者數值，可以基於字串，也可以不基於字串。比如，lim("1/x", "x", 0)或者lim("(x+2)/(x+3)","x","3+0")。註意這個函數程式還在開發中。
 @end
Endh
::mfp::multimedia::webrtc_lib::link_video_stream 4 FALSE
Help
 @language:
 This function links a web RTC video stream to a RTC video output window. It has four parameters. The first one is a display handle, which is returned from an open_screen_display call. The second one is a peer connection object's Id. The third one is video stream's track Id. The last one is video output window index. This function doesn't return anything. If any parameters are invalid, or it fails to link video stream to the video output window, an exception is thrown.
 @end
 @language:simplified_chinese
 此函数将web RTC视频流链接到一个RTC视频输出窗口。它有四个参数。第一个是显示窗口句柄，该句柄可以从open_screen_display函数调用中返回。第二个是peer connection对象的Id。第三个是视频流轨的ID。最后一个是RTC视频输出子窗口在显示窗口的RTC视频输出子窗口序列中的索引。此函数不会返回任何值。如果任何参数无效，或者无法将视频流链接到视频输出窗口，本函数会抛出一个异常。
 @end
 @language:traditional_chinese
 此函數將web RTC視頻流鏈接到一個RTC視頻輸出窗口。它有四個參數。第一個是顯示窗口句柄，該句柄可以從open_screen_display函數調用中返回。第二個是peer connection對象的Id。第三個是視頻流軌的ID。最後一個是RTC視頻輸出子窗口在顯示窗口的RTC視頻輸出子窗口序列中的索引。此函數不會返回任何值。如果任何參數無效，或者無法將視頻流鏈接到視頻輸出窗口，本函數會拋出一個異常。
 @end
Endh
::mfp::io::file::list_files 1 FALSE
Help
 @language:
 list_files(path) returns all the file names in the folder whose path is the string based parameter path, or it returns the file at path if path corresponds to a file. If the path does not correspond to a file or folder, it returns NULL. Note that parameter path is optional. By default it is current folder ("."). Examples are list_files("c:\\temp\\try1") (Windows) and list_files("../testfile_copy.txt") (Android).
 @end
 @language:simplified_chinese
 list_files(path)返回位于字符串path路径的目录中的所有子文件或者子目录的名字，或者如果path路径对应的是一个文件，它返回该文件的文件名。如果不存在一个文件或者目录对应于path路径，它返回NULL。注意参数path是可以省略的。它的缺省值是当前目录。例子包括list_files("c:\\temp\\try1") (Windows)和list_files("../testfile_copy.txt") (Android)。
 @end
 @language:traditional_chinese
 list_files(path)返回位於字串path路徑的目錄中的所有子檔案或者子目錄的名字，或者如果path路徑對應的是一個檔案，它返回該檔案的名字。如果不存在一個檔案或者目錄對應於path路徑，它返回NULL。註意參數path是可以省略的。它的缺省值是當前目錄。例子包括list_files("c:\\temp\\try1") (Windows)和list_files("../testfile_copy.txt") (Android)。
 @end
Endh
::mfp::paracomp::connect::listen 1 FALSE
Help
 @language:
 listen(local_info) listens on the local object defined by local_info. The parameter, local_info, is a returned value from generate_interface function. This function returns true if successful, otherwise false.
 @end
 @language:simplified_chinese
 listen(local_info)在一个本地interface对象上侦听外部的连接请求。参数local_info是调用generate_interface函数的返回值。listen如果成功，返回true，否则返回false。
 @end
 @language:traditional_chinese
 listen(local_info)在一個本地interface對象上偵聽外部的連接請求。參數local_info是調用generate_interface函數的返回值。listen如果成功，返回true，否則返回false。
 @end
Endh
::mfp::multimedia::image_lib::load_image 1 FALSE
Help
 @language:
 load_image(image_path) returns a wrapped JAVA image object. image_path is a string based path pointing to an image file.
 @end
 @language:simplified_chinese
 load_image(image_path)返回一个被包装过的JAVA图像对象。它有一个参数image_path。这个参数是一个基于字符串的，指向一个图形文件的路径。
 @end
 @language:traditional_chinese
 load_image(image_path)返回一個被包裝過的JAVA圖像對象。它有一個參數image_path。這個參數是一個基於字串的，指向一個圖形檔的路徑。
 @end
Endh
::mfp::multimedia::image_lib::load_image_from_zip 3 FALSE
Help
 @language:
 load_image_from_zip(zip_file_name, zip_entry_path, zip_file_type) returns a wrapped JAVA image object loaded from a zipped file. Its first parameter is the path of the zipped file. Its second parameter is the zip entry path of the image. Its last parameter is zip file type. 0 means it is a normal zip file and 1 means it is an Android asset zip file (for MFP app).
 @end
 @language:simplified_chinese
 load_image_from_zip(zip_file_name, zip_entry_path, zip_file_type)返回一个被包装过的JAVA图像对象。该图形对象从一个zip压缩文件中读取。它的第一个参数是基于字符串的zip文件的压缩路径。它的第二个参数是图像在该zip文件中的压缩路径。它的第三个参数要么是0，要么是1。如果等于0，表示普通的zip文件，而如果等于1，表示MFP App的安卓assets中的zip文件。
 @end
 @language:traditional_chinese
 load_image_from_zip(zip_file_name, zip_entry_path, zip_file_type)返回一個被包裝過的JAVA圖像對象。該圖形對象從一個zip壓縮檔中讀取。它的第一個參數是基於字串的zip檔的壓縮路徑。它的第二個參數是圖像在該zip檔中的壓縮路徑。它的第三個參數要麼是0，要麼是1。如果等於0，表示普通的zip檔，而如果等於1，表示MFP App的安卓assets中的zip檔。
 @end
Endh
::mfp::math::log_exp::log 1 FALSE
Help
 @language:
 log(x), where can be a complex number, returns e based logarithm value of x.
 @end
 @language:simplified_chinese
 log(x)返回x的自然对数，注意x可以为复数。
 @end
 @language:traditional_chinese
 log(x)返回x的自然對數，注意x可以為復數。
 @end
Endh
::mfp::io::file::ls 1 FALSE
Help
 @language:
 print_file_list(path) (alias ls(path) or dir(path)) works like ls command in Linux or dir command in Windows. It print the information for the file or all the files in folder at string based path. It returns the number of entries that printed. If the path does not corresponds to an existing file or folder, it returns -1. Note that path is optional. By default it is current folder ("."). Examples are dir() (Windows) and ls("../testfile_copy.txt") (Android).
 @end
 @language:simplified_chinese
 print_file_list(path) (alias ls(path) or dir(path))函数和Windows平台上的dir命令以及Linux平台上的ls命令类似。它打印出位于字符串path路径的文件或者目录中的所有子文件和子目录的信息。它返回打印的条目的个数。如果不存在一个文件或者目录对应于path路径，它返回-1。注意参数path是可以省略的。它的缺省值是当前目录。例子包括dir() (Windows)和ls("../testfile_copy.txt") (Android)。
 @end
 @language:traditional_chinese
 print_file_list(path) (alias ls(path) or dir(path))函數程式和Windows平臺上的dir命令以及Linux平臺上的ls命令類似。它打印出位於字串path路徑的档案或者目錄中的所有子档案和子目錄的信息。它返回打印的條目的個數。如果不存在一個檔案或者目錄對應於path路徑，它返回-1。註意參數path是可以省略的。它的缺省值是當前目錄。例子包括dir("c:\\temp\\try1") (Windows)和ls("../testfile_copy.txt") (Android)。
 @end
Endh
::mfp::math::number::mod 2 FALSE
Help
 @language:
 mod(x,y) returns the remainder of x/y (y must be positive). If x and y are not integers, they will be converted to integer numbers first.
 @end
 @language:simplified_chinese
 mod(x,y)返回x除以正整数y的余数，如果x或者y不是整数，将被首先转换为整数。
 @end
 @language:traditional_chinese
 mod(x,y)返回x除以正整數y的余數，如果x或者y不是整數，將被首先轉換為整數。
 @end
Endh
::mfp::io::file::move_file 3 FALSE
Help
 @language:
 move_file(source, destination, replace_exist) moves file or folder whose path is string source to file or INTO (not to) folder whose path is string destination. If the 3rd parameter, replace_exist, is true, then source file (or any file in source folder) will replace destination file (or corresponding file in destination folder) if corresponding file exists. Note that the 3rd parameter is optional. By default it is false. Examples are move_file("c:\\temp\\try1", "D:\\", true) (Windows) and move_file("/mnt/sdcard/testfile.txt", "./testfile_copy.txt") (Android).
 @end
 @language:simplified_chinese
 move_file(source, destination, replace_exist)函数移动位于字符串source路径的文件或文件夹到位于字符串destination路径的文件或位于destination路径的文件夹内（而不是位于destination路径的文件夹本身）。如果第三个参数，replace_exist，是true，那么如果目标文件已经存在，它将会被源文件（或者源文件夹中的对应文件）替换。注意第三个参数可以省略，它的缺省值为false。例子包括move_file("c:\\temp\\try1", "D:\\", true) (Windows)和copy_file("/mnt/sdcard/testfile.txt", "./testfile_copy.txt") (Android)。
 @end
 @language:traditional_chinese
 move_file(source, destination, replace_exist)函數程式移動位於字串source路徑的檔案或檔案目錄到位於字串destination路徑的檔案或位於destination路徑的檔案目錄內（而不是位於destination路徑的檔案目錄本身）。如果第三個參數，replace_exist，是true，那麼如果目標檔案已經存在，它將會被源檔案（或者源檔案目錄中的對應檔案）替換。註意第三個參數可以省略，它的缺省值為false。例子包括move_file("c:\\temp\\try1", "D:\\", true) (Windows)和copy_file("/mnt/sdcard/testfile.txt", "./testfile_copy.txt") (Android)。
 @end
Endh
::mfp::time_date::now 0 FALSE
Help
 @language:
 now() returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC.
 @end
 @language:simplified_chinese
 now()返回当前时刻和1970年1月1日午夜（UTC）的毫秒数时间差。
 @end
 @language:traditional_chinese
 now()返回當前時刻和1970年1月1日午夜（UTC）的毫秒數時間差。
 @end
Endh
::mfp::math::matrix::ones 1 TRUE
Help
 @language:
 Function ones generates a matrix whose elements are all one. The dimension of the matrix is determined by the parameters of ones function, which is either a number of positive integers or a single positive integer list. Note that ones([]) returns 1.
 @end
 @language:simplified_chinese
 ones函数返回一个所有元素都是1的矩阵，本函数的参数用于决定矩阵的尺寸，要么为一批正整数，要么为一个正整数数列。注意函数表达式ones([])返回常数1。
 @end
 @language:traditional_chinese
 ones函數返回一個所有元素都是1的矩陣，本函數的參數用於決定矩陣的尺寸，要麽為一批正整數，要麽為一個正整數數列。註意表達式ones([])返回常數1。
 @end
Endh
::mfp::multimedia::image_lib::open_image_display 1 FALSE
Help
 @language:
 open_image_display(image_path_or_handle) creates an image display for developer to paint. image_path_or_handle is either a string based path pointing to an image file, or null, or a memory handle of a JAVA image object returned by load_image, load_image_from_zip, create_image or clone_image functions.
 @end
 @language:simplified_chinese
 open_image_display(image_path_or_handle)创建一个image display供开发人员调用MFP函数绘图。它有一个参数。这个参数既可以是一个基于字符串的，指向一个图形文件的路径，也可以是null，还可以是一个由load_image，load_image_from_zip，create_image或者clone_image函数返回的JAVA image对象的句柄。
 @end
 @language:traditional_chinese
 open_image_display(image_path_or_handle)創建一個image display供開發人員調用MFP函數繪圖。它有一個參數。這個參數既可以是一個基於字串的，指向一個圖形檔的路徑，也可以是null，還可以是一個由load_image，load_image_from_zip，create_image或者clone_image函數返回的JAVA image對象的句柄。
 @end
Endh
::mfp::graph_lib::display::open_screen_display 6 FALSE
Help
 @language:
 open_screen_display(caption, background color, quit_confirm, size, resizable, orientation) returns a screen display handle. A screen display is a window in PC (JAVA) or an activity in Android. It has six parameters. All of them are optional. The first parameter is the caption of the display. This caption will be shown as window's title in PC, and has no use in Android. By default, it is an empty string. The second parameter is the background color. It is a 4-elem array ([Alpha, R, G, B]) or 3-elem array ([R, G, B]) with each elem from 0 to 255. By default it is [0, 0, 0, 0]. The third one is confirm quit or not. By default it is false. The fourth one is the size of the screen. It is a 2-elem array ([width, height]) with default value [0, 0]. It doesn't have any effect in Android. The fifth is resizable or not. It doesn't have any effect in Android. Its default value is false. The last one is the orientation of the display in Android. It doesn't have any effect in PC. Orientation is an integer. At this moment, it's value can be -1 (arbitary), 0 (horizontal) and 1 (vertical). By default it is -1. Examples of this function:
variable display = open_screen_display("Hello world", [255, 238, 17], true, [640, 480], true, 0)
and
variable display = open_screen_display("Hello")
 @end
 @language:simplified_chinese
 open_screen_display返回一个screen display的句柄。screen display在JAVA平台上是一个窗口，在安卓平台上函数有6个可选参数：caption，background color，confirm quit，size，resizable， orientation。Caption是display的标题，该参数在安卓平台上不起作用；background color是display的背景色，它是一个4个或3个元素的数组，如果是4个元素，就是[Alpha，R，G，B]，如果是3个元素，就是[R，G，B]，在该数组中，每一个元素的值都是从0到255；confirm quit是一个布尔值，用于告诉screen display在退出时是否需要用户确认；size是screen display的大小，它是一个包含两个元素的数组，第一个元素是宽度，第二个元素是高度；resizable是告诉screen display是否可以调整大小，在安卓平台上，size和resizable都没有作用，orientiation仅仅用于安卓平台，用于指定screen display是横向（0），竖向（1）还是任意（-1）。该函数的示例为：
variable display = open_screen_display("Hello world", [255, 238, 17], true, [640, 480], true, 0)
以及
variable display = open_screen_display("Hello")
 @end
 @language:traditional_chinese
 open_screen_display返回一個screen display的句柄。 screen display在JAVA平台上是一個窗口，在安卓平台上函數有6個可選參數：caption，background color，confirm quit，size，resizable， orientation。 Caption是display的標題，該參數在安卓平台上不起作用；background color是display的背景色，它是一個4個或3個元素的陣列，如果是4個元素，就是[Alpha，R，G， B]，如果是3個元素，就是[R，G，B]，在該陣列中，每一個元素的值都是從0到255；confirm quit是一個布爾值，用於告訴screen display在退出時是否需要用戶確認；size是screen display的大小，它是一個包含兩個元素的陣列，第一個元素是寬度，第二個元素是高度；resizable是告訴screen display是否可以調整大小，在安卓平台上，size和resizable都沒有作用，orientiation僅僅用於安卓平台，用於指定sc​​reen display是橫向（0），豎向（1）還是任意（-1）。該函數程式的示例為：
variable display = open_screen_display("Hello world", [255, 238, 17], true, [640, 480], true, 0)
以及
variable display = open_screen_display("Hello")
 @end
Endh
::mfp::math::logic::or 1 TRUE
Help
 @language:
 or(x...) which accepts an arbitary number (> 0) of boolean parameters, returns logical or of the parameters. If a parameter's type is not boolean, it will be automatically converted to boolean first.
 @end
 @language:simplified_chinese
 or(x...)接受不少于1个的任意个数的参数，返回这些参数的逻辑或值。如果某一个参数不是布尔类型，将会被自动转换为布尔类型。
 @end
 @language:traditional_chinese
 or(x...)接受不少於1個的任意個數的參數，返回這些參數的邏輯或值。如果某一個參數不是布爾類型，將會被自動轉換為布爾類型。
 @end
Endh
::mfp::system::pause 1 FALSE
Help
 @language:
 pause(message) suspends current running program waiting for an enter input by user. Message, which is a string and is optional, will be printed on screen as a prompt if provided.
 @end
 @language:simplified_chinese
 pause(message)将暂停当前运行的程序，等待用户输入一个回车，然后继续。字符串参数message可以省略。如果不省略，message将作为提示被打印在屏幕上。
 @end
 @language:traditional_chinese
 pause(message)將暫停當前運行的程式，等待用戶輸入一個回車，然後繼續。字串參數message可以省略。如果不省略，message將作為提示被打印在熒幕上。
 @end
Endh
::mfp::multimedia::audio_lib::play_sound 4 FALSE
Help
 @language:
 play_sound(source_path, repeat_or_not, volume, create_new_or_not) plays a sound file (can be wave, midi or mp3). This function returns a sound handle which is a JAVA (or Android) media player wrapper. Because the media player resource is scarce, this function will try to reuse previously created sound handle. It has four parameters. The first parameter is the path of the sound file. The second parameter is a boolean telling MFP whether the sound should be repeated to play or not. This parameter is optional and its default value is false. The third one, which is a double from 0 to 1, is the volume of the sound. This parameter is optional and its default value is 1. The fourth one is a boolean flag telling MFP to create a new sound handle compulsorily or not. If it is true, play_sound always creates a new sound handle. This function is optional and its default value is false.
 @end
 @language:simplified_chinese
 play_sound(source_path, repeat_or_not, volume, create_new_or_not)演奏一个声音文件，该声音文件可以是wave文件，也可以是midi文件，还可以是mp3文件。该函数返回一个演奏器的句柄，该句柄指向一个JAVA或安卓的多媒体演奏器。由于多媒体演奏器的资源是有限的，本函数会尽可能的回收并重用以前生成的多媒体演奏器。本函数有4个参数。第一个参数是声音文件的路径。第二个参数是一个布尔值，表示该声音是否需要重复演奏，这是一个缺省参数，缺省值是false。第三个参数是一个从0到1的浮点数，表示音量大小。这也是一个缺省参数，缺省值是1。第四个参数是一个布尔值，表示是否无论如何都强制生产一个新的多媒体演奏器。这也是一个缺省参数，缺省值是false。
 @end
 @language:traditional_chinese
 play_sound(source_path, repeat_or_not, volume, create_new_or_not)演奏一個音效檔，該音效檔可以是wave檔，也可以是midi檔，還可以是mp3檔。該函數返回一個演奏器的控制碼，該控制碼指向一個JAVA或安卓的多媒體演奏器。由於多媒體演奏器的資源是有限的，本函數會盡可能的回收並重用以前生成的多媒體演奏器。本函數有4個參數。第一個參數是音效檔的路徑。第二個參數是一個布爾值，表示該聲音是否需要重複演奏，這是一個缺省參數，缺省值是false。第三個參數是一個從0到1的浮點數，表示音量大小。這也是一個缺省參數，缺省值是1。第四個參數是一個布爾值，表示是否無論如何都強制生產一個新的多媒體演奏器。這也是一個缺省參數，缺省值是false。
 @end
Endh
::mfp::multimedia::audio_lib::play_sound_from_zip 6 FALSE
Help
 @language:
 play_sound_from_zip(source_zip_file_path, zip_entry_path, zip_file_type, repeat_or_not, volume, create_new_or_not) plays a sound file (can be wave, midi or mp3) extracted from a zip file. This function returns a sound handle which is a JAVA (or Android) media player wrapper. Because the media player resource is scarce, this function will try to reuse previously created sound handle. It has six parameters. The first parameter is the path of the zip file. The second parameter is zip entry path of the zipped sound file. The third parameter is zip file type, 0 for normal zip file and 1 for MFP app's Android asset zip file. The fourth parameter is a boolean telling MFP whether the sound should be repeated to play or not. This parameter is optional and its default value is false. The fifth one, which is a double from 0 to 1, is the volume of the sound. This parameter is optional and its default value is 1. The sixth one is a boolean flag telling MFP to create a new sound handle compulsorily or not. If it is true, play_sound always creates a new sound handle. This function is optional and its default value is false.
 @end
 @language:simplified_chinese
 play_sound_from_zip(source_zip_file_path, zip_entry_path, zip_file_type, repeat_or_not, volume, create_new_or_not)演奏一个从zip文件中抽取出的声音文件，该声音文件可以是wave文件，也可以是midi文件，还可以是mp3文件。该函数返回一个演奏器的句柄，该句柄指向一个JAVA或安卓的多媒体演奏器。由于多媒体演奏器的资源是有限的，本函数会尽可能的回收并重用以前生成的多媒体演奏器。本函数有6个参数。第一个参数是zip文件的路径。第二个参数是被压缩的声音文件的在zip文件中的位置路径。第三个参数是一个布尔值，0表示zip文件是普通的压缩文件，1表示zip文件位于MFP app的安卓asset目录中。第四个参数是一个布尔值，表示该声音是否需要重复演奏，这是一个缺省参数，缺省值是false。第五个参数是一个从0到1的浮点数，表示音量大小。这也是一个缺省参数，缺省值是1。第六个参数是一个布尔值，表示是否无论如何都强制生产一个新的多媒体演奏器。这也是一个缺省参数，缺省值是false。
 @end
 @language:traditional_chinese
 play_sound_from_zip(source_zip_file_path, zip_entry_path, zip_file_type, repeat_or_not, volume, create_new_or_not)演奏一個從zip檔中抽取出的音效檔，該音效檔可以是wave檔，也可以是midi檔，還可以是mp3檔。該函數返回一個演奏器的控制碼，該控制碼指向一個JAVA或安卓的多媒體演奏器。由於多媒體演奏器的資源是有限的，本函數會盡可能的回收並重用以前生成的多媒體演奏器。本函數有6個參數。第一個參數是zip檔的路徑。第二個參數是被壓縮的音效檔的在zip檔中的位置路徑。第三個參數是一個布爾值，0表示zip檔是普通的壓縮檔，1表示zip檔位於MFP app的安卓asset目錄中。第四個參數是一個布林值，表示該聲音是否需要重複演奏，這是一個缺省參數，缺省值是false。第五個參數是一個從0到1的浮點數，表示音量大小。這也是一個缺省參數，缺省值是1。第六個參數是一個布爾值，表示是否無論如何都強制生產一個新的多媒體演奏器。 這也是一個缺省參數，缺省值是false。
 @end
Endh
::mfp::graph_lib::plot_math::plot_2d_curves 6 TRUE
Help
 @language:
 Function plot_2d_curves plots at most 1024 2D-curves in one chart. It has the following parameters: 1. chart name (i.e. chart file name); 2. chart title; 3. X axis title; 4. Y axis title; 5.  chart's background color; 6. show grid or not (string "true" or string "false"); 7. curve title; 8. curve point color; 9. curve point shape; 10. curve point size; 11. curve line color; 12. curve line pattern; 13. curve line size; 14. internal variable's name (generally it is "t"); 15. internal variable's value starts from; 16. internal variable's value ends at; 17. internal variable's value changing interval; 18. X's expression (based on the internal variable); 19. Y's expression (based on the internal variable)... Note that every new curve needs additional 13 parameters (i.e. parameters 7 to 19). At most 1024 curves can be included. Also note that at this moment chart's background color, curve point size, curve line color and curve line pattern are not realized yet. And curve line size only has two values, i.e. zero means no connection line and non-zero means with connection line. An example of this function is plot_2d_curves("chart 3", "3rd chart", "x", "y", "black", "true", "cv1", "blue", "x", 2, "blue", "solid", 1, "t", -5, 5, 0.1, "t", "t**2/2.5 - 4*t + 6", "cv2", "red", "square", 4, "square", "solid", 1, "t", -10, 10, 0.1, "5*sin(t)", "10*cos(t)") .
 @end
 @language:simplified_chinese
 函数plot_2d_curves绘制由最多1024条2-D曲线所构成的图像。其包括以下参数：1.图像名字（图像文件名）；2.图像标题；3.X轴标题；4.Y轴标题；5.图像背景色；6.是否显示网格（注意这个参数是一个字符串，其值为"true"或者"false"）；7.曲线标题；8.曲线数据点颜色；9.曲线数据点形状；10.曲线数据点大小；11.曲线连接线颜色；12.曲线连接线类型；13.曲线连接线粗细；14.内部变量的名字（通常为"t"）；15.内部变量的起始位置；16.内部变量的终止位置；17.内部变量的每一步变化间隔；18.基于内部变量的X的表达式；19.基于内部变量的Y的表达式...。其中，每增加一条新的曲线，需要添加13个参数（也就是参数7到19），最多定义1024条曲线。另外要注意图像背景色，曲线数据点的大小，曲线连接线颜色以及曲线连接线类型还没有被实现，曲线连接线粗细仅支持0（意味着没有连接线连接数据点）和非0（意味着有连接线连接数据点）。本函数的一个例子为：plot_2d_curves("chart 3", "3rd chart", "x", "y", "black", "true", "cv1", "blue", "x", 2, "blue", "solid", 1, "t", -5, 5, 0.1, "t", "t**2/2.5 - 4*t + 6", "cv2", "red", "square", 4, "square", "solid", 1, "t", -10, 10, 0.1, "5*sin(t)", "10*cos(t)") 。
 @end
 @language:traditional_chinese
 函數程式plot_2d_curves繪制由最多1024條2-D曲線所構成的圖像。其包括以下參量：1.圖像名字（圖像檔案名）；2.圖像標題；3.X軸標題；4.Y軸標題；5.圖像背景色；6.是否顯示網格（註意這個參數是一個字串，其值為"true"或者"false"）；7.曲線標題；8.曲線數據點顏色；9.曲線數據點形狀；10.曲線數據點大小；11.曲線連接線顏色；12.曲線連接線類型；13.曲線連接線粗細；14.內部變數的名字（通常為"t"）；15.內部變數的起始位置；16.內部變數的終止位置；17.內部變數的每一步變化間隔；18.基於內部變數的X的表達式；19.基於內部變數的Y的表達式...。其中，每增加一條新的曲線，需要添加13個參量（也就是參量7到19），最多定義1024條曲線。另外要註意圖像背景色，曲線數據點的大小，曲線連接線顏色以及曲線連接線類型還沒有被實現，曲線連接線粗細僅支持0（意味著沒有連接線連接數據點）和非0（意味著有連接線連接數據點）。本函數程式的一個例子為：plot_2d_curves("chart 3", "3rd chart", "x", "y", "black", "true", "cv1", "blue", "x", 2, "blue", "solid", 1, "t", -5, 5, 0.1, "t", "t**2/2.5 - 4*t + 6", "cv2", "red", "square", 4, "square", "solid", 1, "t", -10, 10, 0.1, "5*sin(t)", "10*cos(t)") 。
 @end
Endh
::mfp::graph_lib::plot_math::plot_3d_surfaces 5 TRUE
Help
 @language:
 Function plot_3d_surfaces plots at most 1024 3D-surfaces in one chart. It has the following parameters: 1. chart name (i.e. chart file name); 2. chart title; 3. X axis title; 4. Y axis title; 5. Z axis title; 6. curve title; 7. grid or not (a boolean type. If false, a filled surface will be drawn); 8. front face color at minimum z value; 9. back face color at minimum z value; 10. minimum z value (null means automatically determined by software); 11. front face color at maximum z value; 12. back face color at maximum z value; 13. maximum z value (null means automatically determined by software); 14. first internal variable name (generally it is "u"); 15. first internal variable's value starts from; 16. first internal variable's value ends at; 17. first internal variable's value changing interval; 18. second internal variable name (generally it is "v"); 19. second internal variable's value starts from; 20. second internal variable's value ends at; 21. second internal variable's value changing interval; 22. X's expression (based on the two internal variables); 23. Y's expression (based on the two internal variables); 24. Z's expression (based on the two internal variables); ... Note that every new curve needs additional 19 parameters (i.e. parameters 6 to 24). At most 1024 curves can be included. A Example of this function is plot_3D_surfaces("chartI", "first chart", "x", "y", "z", "Curve1", true, "red", "cyan", -0.5, "green", "yellow", null, "u", 0, pi, pi/8, "v", -pi/2, pi/2, 0, "sin(u)*cos(v)", "sin(u)*sin(v)", "cos(u)") .
 @end
 @language:simplified_chinese
 函数plot_3d_surfaces绘制由最多1024条3-D曲面所构成的图像。其包括以下参数：1.图像名字（图像文件名）；2.图像标题；3.X轴标题；4.Y轴标题；5.Z轴标题；6.曲线标题；7.是网格还是填充表面（这是一个布尔值，true是网格，false是填充表面）；8.z值最小的时候的正面的颜色；9.z值最小的时候的反面的颜色；10.最小的z值（注意如果是null，意味着让软件自己找到最小的z值）；11.z值最大的时候的正面的颜色；12.z值最大的时候的反面的颜色；13.最大的z值（注意如果是null，意味着让软件自己找到最大的z值）；14.第一个内部变量的名字（通常为"u"）；15.第一个内部变量的起始值；16.第一个内部变量的终止值；17.第一个内部变量的每一步变化的间隔（0意味着间隔由软件决定）；18.第二个内部变量的名字（通常为"v"）；19.第二个内部变量的起始值；20.第二个内部变量的终止值；21.第二个内部变量的每一步变化的间隔（0意味着间隔由软件决定）；22.基于前述两个内部变量的X的表达式；23.基于前述两个内部变量的Y的表达式；24.基于前述两个内部变量的Z的表达式；...。其中，每增加一条新的曲面，需要添加19个参数（也就是参数6到24），最多定义1024条曲面。该函数的一个例子为：plot_3D_surfaces("chartI", "first chart", "x", "y", "z", "Curve1", false, "red", "cyan", -0.5, "green", "yellow", null, "u", 0, pi, pi/8, "v", -pi/2, pi/2, 0, "sin(u)*cos(v)", "sin(u)*sin(v)", "cos(u)")　。
 @end
 @language:traditional_chinese
 函數程式plot_3d_surfaces繪制由最多1024條3-D曲面所構成的圖像。其包括以下參數：1.圖像名字（圖像檔案名）；2.圖像標題；3.X軸標題；4.Y軸標題；5.Z軸標題；6.曲線標題；7.是網格還是填充表面（這是一個布爾值，true是網格，false是填充表面）；8.z值最小的時候的正面的顏色；9.z值最小的時候的反面的顏色；10.最小的z值（註意如果是null，意味著讓軟體自己找到最小的z值）；11.z值最大的時候的正面的顏色；12.z值最大的時候的反面的顏色；13.最大的z值（註意如果是null，意味著讓軟體自己找到最大的z值）；14.第一個內部變數的名字（通常為"u"）；15.第一個內部變數的起始值；16.第一個內部變數的終止值；17.第一個內部變數的每一步變化的間隔（0意味著間隔由軟體決定）；18.第二個內部變數的名字（通常為"v"）；19.第二個內部變數的起始值；20.第二個內部變數的終止值；21.第二個內部變數的每一步變化的間隔（0意味著間隔由軟體決定）；22.基於前述兩個內部變數的X的表達式；23.基於前述兩個內部變數的Y的表達式；24.基於前述兩個內部變數的Z的表達式；...。其中，每增加一條新的曲面，需要添加19個參數（也就是參數6到24），最多定義1024條曲面。該函數程式的一個例子為：plot_3D_surfaces("chartI", "first chart", "x", "y", "z", "Curve1", false, "red", "cyan", -0.5, "green", "yellow", null, "u", 0, pi, pi/8, "v", -pi/2, pi/2, 0, "sin(u)*cos(v)", "sin(u)*sin(v)", "cos(u)")　。
 @end
Endh
::mfp::graph_lib::plot_math::plot_multi_rangle 2 TRUE
Help
 @language:
 plot_multi_rangle(at least 2 parameters) plots a 2-dim or polar chart which includes at most 1024 curves. Parameters 1 and 2 are chart name and settings respectively. The chart settings parameter is a string like "chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6.2796950076838645;x_max:6.918480857169536;x_labels:10;y_title:y;y_min:-4.487378580559947;y_max:4.1268715788884345;y_labels:10;background_color:black;show_grid:true". Note that chart_type session should be multiXY (2D chart) or multiRangle (polar chart), and x_labels and y_labels means how many tick marks are in the x and y axises (or R axis and angle, angle tick marks are ignored) respectively. From parameter 36, every three parameters define a curve. Among the three parameters, the first describes curve settings, the second is a list of x (or R) values and the third is a list of y (or angle) values. An example of curve settings parameter is "curve_label:cv2;point_color:blue;point_style:point;point_size:1;line_color:blue;line_style:solid;line_size:1". Note that number of x should equal number of y and x and y values must be real. This function returns nothing. An example of this function is plot_multi_rangle("chart2", "chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6;x_max:6;x_labels:6;y_title:y;y_min:-4;y_max:4;y_labels:5;background_color:black;show_grid:true", "curve_label:cv2;point_color:blue;point_style:circle;point_size:3;line_color:blue;line_style:solid;line_size:1", [-5, -3, -1, 0, 1, 2, 3, 4, 5], [-3.778, -2.9793, -2.0323, -1.1132, 0.2323, 1.2348, 3.9865, 2.3450, 0.4356]) .
 @end
 @language:simplified_chinese
 plot_multi_rangle(包含>=2个参数)用于绘制2维或极坐标图像，每个图像最多包括1024条曲线。参数1为图像名字，参数2为图像设置，该参数是一个字符串，比如"chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6.2796950076838645;x_max:6.918480857169536;x_labels:10;y_title:y;y_min:-4.487378580559947;y_max:4.1268715788884345;y_labels:10;background_color:black;show_grid:true"。注意chart_type的值是multiXY（用于绘制二维图像）或者multiRangle（用于绘制极坐标图像），x_labels和y_lables分别代表x和y轴上有多少刻度标记（对于极坐标图像是R轴有多少刻度标记，幅角的刻度标记不可设）。从参数3开始，每3个参数定义一条曲线，在这3个参数中，第一个参数为曲线设置，第二个参数是包含所有x数值（或者R数值）的向量，第三个参数是包括所有y值（或者幅角值）的向量。曲线设置参数为一个字符串，比如"curve_label:cv2;point_color:blue;point_style:point;point_size:1;line_color:blue;line_style:solid;line_size:1"。另外注意x和y的每一个数值都必须为实数，x和y的数值个数必须一致。本函数不返回数值。本函数的一个例子是plot_multi_rangle("chart2", "chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6;x_max:6;x_labels:6;y_title:y;y_min:-4;y_max:4;y_labels:5;background_color:black;show_grid:true", "curve_label:cv2;point_color:blue;point_style:circle;point_size:3;line_color:blue;line_style:solid;line_size:1", [-5, -3, -1, 0, 1, 2, 3, 4, 5], [-3.778, -2.9793, -2.0323, -1.1132, 0.2323, 1.2348, 3.9865, 2.3450, 0.4356]) 。
 @end
 @language:traditional_chinese
 plot_multi_rangle(包含>=2個參數)用於繪制2維或極坐標圖像，每個圖像最多包括1024條曲線。參數1為圖像名字，參數2為圖像設置，該參數是一個字串，比如"chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6.2796950076838645;x_max:6.918480857169536;x_labels:10;y_title:y;y_min:-4.487378580559947;y_max:4.1268715788884345;y_labels:10;background_color:black;show_grid:true"。註意chart_type的值是multiXY（用於繪制二維圖像）或者multiRangle（用於繪制極坐標圖像），x_labels和y_lables分別代表x和y軸上有多少刻度標記（對於極坐標圖像是R軸有多少刻度標記，幅角的刻度標記不可設）。從參數3開始，每3個參數定義一條曲線，在這3個參數中，第一個參數為曲線設置，第二個參數是包含所有x數值（或者R數值）的向量，第三個參數是包括所有y值（或者幅角值）的向量。曲線設置參數為一個字串，比如"curve_label:cv2;point_color:blue;point_style:point;point_size:1;line_color:blue;line_style:solid;line_size:1"。另外註意x和y的每一個數值都必須為實數，x和y的數值個數必須一致。本函數程式不返回數值。本函數程式的一個例子是plot_multi_rangle("chart2", "chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6;x_max:6;x_labels:6;y_title:y;y_min:-4;y_max:4;y_labels:5;background_color:black;show_grid:true", "curve_label:cv2;point_color:blue;point_style:circle;point_size:3;line_color:blue;line_style:solid;line_size:1", [-5, -3, -1, 0, 1, 2, 3, 4, 5], [-3.778, -2.9793, -2.0323, -1.1132, 0.2323, 1.2348, 3.9865, 2.3450, 0.4356]) 。
 @end
Endh
::mfp::graph_lib::plot_math::plot_multi_xy 2 TRUE
Help
 @language:
 plot_multi_xy(at least 2 parameters) plots a 2-dim or polar chart which includes at most 1024 curves. Parameters 1 and 2 are chart name and settings respectively. The chart settings parameter is a string like "chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6.2796950076838645;x_max:6.918480857169536;x_labels:10;y_title:y;y_min:-4.487378580559947;y_max:4.1268715788884345;y_labels:10;background_color:black;show_grid:true". Note that chart_type session should be multiXY (2D chart) or multiRangle (polar chart), and x_labels and y_labels means how many tick marks are in the x and y axises (or R axis and angle, angle tick marks are ignored) respectively. From parameter 36, every three parameters define a curve. Among the three parameters, the first describes curve settings, the second is a list of x (or R) values and the third is a list of y (or angle) values. An example of curve settings parameter is "curve_label:cv2;point_color:blue;point_style:point;point_size:1;line_color:blue;line_style:solid;line_size:1". Note that number of x should equal number of y and x and y values must be real. This function returns nothing. An example of this function is plot_multi_xy("chart2", "chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6;x_max:6;x_labels:6;y_title:y;y_min:-4;y_max:4;y_labels:5;background_color:black;show_grid:true", "curve_label:cv2;point_color:blue;point_style:circle;point_size:3;line_color:blue;line_style:solid;line_size:1", [-5, -3, -1, 0, 1, 2, 3, 4, 5], [-3.778, -2.9793, -2.0323, -1.1132, 0.2323, 1.2348, 3.9865, 2.3450, 0.4356]) .
 @end
 @language:simplified_chinese
 plot_multi_xy(包含>=2个参数)用于绘制2维或极坐标图像，每个图像最多包括1024条曲线。参数1为图像名字，参数2为图像设置，该参数是一个字符串，比如"chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6.2796950076838645;x_max:6.918480857169536;x_labels:10;y_title:y;y_min:-4.487378580559947;y_max:4.1268715788884345;y_labels:10;background_color:black;show_grid:true"。注意chart_type的值是multiXY（用于绘制二维图像）或者multiRangle（用于绘制极坐标图像），x_labels和y_lables分别代表x和y轴上有多少刻度标记（对于极坐标图像是R轴有多少刻度标记，幅角的刻度标记不可设）。从参数3开始，每3个参数定义一条曲线，在这3个参数中，第一个参数为曲线设置，第二个参数是包含所有x数值（或者R数值）的向量，第三个参数是包括所有y值（或者幅角值）的向量。曲线设置参数为一个字符串，比如"curve_label:cv2;point_color:blue;point_style:point;point_size:1;line_color:blue;line_style:solid;line_size:1"。另外注意x和y的每一个数值都必须为实数，x和y的数值个数必须一致。本函数不返回数值。本函数的一个例子是plot_multi_xy("chart2", "chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6;x_max:6;x_labels:6;y_title:y;y_min:-4;y_max:4;y_labels:5;background_color:black;show_grid:true", "curve_label:cv2;point_color:blue;point_style:circle;point_size:3;line_color:blue;line_style:solid;line_size:1", [-5, -3, -1, 0, 1, 2, 3, 4, 5], [-3.778, -2.9793, -2.0323, -1.1132, 0.2323, 1.2348, 3.9865, 2.3450, 0.4356]) 。
 @end
 @language:traditional_chinese
 plot_multi_xy(包含>=2個參數)用於繪制2維或極坐標圖像，每個圖像最多包括1024條曲線。參數1為圖像名字，參數2為圖像設置，該參數是一個字串，比如"chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6.2796950076838645;x_max:6.918480857169536;x_labels:10;y_title:y;y_min:-4.487378580559947;y_max:4.1268715788884345;y_labels:10;background_color:black;show_grid:true"。註意chart_type的值是multiXY（用於繪制二維圖像）或者multiRangle（用於繪制極坐標圖像），x_labels和y_lables分別代表x和y軸上有多少刻度標記（對於極坐標圖像是R軸有多少刻度標記，幅角的刻度標記不可設）。從參數3開始，每3個參數定義一條曲線，在這3個參數中，第一個參數為曲線設置，第二個參數是包含所有x數值（或者R數值）的向量，第三個參數是包括所有y值（或者幅角值）的向量。曲線設置參數為一個字串，比如"curve_label:cv2;point_color:blue;point_style:point;point_size:1;line_color:blue;line_style:solid;line_size:1"。另外註意x和y的每一個數值都必須為實數，x和y的數值個數必須一致。本函數程式不返回數值。本函數程式的一個例子是plot_multi_xy("chart2", "chart_type:multiXY;chart_title:1 chart;x_title:x;x_min:-6;x_max:6;x_labels:6;y_title:y;y_min:-4;y_max:4;y_labels:5;background_color:black;show_grid:true", "curve_label:cv2;point_color:blue;point_style:circle;point_size:3;line_color:blue;line_style:solid;line_size:1", [-5, -3, -1, 0, 1, 2, 3, 4, 5], [-3.778, -2.9793, -2.0323, -1.1132, 0.2323, 1.2348, 3.9865, 2.3450, 0.4356]) 。
 @end
Endh
::mfp::graph_lib::plot_math::plot_multi_xyz 2 TRUE
Help
 @language:
 plot_multi_xyz(at least 2 parameters) plots a 3-dim chart which includes at most 1024 surface curves. Parameters 1 and 2 are chart name and settings respectively. The chart settings parameter is a string like "chart_type:multiXYZ;chart_title:This is a graph;x_title:x axis;x_min:-24.43739154366772;x_max:24.712391543667717;x_labels:10;y_title:Y axis;y_min:-251.3514430737091;y_max:268.95144307370913;y_labels:10;z_title:Z axis;z_min:-1.6873277335234405;z_max:1.7896774628184482;z_labels:10". Note that chart_type session should always be multiXYZ, and x_labels, y_labels and z_labels means how many tick marks are in the x, y and z axises respectively. From parameter 3, every four parameters define a curve. Among the four parameters, the first describes curve settings, the second is an array of x values, the third is an array of y values and the fourth is an array of z values. An example of curve settings parameter is "curve_label:cv2;is_grid:true;min_color:blue;min_color_1:cyan;min_color_value:-2.0;max_color:white;max_color_1:yellow;max_color_value:2.0". Note that the dimension of x, y and z arrays should equal and they should only include real value elements. This function returns nothing. An example of this function is plot_multi_xyz("chartII", "chart_type:multiXYZ;chart_title:This is a graph;x_title:x;x_min:-5;x_max:5;x_labels:6;y_title:Y;y_min:-6;y_max:6;y_labels:3;z_title:Z;z_min:-3;z_max:1;z_labels:4", "curve_label:cv1;min_color:blue;min_color_1:green;max_color:yellow;max_color_1:red", [[-4, -2, 0, 2, 4],[-4, -2, 0, 2, 4],[-4, -2, 0, 2, 4]], [[-5, -5, -5, -5, -5], [0, 0, 0, 0, 0], [-5, -5, -5, -5, -5]], [[-2.71, -2.65, -2.08, -1.82, -1.77], [-2.29, -2.36, -1.88, -1.45, -1.01], [-1.74, -1.49, -0.83, -0.17, 0.44]]) .
 @end
 @language:simplified_chinese
 plot_multi_xyz(包含>=2个参数)用于绘制3维图像，每个图像最多包括1024条曲面。参数1为图像名字，参数2为图像设置，图像设置参数是一个字符串，比如"chart_type:multiXYZ;chart_title:This is a graph;x_title:x axis;x_min:-24.43739154366772;x_max:24.712391543667717;x_labels:10;y_title:Y axis;y_min:-251.3514430737091;y_max:268.95144307370913;y_labels:10;z_title:Z axis;z_min:-1.6873277335234405;z_max:1.7896774628184482;z_labels:10"。需要注意的是chart_type的值必须是multiXYZ，x_labels，y_labels和z_lables分别代表x，y和z轴上有多少刻度标记。从参数3开始，每4个参数定义一条曲线，在这4个参数中，第一个参数为曲线设置，第二个参数是包含所有x数值的矩阵，第三个参数是包括所有y值的矩阵，第四个参数是包括所有z值的矩阵。曲线设置参数为一个字符串，比如"curve_label:cv2;is_grid:true;min_color:blue;min_color_1:cyan;min_color_value:-2.0;max_color:white;max_color_1:yellow;max_color_value:2.0"。另外注意x，y和z的每一个数值都必须为实数，x，y和z的矩阵的尺寸必须一致。本函数不返回数值。本函数的一个例子为：plot_multi_xyz("chartII", "chart_type:multiXYZ;chart_title:This is a graph;x_title:x;x_min:-5;x_max:5;x_labels:6;y_title:Y;y_min:-6;y_max:6;y_labels:3;z_title:Z;z_min:-3;z_max:1;z_labels:4", "curve_label:cv1;min_color:blue;min_color_1:green;max_color:yellow;max_color_1:red", [[-4, -2, 0, 2, 4],[-4, -2, 0, 2, 4],[-4, -2, 0, 2, 4]], [[-5, -5, -5, -5, -5], [0, 0, 0, 0, 0], [-5, -5, -5, -5, -5]], [[-2.71, -2.65, -2.08, -1.82, -1.77], [-2.29, -2.36, -1.88, -1.45, -1.01], [-1.74, -1.49, -0.83, -0.17, 0.44]]) 。
 @end
 @language:traditional_chinese
 plot_multi_xyz(包含>=2個參數)用於繪制3維圖像，每個圖像最多包括1024條曲面。參數1為圖像名字，參數2為圖像設置，圖像設置參數是一個字串，比如"chart_type:multiXYZ;chart_title:This is a graph;x_title:x axis;x_min:-24.43739154366772;x_max:24.712391543667717;x_labels:10;y_title:Y axis;y_min:-251.3514430737091;y_max:268.95144307370913;y_labels:10;z_title:Z axis;z_min:-1.6873277335234405;z_max:1.7896774628184482;z_labels:10"。需要註意的是chart_type的值必須是multiXYZ，x_labels，y_labels和z_lables分別代表x，y和z軸上有多少刻度標記。從參數3開始，每4個參數定義一條曲線，在這4個參數中，第一個參數為曲線設置，第二個參數是包含所有x數值的陣列，第三個參數是包括所有y值的陣列，第四個參數是包括所有z值的陣列。曲線設置參數為一個字串，比如"curve_label:cv2;is_grid:true;min_color:blue;min_color_1:cyan;min_color_value:-2.0;max_color:white;max_color_1:yellow;max_color_value:2.0"。另外註意x，y和z的每一個數值都必須為實數，x，y和z的陣列的尺寸必須一致。本函數程式不返回數值。本函數程式的一個例子為：plot_multi_xyz("chartII", "chart_type:multiXYZ;chart_title:This is a graph;x_title:x;x_min:-5;x_max:5;x_labels:6;y_title:Y;y_min:-6;y_max:6;y_labels:3;z_title:Z;z_min:-3;z_max:1;z_labels:4", "curve_label:cv1;min_color:blue;min_color_1:green;max_color:yellow;max_color_1:red", [[-4, -2, 0, 2, 4],[-4, -2, 0, 2, 4],[-4, -2, 0, 2, 4]], [[-5, -5, -5, -5, -5], [0, 0, 0, 0, 0], [-5, -5, -5, -5, -5]], [[-2.71, -2.65, -2.08, -1.82, -1.77], [-2.29, -2.36, -1.88, -1.45, -1.01], [-1.74, -1.49, -0.83, -0.17, 0.44]]) 。
 @end
Endh
::mfp::graph_lib::plot_math::plot_polar_curves 6 TRUE
Help
 @language:
 Function plot_polar_curves plots at most 1024 polar-curves in one chart. It has the following parameters: 1. chart name (i.e. chart file name); 2. chart title; 3. R axis title; 4. angle title (actually angle title is never shown); 5. chart's background color; 6. show grid or not (string "true" or string "false"); 7. curve title; 8. curve point color; 9. curve point shape; 10. curve point size; 11. curve line color; 12. curve line pattern; 13. curve line size; 14. internal variable's name (generally it is "t"); 15. internal variable's value starts from; 16. internal variable's value ends at; 17. internal variable's value changing interval; 18. R's expression (based on the internal variable); 19. angle's expression (based on the internal variable)... Note that every new curve needs additional 13 parameters (i.e. parameters 7 to 19). At most 1024 curves can be included. Also note that at this moment chart's background color, curve point size, curve line color and curve line pattern are not realized yet. And curve line size only has two values, i.e. zero means no connection line and non-zero means with connection line. An example of this function is plot_polar_curves("chart 3", "3rd chart", "R", "angle", "black", "false", "cv1", "blue", "x", 2, "blue", "solid", 1, "t", -5, 5, 0.1, "t", "t**2/2.5 - 4*t + 6", "cv2", "red", "square", 4, "square", "solid", 1, "t", -10, 10, 0.1, "5*sin(t)", "10*cos(t)") .
 @end
 @language:simplified_chinese
 函数plot_polar_curves绘制由最多1024条极坐标曲线所构成的图像。其包括以下参数：1.图像名字（图像文件名）；2.图像标题；3.幅度轴标题；4.幅角标题（需要注意幅角标题在图中实际上不会被显示）；5.图像背景色；6.是否显示网格（注意这个参数是一个字符串，其值为"true"或者"false"）；7.曲线标题；8.曲线数据点颜色；9.曲线数据点形状；10.曲线数据点大小；11.曲线连接线颜色；12.曲线连接线类型；13.曲线连接线粗细；14.内部变量的名字（通常为"t"）；15.内部变量的起始位置；16.内部变量的终止位置；17.内部变量的每一步变化间隔；18.基于内部变量的幅度的表达式；19.基于内部变量的幅角的表达式...。其中，每增加一条新的曲线，需要添加13个参数（也就是参数7到19），最多定义1024条曲线。另外要注意图像背景色，曲线数据点的大小，曲线连接线颜色以及曲线连接线类型还没有被实现，曲线连接线粗细仅支持0（意味着没有连接线连接数据点）和非0（意味着有连接线连接数据点）。本函数的一个例子为：plot_polar_curves("chart 3", "3rd chart", "R", "angle", "black", "false", "cv1", "blue", "x", 2, "blue", "solid", 1, "t", -5, 5, 0.1, "t", "t**2/2.5 - 4*t + 6", "cv2", "red", "square", 4, "square", "solid", 1, "t", -10, 10, 0.1, "5*sin(t)", "10*cos(t)") 。
 @end
 @language:traditional_chinese
 函數程式plot_polar_curves繪制由最多1024條極坐標曲線所構成的圖像。其包括以下參量：1.圖像名字（圖像檔案名）；2.圖像標題；3.幅度軸標題；4.幅角標題（需要註意幅角標題在圖中實際上不會被顯示）；5.圖像背景色；6.是否顯示網格（註意這個參數是一個字串，其值為"true"或者"false"）；7.曲線標題；8.曲線數據點顏色；9.曲線數據點形狀；10.曲線數據點大小；11.曲線連接線顏色；12.曲線連接線類型；13.曲線連接線粗細；14.內部變數的名字（通常為"t"）；15.內部變數的起始位置；16.內部變數的終止位置；17.內部變數的每一步變化間隔；18.基於內部變數的幅度的表達式；19.基於內部變數的幅角的表達式...。其中，每增加一條新的曲線，需要添加13個參量（也就是參量7到19），最多定義1024條曲線。另外要註意圖像背景色，曲線數據點的大小，曲線連接線顏色以及曲線連接線類型還沒有被實現，曲線連接線粗細僅支持0（意味著沒有連接線連接數據點）和非0（意味著有連接線連接數據點）。本函數程式的一個例子為：plot_polar_curves("chart 3", "3rd chart", "R", "angle", "black", "false", "cv1", "blue", "x", 2, "blue", "solid", 1, "t", -5, 5, 0.1, "t", "t**2/2.5 - 4*t + 6", "cv2", "red", "square", 4, "square", "solid", 1, "t", -10, 10, 0.1, "5*sin(t)", "10*cos(t)") 。
 @end
Endh
::mfp::math::log_exp::pow 2 FALSE
Help
 @language:
 pow(x,y) returns y powers of x. Note that both x and y can be either a real or a complex number. If there are more than one results of pow(x,y), return the first result.
 @end
 @language:simplified_chinese
 pow(x,y)返回x的y次方，注意x和y可以为实数，可以为虚数。如果结果有多个值，返回第一个值。
 @end
 @language:traditional_chinese
 pow(x,y)返回x的y次方，註意x和y可以為實數，可以為虛數。如果結果有多個值，返回第一個值。
 @end
Endh
::mfp::math::log_exp::pow 3 FALSE
Help
 @language:
 pow(x,y,z) returns a list including first z values of y powers of x. If y powers of x has less than z values, returns all the values. Note that y must be a real number while x can be either a real or a complex number. Z must be a positive integer.
 @end
 @language:simplified_chinese
 pow(x,y,z)返回包含x的y次方的前z个值组成的一个向量，如果x的y次方只有少于z个值，返回所有值。注意y必须为实数，x可以为实数，可以为虚数，z必须为正整数。
 @end
 @language:traditional_chinese
 pow(x,y,z)返回包含x的y次方的前z個值組成的一個向量，如果x的y次方只有少於z個值，返回所有值。注意y必須為實數，x可以為實數，可以為虛數，z必須為正整數。
 @end
Endh
::mfp::io::console::print 1 FALSE
Help
 @language:
 print(x) prints the value of x to output, x can be any value type.
 @end
 @language:simplified_chinese
 print(x)向输出端打印任意数据类型x的值。
 @end
 @language:traditional_chinese
 print(x)向輸出端打印任意數據類型x的值。
 @end
Endh
::mfp::io::file::print_file_list 1 FALSE
Help
 @language:
 print_file_list(path) (alias ls(path) or dir(path)) works like ls command in Linux or dir command in Windows. It print the information for the file or all the files in folder at string based path. It returns the number of entries that printed. If the path does not corresponds to an existing file or folder, it returns -1. Note that path is optional. By default it is current folder ("."). Examples are dir() (Windows) and ls("../testfile_copy.txt") (Android).
 @end
 @language:simplified_chinese
 print_file_list(path) (alias ls(path) or dir(path))函数和Windows平台上的dir命令以及Linux平台上的ls命令类似。它打印出位于字符串path路径的文件或者目录中的所有子文件和子目录的信息。它返回打印的条目的个数。如果不存在一个文件或者目录对应于path路径，它返回-1。注意参数path是可以省略的。它的缺省值是当前目录。例子包括dir() (Windows)和ls("../testfile_copy.txt") (Android)。
 @end
 @language:traditional_chinese
 print_file_list(path) (alias ls(path) or dir(path))函數程式和Windows平臺上的dir命令以及Linux平臺上的ls命令類似。它打印出位於字串path路徑的档案或者目錄中的所有子档案和子目錄的信息。它返回打印的條目的個數。如果不存在一個檔案或者目錄對應於path路徑，它返回-1。註意參數path是可以省略的。它的缺省值是當前目錄。例子包括dir("c:\\temp\\try1") (Windows)和ls("../testfile_copy.txt") (Android)。
 @end
Endh
::mfp::io::console::print_line 1 FALSE
Help
 @language:
 print_line(x) prints the value of x to output and then starts a new line, x can be any value type and is optional. By default its value is "".
 @end
 @language:simplified_chinese
 print_line(x)向输出端打印任意数据类型x的值然后再起一行。注意x是一个可选参数，它的缺省值是空字符串""。
 @end
 @language:traditional_chinese
 print_line(x)向輸出端打印任意數據類型x的值然後再起一行。注意x是一個可選參數，它的缺省值是空字元串""。
 @end
Endh
::mfp::io::console::printf 1 TRUE
Help
 @language:
 printf(format_string, ...), sprintf(format_string, ...) and fprintf(fd, format_string, ...) work like corresponding C/C++ functions. Function printf prints formatted string constructed from format_string and other parameter values to output console, sprintf constructs a new string from format_string and other parameters, and returns the new string, fprintf prints the formated string from format_string and other parameter values to the text file whose id is fd. The format_string parameter supports integer (%d, %i, %x, etc), float (%e, %f, etc), character(%c), string(%s) etc. User can find detailed information for construction of a format string by reading C language manual for these functions. For example, printf("Hello world!%f", 3.14) will output "Hello world!3.140000" on the screen, sprintf("%c%d", "A", 9) returns "A9" (MFP does not support single character type, so single character is stored as a one-char string).
 @end
 @language:simplified_chinese
 printf(format_string, ...)，sprintf(format_string, ...)和fprintf(fd, format_string, ...)和C/C++中的对应函数工作方式相似。这些函数通过format_string和其后的数值参数构造出一个新的字符串，printf函数将字符串打印到标准输出，sprintf函数将字符串作为返回值返回，fprintf函数则将字符串输出到文件号为fd的文本文件。字符串format_string支持输入整数（%d、%i、%x等），浮点数（%e、%f等），字符和字符串（%c和%s）等等。用户可以在C语言的帮助文档中找到format_string的构造方法。例如，printf("Hello world!%f", 3.14)将会打印输出"Hello world!3.140000"，而sprintf("%c%d", "A", 9)则返回"A9"（注意MFP不支持单一字符数据类型，所以单一的字符将会存储为一个只包括一个字符的字符串）。
 @end
 @language:traditional_chinese
 printf(format_string, ...)，sprintf(format_string, ...)和fprintf(fd, format_string, ...)和C/C++中的对应函数程式工作方式相似。这些函数程式通过format_string和其后的数值参数构造出一个新的字串，printf将字串打印到标准输出，sprintf将字串作为返回值返回，fprintf则将字串输出到档案号为fd的文本档案。字串format_string支持输入整数（%d、%i、%x等），浮点数（%e、%f等），字符和字串（%c和%s）等等。用户可以在C语言的帮助手册中找到format_string的构造方法。例如，printf("Hello world!%f", 3.14)将会打印输出"Hello world!3.140000"，而sprintf("%c%d", "A", 9)则返回"A9"（注意MFP不支持单一字符数据类型，所以单一的字符将会存储为一个只包括一个字符的字串）。
 @end
Endh
::mfp::math::stat_stoch::product_over 3 FALSE
Help
 @language:
 product_over(x, y, z) calculates the product of string based expression x over integer value y to z. Note that y and z are also string based value, y should be written like "a=10" (where a is the variable) and z should be like "20". For example, product_over("x+1", "x=1", "10").
 @end
 @language:simplified_chinese
 函数product_over(x, y, z)计算基于字符串的表达式x中的变量取值从整数y逐步变化到整数z的值的乘积。y和z必须是字符串的形式，其中，y必须写成一个赋值表达式，比如"a=10"，这里，a是变量名。一个函数的例子为product_over("x+1", "x=1", "10")。
 @end
 @language:traditional_chinese
 函數程式product_over(x, y, z)計算基於字串的表達式x中的變數取值從整數y逐步變化到整數z的值的乘積。y和z必須是字串的形式，其中，y必須寫成一個賦值表達式，比如"a=10"，這裏，a是變數名。本函數程式的一個例子為product_over("x+1", "x=1", "10")。
 @end
Endh
::mfp::graph_lib::event::pull_event 1 FALSE
Help
 @language:
 pull_event(display) pull an input event (e.g. mouse or touch pad event) out from screen display's event list. If there is no event, or the display is not a screen display but an image display, it returns Null. Otherwise, it returns the event.
 @end
 @language:simplified_chinese
 pull_event(display)从screen display的输入事件（比如，鼠标事件或者触摸屏的手势事件）序列中按顺序取走一个事件。如果没有输入事件，或者不是screen display而是image display，它返回Null，否则返回输入事件。
 @end
 @language:traditional_chinese
 pull_event(display)從screen display的輸入事件（比如，滑鼠事件或者觸摸屏的手勢事件）序列中按順序取走一個事件。如果沒有輸入事件，或者不是screen display而是image display，它返回Null，否則返回輸入事件。
 @end
Endh
::mfp::io::file::pwd 0 FALSE
Help
 @language:
 get_working_dir() (with alias pwd()) return string based current directory.
 @end
 @language:simplified_chinese
 get_working_dir()（别名pwd()）返回基于字符串的当前路径。
 @end
 @language:traditional_chinese
 get_working_dir()（別名pwd()）返回基於字串的當前路徑。
 @end
Endh
::mfp::math::stat_stoch::rand 0 FALSE
Help
 @language:
 rand() function returns a random float number between 0 (inclusive) and 1 (exclusive).
 @end
 @language:simplified_chinese
 rand()函数返回一个大于等于0小于1的随机浮点数。
 @end
 @language:traditional_chinese
 rand()函數返回一個大於等於0小於1的隨機浮點數。
 @end
Endh
::mfp::math::matrix::rank 1 FALSE
Help
 @language:
 rank(matrix) returns the rank of a matrix. For example rank([[1,2],[2,4]]) returns 1.
 @end
 @language:simplified_chinese
 rank(matrix)返回矩阵的秩。比如，rank([[1,2],[2,4]])将返回1。
 @end
 @language:traditional_chinese
 rank(matrix)返回矩陣的秩。比如，rank([[1,2],[2,4]])將返回1。
 @end
Endh
::mfp::io::file::read_file 2 FALSE
Help
 @language:
 Function read_file reads a file and returns a string or a binary array which is the content of the file. It has two parameters. The first parameter is the file path. The second parameter is reading mode. Reading mode is a string. "b" or "B" means to read the file into a binary array. Otherwise it means to treat the file as text and return a string. The second parameter is optional. By default it returns a string .
 @end
 @language:simplified_chinese
 函数read_file读入一个文件并返回该文件的内容。它有两个参数。第一个参数是文件的路径。第二个参数是读入模式。读入模式是一个字符串。如果读入模式是"b"或者"B"意味着以以二进制方式读入，该函数会返回一个二进制数组。如果是其它字符串，则意味着以文本方式读入，该函数会返回一个字符串。第二个参数可以省略。在第二个参数缺省时本函数以文本方式读入文件并返回字符串 。
 @end
 @language:traditional_chinese
 函數read_file讀入一個文件並返回該文件的內容。它有兩個參數。第一個參數是文件的路徑。第二個參數是讀入模式。讀入模式是一個字符串。如果讀入模式是"b"或者"B"意味著以以二進制方式讀入，該函數會返回一個二進制數組。如果是其它字符串，則意味著以文本方式讀入，該函數會返回一個字符串。第二個參數可以省略。在第二個參數缺省時本函數以文本方式讀入文件並返回字符串 。
 @end
Endh
::mfp::math::complex::real 1 FALSE
Help
 @language:
 real(x) returns real part of complex value x.
 @end
 @language:simplified_chinese
 real(x)返回复数x的实部。
 @end
 @language:traditional_chinese
 real(x)返回復數x的實部。
 @end
Endh
::mfp::multimedia::webrtc_lib::receive_rtc_mmedia_message 1 FALSE
Help
 @language:
 This function retrieves a web RTC message. Note that web RTC here is the web RTC library for voice and video communication, not the same thing as the WEBRTC protocol for data communication. It has only one parameter which is the expiry time. If this parameter is a positive value, this function blocks and waits for the number of milliseconds. If this parameter is 0, this function returns immediately. Otherwise, this function waits indefinitely until a message is available. If after waiting no message is available, this function returns null. Otherwise, it returns a four element array whose first element is message's destination peer connection Id, second element is RTC session Id, third element is message type and last element is message content. If this message is a RTC signal, message type should be "signal" and message content should be a Json string whose "type" field is signal type, i.e. "offer", "answer" or "candidate"; and, if signal type is "offer" or "answer", "sdp" field is sdp content. If this message is a peer connection event, message type should be "pc" and message content is a Json based string whose "type" field is peer connection event type, e.g. "ice_connection_change"; and "content" field is string based content of the event.
 @end
 @language:simplified_chinese
 此函数取回一个web RTC消息。注意此处的web RTC是指的用于支持声音和视频通信的web RTC函数库，而不是用于支持数据通信的WEBRTC协议栈。本函数只有一个参数，就是等待的时间。如果该参数是一个正数，则代表等待的毫秒数。如果该参数是0，函数立即返回。如果是一个负数，函数会阻塞等待直到有消息到来。如果在等待超时后仍然没有消息到来，则返回null。如果函数取回了一个合法的消息，则该函数的返回值是一个四个元素的数组。第一个元素是消息的目标peer connection对象的id。第二个元素是当前RTC会话的id。第三个元素是消息的类型。最后一个元素是消息的内容。如果消息是RTC信令，消息的类型则是"signal"，而消息的内容则是一个Json字符串。该Json字符串的"type"域值是信令的类型，也就是"offer"，"answer"或者"candidate"；如果信令的类型是"offer"或者"answer"，则该Json字符串的"sdp"域值是SDP的内容。如果消息是peer connection的事件，消息的类型则是"pc"，而消息的内容则是一个Json字符串。该Json字符串的"type"域值是事件的类型，比如"ice_connection_change"；而"content"域值则是基于字符的事件内容。
 @end
 @language:traditional_chinese
 此函數取回一個web RTC消息。註意此處的web RTC是指的用於支持聲音和視頻通信的web RTC函數庫，而不是用於支持數據通信的WEBRTC協議棧。本函數只有一個參數，就是等待的時間。如果該參數是一個正數，則代表等待的毫秒數。如果該參數是0，函數立即返回。如果是一個負數，函數會阻塞等待直到有消息到來。如果在等待超時後仍然沒有消息到來，則返回null。如果函數取回了一個合法的消息，則該函數的返回值是一個四個元素的數組。第一個元素是消息的目標peer connection對象的id。第二個元素是當前RTC會話的id。第三個元素是消息的類型。最後一個元素是消息的內容。如果消息是RTC信令，消息的類型則是"signal"，而消息的內容則是一個Json字符串。該Json字符串的"type"域值是信令的類型，也就是"offer"，"answer"或者"candidate"；如果信令的類型是"offer"或者"answer"，則該Json字符串的"sdp"域值是SDP的內容。如果消息是peer connection的事件，消息的類型則是"pc"，而消息的內容則是一個Json字符串。該Json字符串的"type"域值是事件的類型，比如"ice_connection_change"；而"content"域值則是基於字符的事件內容。
 @end
Endh
::mfp::paracomp::connect::receive_sandbox_message 1 TRUE
Help
 @language:
 receive_sandbox_message function retrieves a message sent from a sandbox or main entity. Sender can be either in a remote MFP instance but directly connected to receiver's MFP instance, or in local MFP instance same as receiver. It has two working modes. The first mode uses only one parameter which is waiting time. 0 means no waiting time (i.e. immediately return the first message from message queue or NULL if no message available). Less than 0 means this function will be blocked if no message available. Otherwise this function will wait at most the number of ms defined in the parameter until a message comes, or returns NULL if still no message available after expiry. This working mode is called within a sandbox. The second working mode has two parameters. The first parameter is a local info object which is returned value of generate_interface function. The second parameter is waiting time with the same meaning as in the first working mode. This working mode is called within main entity. The first parameter tells the function which local interface (i.e. a listening address) to monitor. If a message is returned, the returned value is an array based dictionary whose "InterfaceInfo" field is sender's local interface info including protocol and sender's local address. This field is NULL if the sender and receiver are in the same MFP instance, and receiver is a sandbox and sender is receiver's main entity. "ConnectId" field is the Id of the connection which initialized sender sand box or an empty string if sender is main entity; "CallId" field is sender's call Id or 0 if sender is main entity. "TransConnectSrcLocal" is the transmission connection's sender side local address seen from sender side. A transmission connection may not be the initializing connection of the sender or receiver call sandbox. However, the two ends of a transmission connection must be located in the same MFP instance as the sender and receiver respectively. Sender call sandbox or main entity passes its message to its MFP instance, this MFP instance then gives the message to the transmission connection to transmit. After the receiver side of the transmission connection receives the message, it passes this message to its MFP instance and finally the MFP instance at the receiver side gives the message to the receiver call sandbox or main entity. Note that since a transmission is two-way, sender isn't necessarily located at the client side of the transmission connection, and receiver isn't necessarily at the server side. Similarly, "TransConnectSrcRemote" is the transmission connection's receiver side address seen from sender side; "TransConnectDestLocal" is the transmission connection's receiver side address seen from receiver side; and "TransConnectDestRemote" is the transmission connection's sender side address seen from receiver side. Note that in general, value of "TransConnectSrcRemote" should be the same as value of "TransConnectDestLocal" and "TransConnectDestRemote" should be equal to "TransConnectSrcLocal". However, this is not the case for TCPIP protocol if NAT layer exists between sender and receiver. In this case value of field "TransConnectDestRemote" is especially useful because, if the receiver is at server side of the transmission connection, it tells server side MFP the id of the transmission connection which enables reuse of this connection and sending messages back. If sender and receiver are located in the same MFP instance, values of all the four fields are empty. Finally, "Message" field gives out sender's message content. Examples of this function are receive_sandbox_message(-1) and receive_sandbox_message(local_info, -1).
 @end
 @language:simplified_chinese
 receive_sandbox_message函数返回沙盒或者MFP主进程发送的信息。发送者可能位于一个和本地有直接连接（这里指的是通过MFP的connect函数构成的连接）的远端MFP实例中（可能是一个call沙盒或者该MFP实例的主进程），也可能就是本地MFP实例的一个call沙盒或者该MFP实例的主进程。它有两种工作模式。第一种工作模式只有一个参数，也就是等待的时间。如果是0，则意味着没有等待，立即返回。如果队列中有消息，则返回队列中的第一个消息，否则，返回NULL。如果等待时间小于0，则意味着阻塞模式。也就是说如果队列中没有消息，函数将会阻塞。如果等待时间是正数，则代表等待的毫秒数。如果等待时间过去之后队列中仍然没有消息，则返回NULL。如果本函数是在沙盒中被调用，则必须采用第一种工作模式。第二种工作模式有两个参数。第一个参数为一个代表本地信息（也就是监听地址）的对象。它告诉本函数选择哪一个本地地址收取消息。该信息对象可由调用generate_interface函数返回得到。第二个参数则是等待时间，其具体意义参见第一种工作模式。如果本函数是在MFP主进程中被调用，则必须采用第二种工作模式。本函数如果返回一个合法的消息，该返回值则是一个基于数组的字典。其中，“InterfaceInfo”的字段是发送端的本地信息，包括协议和地址。如果发送端和接收端位于同一个MFP实例中，并且接收端是该MFP实例的一个call沙盒而发送端是该MFP实例的主进程，这个字段则为NULL。“ConnectId”的字段是发送端的连接ID，如果发送端是MFP实例的主进程，该字段为一个空字符串。“CallId”的字段是发送端的call沙盒ID，如果发送端是MFP实例的主进程，该字段为0。“TransConnectSrcLocal”字段是传输连接发送端自己看到的本地地址。这里，传输连接未必是发送或者接收端call沙盒的发起连接。但传输连接的两端必然分别位于发送端和接收端所在的MFP实例中。发送端，无论是call沙盒还是MFP主进程，将要发送的消息交给MFP实例，然后发送端MFP实例将该消息通过传输连接发送到接收端的MFP实例，再由接收端MFP实例将消息配送到目标沙盒或者MFP主进程。注意由于传输连接是双向的，发送端不一定是传输连接的客户端，相应地，接收端也不一定是传输连接的服务端。类似地，字段“TransConnectSrcRemote”是传输连接发送端看到的接收端地址；字段“TransConnectDestLocal”是传输连接接收端自己看到的本地地址；字段“TransConnectDestRemote”是传输连接接收端看到的发送端地址。通常情况下，字段“TransConnectSrcLocal”和“TransConnectDestRemote”的值应该是一致的，字段“TransConnectSrcRemote”和“TransConnectDestLocal”的值应该是一致的。但是，如果是TCPIP协议并且发送端和接收端之间存在NAT层，这些字段的值不见得会一致。如果接收端位于传输连接的服务端，“TransConnectDestRemote”字段的值会非常有用，因为它可以告诉MFP传输连接在服务端的id，只有知道id该连接才可以被重用，并且还可以通过该连接发送回复的消息。如果发送端和接收端位于同一个MFP实例中，则不需要通过传输连接发送消息，这种情况下上述4个字段的内容都是空字符串。最后，消息的“Message”的字段是消息的内容。本函数的两个例子为receive_sandbox_message(-1)和receive_sandbox_message(local_info, -1)。
 @end
 @language:traditional_chinese
 receive_sandbox_message函數返回沙盒或者MFP主進程發送的信息。發送者可能位於一個和本地有直接連接（這裏指的是通過MFP的connect函數構成的連接）的遠端MFP實例中（可能是一個call沙盒或者該MFP實例的主進程），也可能就是本地MFP實例的一個call沙盒或者該MFP實例的主進程。它有兩種工作模式。第一種工作模式只有一個參數，也就是等待的時間。如果是0，則意味著沒有等待，立即返回。如果隊列中有消息，則返回隊列中的第一個消息，否則，返回NULL。如果等待時間小於0，則意味著阻塞模式。也就是說如果隊列中沒有消息，函數將會阻塞。如果等待時間是正數，則代表等待的毫秒數。如果等待時間過去之後隊列中仍然沒有消息，則返回NULL。如果本函數是在沙盒中被調用，則必須采用第一種工作模式。第二種工作模式有兩個參數。第一個參數為一個代表本地信息（也就是監聽地址）的對象。它告訴本函數選擇哪一個本地地址收取消息。該信息對象可由調用generate_interface函數返回得到。第二個參數則是等待時間，其具體意義參見第一種工作模式。如果本函數是在MFP主進程中被調用，則必須采用第二種工作模式。本函數如果返回一個合法的消息，該返回值則是一個基於數組的字典。其中，“InterfaceInfo”的字段是發送端的本地信息，包括協議和地址。如果發送端和接收端位於同一個MFP實例中，並且接收端是該MFP實例的一個call沙盒而發送端是該MFP實例的主進程，這個字段則為NULL。“ConnectId”的字段是發送端的連接ID，如果發送端是MFP實例的主進程，該字段為一個空字符串。“CallId”的字段是發送端的call沙盒ID，如果發送端是MFP實例的主進程，該字段為0。“TransConnectSrcLocal”字段是傳輸連接發送端自己看到的本地地址。這裏，傳輸連接未必是發送或者接收端call沙盒的發起連接。但傳輸連接的兩端必然分別位於發送端和接收端所在的MFP實例中。發送端，無論是call沙盒還是MFP主進程，將要發送的消息交給MFP實例，然後發送端MFP實例將該消息通過傳輸連接發送到接收端的MFP實例，再由接收端MFP實例將消息配送到目標沙盒或者MFP主進程。註意由於傳輸連接是雙向的，發送端不一定是傳輸連接的客戶端，相應地，接收端也不一定是傳輸連接的服務端。類似地，字段“TransConnectSrcRemote”是傳輸連接發送端看到的接收端地址；字段“TransConnectDestLocal”是傳輸連接接收端自己看到的本地地址；字段“TransConnectDestRemote”是傳輸連接接收端看到的發送端地址。通常情況下，字段“TransConnectSrcLocal”和“TransConnectDestRemote”的值應該是一致的，字段“TransConnectSrcRemote”和“TransConnectDestLocal”的值應該是一致的。但是，如果是TCPIP協議並且發送端和接收端之間存在NAT層，這些字段的值不見得會一致。如果接收端位於傳輸連接的服務端，“TransConnectDestRemote”字段的值會非常有用，因為它可以告訴MFP傳輸連接在服務端的id，只有知道id該連接才可以被重用，並且還可以通過該連接發送回復的消息。如果發送端和接收端位於同一個MFP實例中，則不需要通過傳輸連接發送消息，這種情況下上述4個字段的內容都是空字符串。最後，消息的“Message”的字段是消息的內容。本函數的兩個例子為receive_sandbox_message(-1)和receive_sandbox_message(local_info, -1)。
 @end
Endh
::mfp::math::matrix::recip 1 FALSE
Help
 @language:
 recip(x) calculates reciprocal of x. Note that so far x can only be a number or a 2D matrix.
 @end
 @language:simplified_chinese
 recip(x)计算x的倒数，注意当前仅支持数值或二维矩阵。
 @end
 @language:traditional_chinese
 recip(x)計算x的倒數，註意當前僅支持數值或二維陣列。
 @end
Endh
::mfp::data_struct::array_based::remove_elem_from_ablist 2 FALSE
Help
 @language:
 remove_elem_from_ablist(array_based_list, idx) removes the idxth element from an array based list array_based_list. It returns updated array list. The parameter array_based_list will not change. If idx is not valid, an exception will throw.
 @end
 @language:simplified_chinese
 remove_elem_from_ablist(array_based_list, idx)将基于数组的序列array_based_list的idx号元素删除并返回更新后的基于数组的序列。作为参数的array_based_list不会发生改变。注意idx必须是一个合法的索引。
 @end
 @language:traditional_chinese
 remove_elem_from_ablist(array_based_list, idx)將基於數組的序列array_based_list的idx號元素刪除並返回更新後的基於數組的序列。作為參數的array_based_list不會發生改變。注意idx必須是一個合法的索引。
 @end
Endh
::mfp::multimedia::webrtc_lib::remove_peer_stream 1 FALSE
Help
 @language:
 This function removes video stream from a peer connection object. It has only one parameter which is the peer connection. This function returns nothing.
 @end
 @language:simplified_chinese
 此函数移除peer connection对象的视频流。这个函数仅有一个参数，也就是peer connection对象的Id。这个函数不返回任何值。
 @end
 @language:traditional_chinese
 此函數移除peer connection對象的視頻流。這個函數僅有一個參數，也就是peer connection對象的Id。這個函數不返回任何值。
 @end
Endh
::mfp::math::number::round 1 FALSE
Help
 @language:
 round(x) returns rounded integer value of x.
 @end
 @language:simplified_chinese
 round(x)，x是浮点数，返回x的四舍五入值。
 @end
 @language:traditional_chinese
 round(x)，x是浮點數，返回x的四舍五入值。
 @end
Endh
::mfp::math::number::round 2 FALSE
Help
 @language:
 round(x,y) returns rounded value of x with y digits after decimal point.
 @end
 @language:simplified_chinese
 round(x,y)，x是浮点数，y为非负整数，返回小数点后有y位数字的x的四舍五入值。
 @end
 @language:traditional_chinese
 round(x,y)，x是浮點數，y為非負整數，返回小數點後有y位數字的x的四舍五入值。
 @end
Endh
::mfp::multimedia::image_lib::save_image 3 FALSE
Help
 @language:
 save_image(image, file_format, path) saves a wrapped JAVA image object to an image file. The first parameter is the wrapped JAVA image object. The second parameter is the format of the file. It is a string and currently only "png", "jpg" and "bmp" are supported. The third parameter is the path of the file. This function returns true if the file is saved successfully, and returns false if any failure. For example, save_image(img, "png", "C:\\Temp\\1.png") .
 @end
 @language:simplified_chinese
 save_image(image, file_format, path)保存一个被包装过的JAVA图像对象至一个图形文件。本函数的第一个参数是被包装过的JAVA图像对象，第二个参数是基于字符串的图像文件的格式，当前仅支持"png"，"jpg"以及"bmp"格式。第三个参数是图像文件的路径。如果成功保存，本函数返回True，否则返回False。本函数的一个例子为：save_image(img, "png", "C:\\Temp\\1.png")。
 @end
 @language:traditional_chinese
 save_image(image, file_format, path)保存一個被包裝過的JAVA影像物件至一個圖形檔。本函數的第一個參數是被包裝過的JAVA影像物件，第二個參數是基於字串的影像檔的格式，當前僅支援"png"，"jpg"以及"bmp"格式。 第三個參數是影像檔的路徑。 如果成功保存，本函數返回True，否則返回False。 本函數的一個例子為：save_image(img, "png", "C:\\Temp\\1.png")。
 @end
Endh
::mfp::io::console::scanf 1 FALSE
Help
 @language:
 scanf(format_string), sscanf(input_from, format_string) and fscanf(fd, format_string) work like corresponding C/C++ functions. Function scanf reads one line input from user, sscanf reads string based parameter input_from, and fscanf reads content from a file whose id is fd. The format_string parameter supports integer (%d, %i, %x, etc), float (%e, %f, etc), character(%c), string(%s) etc. User can find detailed information for construction of a format string by reading C language manual for these functions. Different from C language, these functions do not accept additional parameters to store read values. These functions simply return all the read values in an array. For example, sscanf("3Hello world!", "%d%c%c%s") will returns [3, "H", "e", "llo"] (MFP does not support single character type, so single character is stored as a one-char string).
 @end
 @language:simplified_chinese
 scanf(format_string)，sscanf(input_from, format_string)和fscanf(fd, format_string)和C/C++中的对应函数工作方式相似。scanf读取用户的一行输入，sscanf读取字符串input_from，fscanf从文件（文件号fd）中读取文件内容。字符串format_string支持输入整数（%d、%i、%x等），浮点数（%e、%f等），字符和字符串（%c和%s）等等。用户可以在C语言的帮助文档中找到format_string的构造方法。但是，和C语言有所不同，MFP中的这些函数不需要输入用于存储读取数值的参数。所有的读取的数值将会保存在一个数组中作为返回值返回。比如，sscanf("3Hello world!", "%d%c%c%s")将会返回[3, "H", "e", "llo"]（注意MFP不支持单一字符数据类型，所以单一的字符将会存储为一个只包括一个字符的字符串）。
 @end
 @language:traditional_chinese
 scanf(format_string)，sscanf(input_from, format_string)和fscanf(fd, format_string)和C/C++中的對應函數程式工作方式相似。scanf讀取用戶的一行輸入，sscanf讀取字串input_from，fscanf從檔案（檔案號fd）中讀取檔案內容。字串format_string支持輸入整數（%d、%i、%x等），浮點數（%e、%f等），字符和字串（%c和%s）等等。用戶可以在C語言的幫助文檔中找到format_string的構造方法。但是，和C語言有所不同，MFP中的這些函數程式不需要輸入用於存儲讀取數值的參數。所有的讀取的數值將會保存在一個數組中作為返回值返回。比如，sscanf("3Hello world!", "%d%c%c%s")將會返回[3, "H", "e", "llo"]（註意MFP不支持單一字符數據類型，所以單一的字符將會存儲為一個只包括一個字符的字串）。
 @end
Endh
::mfp::paracomp::connect::send_sandbox_message 1 TRUE
Help
 @language:
 send_sandbox_message function sends a message to a sandbox or main entity. It has four working modes. The first working mode is to send a message from a sandbox to its local main entity. In this case the function has just one parameter which is message content. Note that message content is not necessarily to be a string. For example, send_sandbox_message([1,2,3]) sends [1,2,3] from a sandbox to local main entity. The second working mode is to send a message from main entity or a sandbox to a local sandbox. In this case the function needs four parameters. The first parameter is a local interface object. This local interface object can be obtained from generate_interface function. And the call request which started the receiver sandbox was accepted by the local interface. The second parameter is the connection id of the receiver sandbox. Here the connection initialized the call of the receiver sandbox. The third parameter is the receiver sandbox's call id. The last parameter is message content. An example of this mode is send_sandbox_message(local_info, "127.0.0.1", 1, 238.975 + 3.01i). The third working mode is to send a message from local sandbox or main entity to a remote main entity. Note that the local MFP instance must have been connected to the remote MFP instance by calling connect function. This mode needs two parameters. The first one is a connection object which should be returned from connect function (i.e. the "CONNECT" field of the returned value). The second parameter is message content. An example is send_sandbox_message(conn1, "Hello!"). The last working mode is to send a message from local sandbox or main entity to a remote sandbox. Note that the local MFP instance must be connected to the remote MFP instance by calling connect function. This mode needs five parameters. The first parameter is a connection object which should be returned from connect function (i.e. the "CONNECT" field of the returned value). The second parameter is a remote interface object which can be obtained from generate_interface function. This remote interface is the other side of the connection. And the call request which started the receiver sandbox was accepted by the remote interface. The third parameter is the connection id of the receiver sandbox. Here the connection initialized the call of the reciever sandbox. The fourth parameter is the receiver sandbox' call id. The last parameter is message content. An example for this mode is send_sandbox_message(conn1, remote_info, "192.168.1.139", 4, [[1,2],[3,4]]).
 @end
 @language:simplified_chinese
 send_sandbox_message函数将消息发送到沙盒或MFP主进程。它具有四种工作模式。第一种工作模式是从沙盒向其本地MFP主进程发送消息。在这种情况下，该功能只有一个参数，即消息内容。请注意，消息内容不必是字符串。例如，send_sandbox_message([1,2,3])从沙盒向本地MFP主进程发送[1,2,3]。第二种工作模式是将消息从MFP主进程或沙盒发送到本地沙盒。在这种情况下，该功能需要四个参数。第一个参数是本地信息对象。可以从generate_interface函数获得此本地信息对象。启动接收方沙盒的call请求被本地信息对象所代表的接口地址接受。第二个参数是接收方沙盒的连接ID。注意这个连接是启动接收方沙盒call对象的连接。第三个参数是接收方沙盒的call沙盒Id。最后一个参数是消息内容。此模式的一个示例是send_sandbox_message(local_info,"127.0.0.1",1,238.975+3.01i)。第三种工作模式是将消息从本地沙盒或MFP主进程发送到远端MFP主进程。请注意，本地MFP实例必须已经通过调用connect函数连接到远端MFP实例。此模式需要两个参数。第一个是从connect函数返回的连接对象（即返回值的“CONNECT”字段）。第二个参数是消息内容。一个示例是send_sandbox_message(conn1,"Hello!")。最后一种工作模式是将消息从本地沙盒或MFP主进程发送到远端沙盒。请注意，本地MFP实例必须通过调用connect函数连接到远端MFP实例。此模式需要五个参数。第一个参数是从连接函数返回的连接对象（即返回值的“CONNECT”字段）。第二个参数是从generate_interface函数获得的远程接口对象。此远程接口位于连接的另一端。远程接口接受了启动接收方沙盒的call请求。第三个参数是接收方沙盒的连接ID。注意这个连接是启动接收方沙盒call对象的连接。第四个参数是接收方沙盒的call沙盒ID。最后一个参数是消息内容。此模式的一个示例是send_sandbox_message(conn1,remote_info,"192.168.1.139",4,[[1,2],[3,4]])。
 @end
 @language:traditional_chinese
 send_sandbox_message函數將消息發送到沙盒或MFP主進程。它具有四種工作模式。第一種工作模式是從沙盒向其本地MFP主進程發送消息。在這種情況下，該功能只有一個參數，即消息內容。請註意，消息內容不必是字符串。例如，send_sandbox_message([1,2,3])從沙盒向本地MFP主進程發送[1,2,3]。第二種工作模式是將消息從MFP主進程或沙盒發送到本地沙盒。在這種情況下，該功能需要四個參數。第一個參數是本地信息對象。可以從generate_interface函數獲得此本地信息對象。啟動接收方沙盒的call請求被本地信息對象所代表的接口地址接受。第二個參數是接收方沙盒的連接ID。註意這個連接是啟動接收方沙盒call對象的連接。第三個參數是接收方沙盒的call沙盒Id。最後一個參數是消息內容。此模式的一個示例是send_sandbox_message(local_info,"127.0.0.1",1,238.975+3.01i)。第三種工作模式是將消息從本地沙盒或MFP主進程發送到遠端MFP主進程。請註意，本地MFP實例必須已經通過調用connect函數連接到遠端MFP實例。此模式需要兩個參數。第一個是從connect函數返回的連接對象（即返回值的“CONNECT”字段）。第二個參數是消息內容。一個示例是send_sandbox_message(conn1,"Hello!")。最後一種工作模式是將消息從本地沙盒或MFP主進程發送到遠端沙盒。請註意，本地MFP實例必須通過調用connect函數連接到遠端MFP實例。此模式需要五個參數。第一個參數是從連接函數返回的連接對象（即返回值的“CONNECT”字段）。第二個參數是從generate_interface函數獲得的遠程接口對象。此遠程接口位於連接的另一端。遠程接口接受了啟動接收方沙盒的call請求。第三個參數是接收方沙盒的連接ID。註意這個連接是啟動接收方沙盒call對象的連接。第四個參數是接收方沙盒的call沙盒ID。最後一個參數是消息內容。此模式的一個示例是send_sandbox_message(conn1,remote_info,"192.168.1.139",4,[[1,2],[3,4]])。
 @end
Endh
::mfp::array::set_array_elem 3 FALSE
Help
 @language:
 set_array_elem(x,y,z) sets x[y] to be z, and returns new x. Note that x can be an array or a single element, y must be a list of positive integers which are the indices. Y can be beyond the size of x. For example x = 3, y = [1, 2], z = 2 + 3i then set_array_elem(x,y,z) = [3, [0, 0, 2+3i]]. Also note that after set_array_elem is called, the original x value may or may not change. So please always assign returned value back to x to get updated x value.
 @end
 @language:simplified_chinese
 set_array_elem(x,y,z)将x[y]赋值为z，并且返回新的x。注意x不是必须为矩阵，y必须为正整数向量。y的值可以超出x的尺寸和维度。比如，如果x=3，y=[1,2]，z=2+3i，那么set_array_elem(x,y,z)等于[3, [0, 0, 2+3i]]。还要注意，调用了set_array_elem函数之后，x的值可能会自动变为新值，也可能不会。所以，必须将set_array_elem的返回值赋予x，以保证x的值得到更新。
 @end
 @language:traditional_chinese
 set_array_elem(x,y,z)將x[y]賦值為z，並且返回新的x。註意x不是必須為矩陣，y必須為正整數向量。y的值可以超出x的尺寸和維度。比如，如果x=3，y=[1,2]，z=2+3i，那麽set_array_elem(x,y,z)等於[3, [0, 0, 2+3i]]。還要註意，調用了set_array_elem程式之後，x的值可能會自動變為新值，也可能不會。所以，必須將set_array_elem的返回值賦予x，以保證x的值得到更新。
 @end
Endh
::mfp::multimedia::webrtc_lib::set_audio_track_enable 2 FALSE
Help
 @language:
 This function enables or disables audio track. It has two parameters. The first parameter is a display handle returned from open_screen_display function. The second parameter is a boolean value. True means enabling audio track and false means disabling audio track. This function returns previous state of audio track. True means before the function call the audio track was enabled. False means before the function call the audio track was disabled.
 @end
 @language:simplified_chinese
 此函数激活或者关闭音轨。这个函数有两个参数。第一个参数是一个显示窗口的句柄。该显示窗口的句柄可以从open_screen_display函数调用中返回。第二个是一个布尔值，True表示激活音轨而false则表示关闭音轨。这个函数的返回值是音轨之前的状态。True表示函数调用之前是激活状态而false则表示函数调用之前是关闭状态。
 @end
 @language:traditional_chinese
 此函數激活或者關閉音軌。這個函數有兩個參數。第一個參數是一個顯示窗口的句柄。該顯示窗口的句柄可以從open_screen_display函數調用中返回。第二個是一個布爾值，True表示激活音軌而false則表示關閉音軌。這個函數的返回值是音軌之前的狀態。True表示函數調用之前是激活狀態而false則表示函數調用之前是關閉狀態。
 @end
Endh
::mfp::graph_lib::display::set_display_bgrnd_color 2 FALSE
Help
 @language:
 set_display_bgrnd_color(display, color) sets background color for a display (whether screen display or image display). Color is a 4-elem array ([Alpha, R, G, B]) or 3-elem array ([R, G, B]) with each elem from 0 to 255.
 @end
 @language:simplified_chinese
 set_display_bgrnd_color(display, color)为一个display设置背景色。该display既可以是screen display，也可以是image display。背景色是一个4个或3个元素的数组，如果是4个元素，就是[Alpha，R，G，B]，如果是3个元素，就是[R，G，B]，在该数组中，每一个元素的值都是从0到255。
 @end
 @language:traditional_chinese
 set_display_bgrnd_color(display, color)為一個display設置背景色。該display既可以是screen display，也可以是image display。背景色是一個4個或3個元素的數組，如果是4個元素，就是[Alpha，R，G，B]，如果是3個元素，就是[R，G，B]，在該數組中，每一個元素的值都是從0到255。
 @end
Endh
::mfp::graph_lib::display::set_display_bgrnd_image 3 FALSE
Help
 @language:
 set_display_bgrnd_image(display, image, mode) sets background image for a display (whether screen display or image display). Image is a image handle. Mode is an integer whose value is either 0 (original background image is placed on left-top), 1 (background image is scaled to the whole screen), 2 (background image is tiled), or 3 (background image in the middle of screen).
 @end
 @language:simplified_chinese
 set_display_bgrnd_image(display, image, mode)为一个display设置背景图像。该display既可以是screen display，也可以是image display。背景图像是一个image句柄。mode是背景图像的布置方式，0表示原始背景图像被置于左上角，1表示背景图像被缩放值screen大小以便覆盖整个screen，2表示背景图像如贴瓷砖一样重复整齐排列，但每一片“瓷砖”大小保持原状， 3背景图像位于屏幕正中央。在这种情况下背景图像的大小也不会改变。
 @end
 @language:traditional_chinese
 set_display_bgrnd_image(display, image, mode)為一個display設置背景圖像。該display既可以是screen display，也可以是image display。背景圖像是一個image句柄。mode是背景圖像的布置方式，0表示原始背景圖像被置於左上角，1表示背景圖像被縮放值screen大小以便覆蓋整個screen，2表示背景圖像如貼瓷磚一樣重復整齊排列，但每一片“瓷磚”大小保持原狀， 3背景圖像位於屏幕正中央。在這種情況下背景圖像的大小也不會改變。
 @end
Endh
::mfp::graph_lib::display::set_display_caption 2 FALSE
Help
 @language:
 set_display_caption(display, caption) sets a screen display's caption on JAVA platform. It does not affect an image display or a screen display in Android.
 @end
 @language:simplified_chinese
 set_display_caption(display, caption)在JAVA平台上设置一个screen display的标题。set_display_resizable对image display不起作用，在安卓平台上也不起作用。
 @end
 @language:traditional_chinese
 set_display_caption(display, caption)在JAVA平臺上設置一個screen display的標題。set_display_resizable對image display不起作用，在安卓平臺上也不起作用。
 @end
Endh
::mfp::graph_lib::display::set_display_confirm_close 2 FALSE
Help
 @language:
 set_display_confirm_close(display, confirm_close_or_not) sets whether confirming is required before closing a screen display. It does not affect an image display.
 @end
 @language:simplified_chinese
 set_display_confirm_close(display, confirm_close_or_not)设置关闭一个screen display是否需要确认。set_display_confirm_close对image display不起作用。
 @end
 @language:traditional_chinese
 set_display_confirm_close(display, confirm_close_or_not)設置關閉一個screen display是否需要確認。set_display_confirm_close對image display不起作用。
 @end
Endh
::mfp::graph_lib::display::set_display_orientation 2 FALSE
Help
 @language:
 set_display_orientation(display, orientation) sets orientation of a screen display in Android. If orientation is -1, it is an unspecified orientation; if it is 0, it is landscape; if it is 1, it is portrait. This function does not affect an image display and has no effect on JAVA platform.
 @end
 @language:simplified_chinese
 set_display_orientation(display, orientation)设置安卓平台上一个screen display是横屏（orientation等于0）还是竖屏（orientation等于1）还是横竖均可（orientation等于-1）。set_display_orientation对image display不起作用，在JAVA平台上也不起作用。
 @end
 @language:traditional_chinese
 set_display_orientation(display, orientation)設置安卓平臺上一個screen display是橫屏（orientation等於0）還是豎屏（orientation等於1）還是橫豎均可（orientation等於-1）。set_display_orientation對image display不起作用，在JAVA平臺上也不起作用。
 @end
Endh
::mfp::graph_lib::display::set_display_resizable 2 FALSE
Help
 @language:
 set_display_resizable(display, resizable_or_not) sets a screen display resizable or not. It does not affect an image display.
 @end
 @language:simplified_chinese
 set_display_resizable(display, resizable_or_not)设置一个screen display是否可以改变大小。set_display_resizable对image display不起作用。
 @end
 @language:traditional_chinese
 set_display_resizable(display, resizable_or_not)設置一個screen display是否可以改變大小。set_display_resizable對image display不起作用。
 @end
Endh
::mfp::graph_lib::display::set_display_size 3 FALSE
Help
 @language:
 set_display_size(display, width, height) sets a display (whether screen display or image display)'s size to be width * height.
 @end
 @language:simplified_chinese
 set_display_size(display, width, height)设置一个display（既可以是screen display，也可以是image display）的长度和高度分别为width和height。
 @end
 @language:traditional_chinese
 set_display_size(display, width, height)設置一個display（既可以是screen display，也可以是image display）的長度和高度分別為width和height。
 @end
Endh
::mfp::graph_lib::display::set_display_snapshot_as_bgrnd 3 FALSE
Help
 @language:
 set_display_snapshot_as_bgrnd(display, update_screen_or_not, clear_callbacks_or_not) sets a display (whether screen display or image display)'s snapshot as background image. Its second parameter, update_screen_or_not, telling MFP whether or not the display should be refreshed so that latest image can be captured. The third parameter, clear_callbacks_or_not, tells MFP whether or not the painting event callbacks should be cleared. For example, set_display_snapshot_as_bgrnd(d, true, true) refreshes display d (i.e. all the painting event callbacks take effect) and then drops all the painting event callbacks, and then takes snapshot of the display and sets the snapshot to be display's background image.
 @end
 @language:simplified_chinese
 set_display_snapshot_as_bgrnd(display, update_screen_or_not, clear_callbacks_or_not)将一个display（既可以是screen display，也可以是image display）的截屏设置为它的背景图案。它的第二个参数，update_screen_or_not，告诉MFP在截屏之前该display是否需要刷新；它的第三个参数，clear_callbacks_or_not，告诉MFP是否需要将屏幕绘图事件序列清空。比如，set_display_snapshot_as_bgrnd(d, true, true)首先刷新屏幕d，然后将屏幕绘图事件序列清空，最后截屏并将所得图像作为屏幕背景图像。
 @end
 @language:traditional_chinese
 set_display_snapshot_as_bgrnd(display, update_screen_or_not, clear_callbacks_or_not)將一個display（既可以是screen display，也可以是image display）的截屏設置為它的背景圖案。它的第二個參數，update_screen_or_not，告訴MFP在截屏之前該display是否需要刷新；它的第三個參數，clear_callbacks_or_not，告訴MFP是否需要將螢幕繪圖事件序列清空。比如，set_display_snapshot_as_bgrnd(d, true, true)首先刷新螢幕d，然後將螢幕繪圖事件序列清空，最後截屏並將所得圖像作為螢幕背景圖像。
 @end
Endh
::mfp::data_struct::array_based::set_elem_in_ablist 3 FALSE
Help
 @language:
 set_elem_in_ablist(array_based_list, idx, ref_of_elem) set a reference of value ref_of_elem at idx for an array based list array_based_list. Note that if the idx is invalid, an exception is thrown.
 @end
 @language:simplified_chinese
 set_elem_in_ablist(array_based_list, idx, ref_of_elem)将基于数组的序列array_based_list在idx处的值设置为ref_of_elem的引用。如果idx不合法，一个异常将会被抛出。
 @end
 @language:traditional_chinese
 set_elem_in_ablist(array_based_list, idx, ref_of_elem)將基於數組的序列array_based_list在idx處的值設置為ref_of_elem的引用。如果idx不合法，一個異常將會被拋出。
 @end
Endh
::mfp::io::file::set_file_last_modified_time 2 FALSE
Help
 @language:
 set_file_last_modified_time(path, time) sets the last modified time of the file or folder corresponding to a string based path to be time. Here time is measured by the number of milliseconds since midnight on January 1st, 1970. If path does not exist or the file is not accessable, returns false. Otherwise, returns true. Examples are set_file_last_modified_time("C:\\Temp\\Hello\\", 99999999) (Windows) and set_file_last_modified_time("./hello.txt", 1111111111) (Android).
 @end
 @language:simplified_chinese
 set_file_last_modified_time(path, time)设置基于字符串路径的path的文件或目录的上一次更改时间为time。该时间等于从1970年1月1日午夜开始到上一次更改时刻所经历的毫秒数。如果path不存在或者没有访问权限，返回false，否则返回true。例子包括("C:\\Temp\\Hello\\", 99999999) (Windows)和set_file_last_modified_time("./hello.txt", 1111111111) (Android)。
 @end
 @language:traditional_chinese
 set_file_last_modified_time(path, time)设置基于字串路径的path的档案或目录的上一次更改时间为time。该时间等于从1970年1月1日午夜开始到上一次更改时刻所经历的毫秒数。如果path不存在或者没有访问权限，返回false，否则返回true。例子包括("C:\\Temp\\Hello\\", 99999999) (Windows)和set_file_last_modified_time("./hello.txt", 1111111111) (Android)。
 @end
Endh
::mfp::exdata::json::set_json_field 3 FALSE
Help
 @language:
 This function sets a field value to a JSON string and returns the new JSON string. It has three parameters. The first parameter is the original JSON string. The second parameter is the field name. The third parameter is the field value. Note that all parameters are case-sensative. If the field name exists, this function refreshes the field's value. Otherwise, it adds a new field into the JSON string. It returns the new JSON string or throws an exception if the setting fails because of invalid field name or unsupported field value type. An example of this function is set_json_field("{\"ABC\": null, \"JJJ\": {\"DEF\":[1, 8, [\"Welcome\", 9.99]],\"ZZ\":\"hello boy\"}}", "JJJ", "New value").
 @end
 @language:simplified_chinese
 此函数将一个值设置到代表JSON数据的字符串中。此函数有三个参数。第一个参数为一个代表JSON数据的字符串，第二个参数为JSON域的名字，第三个参数为JSON域的值。注意这三个参数都是区分大小写的。如果这个JSON域已经存在，则将新值写入，否则，将创建一个新的JSON域。这个函数的返回值是设置后的新的JSON域的字符串，或者如果数据类型不支持或JSON域的名字错误则抛出异常。本函数的一个例子是set_json_field("{\"ABC\": null, \"JJJ\": {\"DEF\":[1, 8, [\"Welcome\", 9.99]],\"ZZ\":\"hello boy\"}}", "JJJ", "New value")。
 @end
 @language:traditional_chinese
 此函數將一個值設置到代表JSON數據的字符串中。此函數有三個參數。第一個參數為一個代表JSON數據的字符串，第二個參數為JSON域的名字，第三個參數為JSON域的值。註意這三個參數都是區分大小寫的。如果這個JSON域已經存在，則將新值寫入，否則，將創建一個新的JSON域。這個函數的返回值是設置後的新的JSON域的字符串，或者如果數據類型不支持或JSON域的名字錯誤則拋出異常。本函數的一個例子是set_json_field("{\"ABC\": null, \"JJJ\": {\"DEF\":[1, 8, [\"Welcome\", 9.99]],\"ZZ\":\"hello boy\"}}", "JJJ", "New value")。
 @end
Endh
::mfp::paracomp::host::set_local_host_address 4 FALSE
Help
 @language:
 set_local_host_address function sets local host address for an interface of the selected  protocol. It has four parameters. The first parameter is protocol name. Currently only WebRTC protocol is supported so that it can only be string "WEBRTC". The second is interface name, currently only "main" is the supported value. The third parameter is the address, which should be a valid email address for WEBRTC protocol. The email server should support smtp and imap protocols. Microsoft outlook email addresses are recommended. The last parameter includes additional information for this email. It is an array of strings whose first element should be "0", which means this email supports smtp and imap protocols. The second element is the password to send and receive emails using this email address. Please note that this password could be different from the password for webmail login. If the email is Microsoft hotmail or outlook mail, Google gmail or Tecent qq mail, no other information is required. Otherwises, developer needs to provide smtp server address, smtp server port, smtp support to SSL, imap server address, imap server port and imap support to SSL as the third to eighth parameters respectively. Please note that smtp support to SSL and imap support to SSL are "0" if SSL is not supported, "1" if SSL is supported, or "-1" if not sure. An example of this function is set_local_host_address("WEBRTC", "main", "abcxyz@yahoo.com", ["0", "xxxxyyyyzzzzwwww", "smtp.mail.yahoo.com", "465", "1", "imap.mail.yahoo.com", "993", "1"]). Another example is set_local_host_address("WEBRTC", "main", "mnopqrst@outlook.com", ["0", "abcd1234"]).
 @end
 @language:simplified_chinese
 set_local_host_address函数用于设置所选通信协议的本地地址。它有四个参数。第一个参数是通信协议的的名字。当前只支持WEBRTC协议所以它只能是字符串"WEBRTC"。第二个参数是通信接口的名称，当前支持"main"作爲参数值。第三个参数是通信地址。由于仅支持WEBRTC协议，通信地址必须是一个合法的电子邮件地址。推荐使用微软的outlook邮件或者腾讯公司的QQ邮件。第四个参数是一个字符串数组。数组中的第一个元素为"0"，代表该email地址支持smtp和imap协议。数组中的第二个元素为电子邮件的密码。注意这是smtp和imap协议收发邮件所使用的密码，该密码未见得和登录网页信箱所需要的密码一样。如果开发人员使用微软的outlook邮件或者hotmail邮箱，或者谷歌的gmail，以及腾讯的QQ邮件，以上信息就足够了。但是，如果是其他的邮件地址，开发人员则需要提供smtp服务器和imap服务器的信息。这包括smtp服务器的地址，端口，是否支持SSL协议，和imap服务器的地址，端口，以及是否支持SSL协议。其中，是否支持SSL协议也是一个字符串，"0"表示不支持，"1"表示支持，"-1"表示不清楚。这些信息将分别填入第四个参数的第三号到第八号元素中。本函数的一个例子是set_local_host_address("WEBRTC", "main", "abcxyz@yahoo.com", ["0", "xxxxyyyyzzzzwwww", "smtp.mail.yahoo.com", "465", "1", "imap.mail.yahoo.com", "993", "1"])。另外一个例子是set_local_host_address("WEBRTC", "main", "mnopqrst@outlook.com", ["0", "abcd1234"])。
 @end
 @language:traditional_chinese
 set_local_host_address函數用於設置所選通信協議的本地地址。它有四個參數。第一個參數是通信協議的的名字。當前只支持WEBRTC協議所以它只能是字符串"WEBRTC"。第二個參數是通信接口的名稱，當前支持"main"作爲參數值。第三個參數是通信地址。由於僅支持WEBRTC協議，通信地址必須是一個合法的電子郵件地址。推薦使用微軟的outlook郵件或者騰訊公司的QQ郵件。第四個參數是一個字符串數組。數組中的第一個元素為"0"，代表該email地址支持smtp和imap協議。數組中的第二個元素為電子郵件的密碼。註意這是smtp和imap協議收發郵件所使用的密碼，該密碼未見得和登錄網頁信箱所需要的密碼一樣。如果開發人員使用微軟的outlook郵件或者hotmail郵箱，或者谷歌的gmail，以及騰訊的QQ郵件，以上信息就足夠了。但是，如果是其他的郵件地址，開發人員則需要提供smtp服務器和imap服務器的信息。這包括smtp服務器的地址，端口，是否支持SSL協議，和imap服務器的地址，端口，以及是否支持SSL協議。其中，是否支持SSL協議也是一個字符串，"0"表示不支持，"1"表示支持，"-1"表示不清楚。這些信息將分別填入第四個參數的第三號到第八號元素中。本函數的一個例子是set_local_host_address("WEBRTC", "main", "abcxyz@yahoo.com", ["0", "xxxxyyyyzzzzwwww", "smtp.mail.yahoo.com", "465", "1", "imap.mail.yahoo.com", "993", "1"])。另外一個例子是set_local_host_address("WEBRTC", "main", "mnopqrst@outlook.com", ["0", "abcd1234"])。
 @end
Endh
::mfp::graph_lib::draw::set_porterduff_mode 2 FALSE
Help
 @language:
 set_porterduff_mode(painting_extra, porterduff_mode) sets porterduff mode for a painting extra information structure. Painting extra information structure is used in a painting event. Porterduff mode tells MFP the way to draw destination area. It is a capitalized string and supports the following modes: "CLEAR", "SRC", "DST", "SRC_OVER", "DST_OVER", "SRC_IN", "DST_IN", "SRC_OUT", "DST_OUT", "SRC_ATOP", "DST_ATOP", "XOR" or "" (empty string means default value). Developer may refer to JAVA documentation to find out detailed meaning of the above modes. And because of the intricacy, this function is not recommended to user. Default porterduff mode should generally be enough to draw destination area properly.
 @end
 @language:simplified_chinese
 set_porterduff_mode(painting_extra, porterduff_mode)为一个painting extra数据结构设置porterduff模式。painting extra数据结构在painting事件中被调用。Porterduff模式告诉MFP如何绘制目标区域。它是一个大写的字符串，具有以下可能值："CLEAR"，"SRC"，"DST"，"SRC_OVER"，"DST_OVER"，"SRC_IN"，"DST_IN"，"SRC_OUT"，"DST_OUT"，"SRC_ATOP"，"DST_ATOP"，"XOR"或者""，其中，空字符串""是缺省值。开发者可以参考JAVA文档以获取porterduff模式的详细信息。由于porterduff模式的使用非常复杂，在不十分清楚porterduff模式内部机制的情况下，不建议用户调用此函数。换句话说，使用porterduff模式的缺省值在一般情况下足以满足用户的需求。
 @end
 @language:traditional_chinese
 set_porterduff_mode(painting_extra, porterduff_mode)為一個painting extra數據結構設置porterduff模式。painting extra數據結構在painting事件中被調用。Porterduff模式告訴MFP如何繪製目標區域。它是一個大寫的字串，具有以下可能值："CLEAR"，"SRC"，"DST"，"SRC_OVER"，"DST_OVER"，"SRC_IN"，"DST_IN"，"SRC_OUT"，"DST_OUT"，"SRC_ATOP"，"DST_ATOP"，"XOR"或者""，其中，空字元串""是缺省值。開發者可以參考JAVA文檔以獲取porterduff模式的詳細資訊。由於porterduff模式的使用非常複雜，在不十分清楚porterduff模式內部機制的情況下，不建議用戶調用此函數。換句話說，使用porterduff模式的缺省值在一般情況下足以滿足用戶的需求。
 @end
Endh
::mfp::multimedia::webrtc_lib::set_rtc_media_remote_description 3 FALSE
Help
 @language:
 This function sets a web RTC remote description after an answer signal is received. Note that web RTC here is the web RTC library for voice and video communication, not the same thing as the WEBRTC protocol for data communication. It has three parameters. First is peer connection id. Second is SDP type. A string whose value is "answer" is expected. The third one is a string based SDP content, i.e. answer signal content. This function returns nothing. An example of this function is set_rtc_media_remote_description(remoteAddr, sdpType, sdpContent) .
 @end
 @language:simplified_chinese
 本函数在接收到一个answer信令之后设置web RTC的远程描述。注意此处的web RTC是指的用于支持声音和视频通信的web RTC函数库，而不是用于支持数据通信的WEBRTC协议栈。本函数有3个参数。第一个是peer connection对象的id。第二个是SDP的类型。该参数应该就是一个"answer"字符串。第三个参数是SDP的内容，也就是answer信令的内容。本函数不返回任何值。本函数的一个例子是set_rtc_media_remote_description(remoteAddr, sdpType, sdpContent)。
 @end
 @language:traditional_chinese
 本函數在接收到一個answer信令之後設置web RTC的遠程描述。註意此處的web RTC是指的用於支持聲音和視頻通信的web RTC函數庫，而不是用於支持數據通信的WEBRTC協議棧。本函數有3個參數。第一個是peer connection對象的id。第二個是SDP的類型。該參數應該就是一個"answer"字符串。第三個參數是SDP的內容，也就是answer信令的內容。本函數不返回任何值。本函數的一個例子是set_rtc_media_remote_description(remoteAddr, sdpType, sdpContent)。
 @end
Endh
::mfp::multimedia::audio_lib::set_sound_repeat 2 FALSE
Help
 @language:
 set_sound_repeat(sound_handle, repeat_or_not) set a sound handle to play repeatedly or not.
 @end
 @language:simplified_chinese
 set_sound_repeat(sound_handle, repeat_or_not)设置一个sound_handle所代表的声音是否重复演奏。
 @end
 @language:traditional_chinese
 set_sound_repeat(sound_handle, repeat_or_not)設置一個sound_handle所代表的聲音是否重複演奏。
 @end
Endh
::mfp::multimedia::audio_lib::set_sound_volume 2 FALSE
Help
 @language:
 set_sound_volume(sound_handle, volume) set volume (from 0 to 1) a sound handle.
 @end
 @language:simplified_chinese
 set_sound_volume(sound_handle, volume)设置一个sound_handle所代表的声音的音量，注意音量参数volume的值变化范围是从0到1。
 @end
 @language:traditional_chinese
 set_sound_volume(sound_handle, volume)設置一個sound_handle所代表的聲音的音量，注意音量參數volume的值變化範圍是從0到1。
 @end
Endh
::mfp::data_struct::array_based::set_value_in_abdict 3 FALSE
Help
 @language:
 set_value_in_abdict(array_based_dictionary, key, value) sets reference of the value to key into array_based_dictionary and returns the updated array_based_dictionary. If the key doesn't exist, it will be created. Note that key must be a string while value can be any data type.
 @end
 @language:simplified_chinese
 set_value_in_abdict(array_based_dictionary, key, value)将基于数组的字典array_based_dictionary的key所对于的值设置为value的引用并返回修改过的字典。如果key不存在，它将会被创造出来。注意key只能是字符串但是value可以是任意数据类型。
 @end
 @language:traditional_chinese
 set_value_in_abdict(array_based_dictionary, key, value)將基於數組的字典array_based_dictionary的key所對於的值設置為value的引用並返回修改過的字典。如果key不存在，它將會被創造出來。注意key只能是字串但是value可以是任意數據類型。
 @end
Endh
::mfp::multimedia::webrtc_lib::set_video_track_enable 2 FALSE
Help
 @language:
 This function enables or disables video track. It has two parameters. The first parameter is a display handle returned from open_screen_display function. The second parameter is a boolean value. True means enabling video track and false means disabling video track. This function returns previous state of video track. True means before the function call the video track was enabled. False means before the function call the video track was disabled.
 @end
 @language:simplified_chinese
 此函数激活或者关闭视频功能。这个函数有两个参数。第一个参数是一个显示窗口的句柄。该显示窗口的句柄可以从open_screen_display函数调用中返回。第二个是一个布尔值，True表示激活视频功能而false则表示关闭视频功能。这个函数的返回值是视频功能之前的状态。True表示函数调用之前是激活状态而false则表示函数调用之前是关闭状态。
 @end
 @language:traditional_chinese
 此函數激活或者關閉視頻功能。這個函數有兩個參數。第一個參數是一個顯示窗口的句柄。該顯示窗口的句柄可以從open_screen_display函數調用中返回。第二個是一個布爾值，True表示激活視頻功能而false則表示關閉視頻功能。這個函數的返回值是視頻功能之前的狀態。True表示函數調用之前是激活狀態而false則表示函數調用之前是關閉狀態。
 @end
Endh
::mfp::graph_lib::display::shutdown_display 2 FALSE
Help
 @language:
 shutdown_display(display, no_confirm_dialog_pop_up) shutdown a display. It has two parameters, display and no_confirm_dialog_pop_up. Display is the reference of screen display or image display. no_confirm_dialog_pop_up is an optional flag. By default, it is false. It only takes effect if display is a screen display. If it is true, even if a screen display has set confirm to close flag, it is shutdown immediately. Examples of this function:
shutdown_display(d)
and
shutdown_display(d, true)
 @end
 @language:simplified_chinese
 shutdown_display函数用于关闭一个display。该display既可以是一个窗口，也就是screen display，也可以是一个图像，也就是image display。它有两个参数。第一个参数是该display，第二个参数是一个可选参数，它是一个布尔值，true表示关闭screen display时不需要用户确认，而不管在该display创建时，有无设置需要确认退出。它的缺省值是false。注意它对image display不起作用。该函数的例子包括：
shutdown_display(d)
以及
shutdown_display(d, true)
 @end
 @language:traditional_chinese
 shutdown_display函數程式用於關閉一個display。該display既可以是一個窗口，也就是screen display，也可以是一個圖像，也就是image display。它有兩個參數。第一個參數是該display，第二個參數是一個可選參數，它是一個布爾值，true表示關閉screen display時不需要用戶確認，而不管在該display創建時，有無設置需要確認退出。它的缺省值是false。註意它對image display不起作用。該函數程式的示例為：
shutdown_display(d)
以及
shutdown_display(d, true)
 @end
Endh
::mfp::math::trigon::sin 1 FALSE
Help
 @language:
 sin(x) returns sin value of x, where x can be a complex number.
 @end
 @language:simplified_chinese
 sin(x)返回x的正弦值，x可以为复数。
 @end
 @language:traditional_chinese
 sin(x)返回x的正弦值，x可以為復數。
 @end
Endh
::mfp::array::size 1 FALSE
Help
 @language:
 size(x) returns a size list of array x. Note that if x is not an array, it always return [].
 @end
 @language:simplified_chinese
 size(x)返回矩阵x的尺寸向量。注意如果x不是一个矩阵，则总是返回[]。
 @end
 @language:traditional_chinese
 size(x)返回矩陣x的尺寸向量。註意如果x不是一個矩陣，則總是返回[]。
 @end
Endh
::mfp::array::size 2 FALSE
Help
 @language:
 size(x,y) returns a size list of array x which includes the first y dimension sizes. If x has less than y dimensions, return full size list. Note that y must be a positive integer. Note that if x is not an array, it always return [].
 @end
 @language:simplified_chinese
 size(x,y)返回矩阵x前y维的尺寸向量，如果x少于y维，返回完整的尺寸向量，注意y必须为正整数。此外如果x不是一个矩阵，则总是返回[]。
 @end
 @language:traditional_chinese
 size(x,y)返回矩陣x前y維的尺寸向量，如果x少於y維，返回完整的尺寸向量，注意y必須為正整數。此外如果x不是一個矩陣，則總是返回[]。
 @end
Endh
::mfp::system::sleep 1 FALSE
Help
 @language:
 sleep(x) suspends processing for positive real value x milliseconds. It returns nothing.
 @end
 @language:simplified_chinese
 sleep(x)休眠x毫秒（x必须为正实数），此函数不返回任何值。
 @end
 @language:traditional_chinese
 sleep(x)休眠x毫秒（x必須為正實數），此函數不返回任何值。
 @end
Endh
::mfp::string::split 2 FALSE
Help
 @language:
 split(string_input, string_regex) splits string_input around matches of the given regular expression defined by parameter string_regex and returns the array of strings computed by splitting string_input around matches of the given regular expression. User could refer to JAVA documents for the Pattern class and String.split function for detailed usage about regular express. For example, split("boo:and:foo", ":") returns ["boo", "and", "foo"] and split("boo:and:foo", "o") returns ["b", "", ":and:f"].
 @end
 @language:simplified_chinese
 split(string_input, string_regex)j将字符串string_input按照正则表达式string_regex分割为若干个子字符串并返回包含所有子字符串的数组。用户可以阅读JAVA语言的Pattern类和String.split函数的帮助文档获得更多关于正则表达式使用方法的信息。例子包括split("boo:and:foo", ":")返回["boo", "and", "foo"]以及split("boo:and:foo", "o")返回["b", "", ":and:f"]。
 @end
 @language:traditional_chinese
 string_regex)j將字串string_input按照正則表達式string_regex分割為若幹個子字串並返回包含所有子字串的數組。用戶可以閱讀JAVA語言的Pattern類和String.split函數程式的幫助檔案獲得更多關於正則表達式使用方法的資訊。例子包括split("boo:and:foo", ":")返回["boo", "and", "foo"]以及split("boo:and:foo", "o")返回["b", "", ":and:f"]。
 @end
Endh
::mfp::string::sprintf 1 TRUE
Help
 @language:
 printf(format_string, ...), sprintf(format_string, ...) and fprintf(fd, format_string, ...) work like corresponding C/C++ functions. Function printf prints formatted string constructed from format_string and other parameter values to output console, sprintf constructs a new string from format_string and other parameters, and returns the new string, fprintf prints the formated string from format_string and other parameter values to the text file whose id is fd. The format_string parameter supports integer (%d, %i, %x, etc), float (%e, %f, etc), character(%c), string(%s) etc. User can find detailed information for construction of a format string by reading C language manual for these functions. For example, printf("Hello world!%f", 3.14) will output "Hello world!3.140000" on the screen, sprintf("%c%d", "A", 9) returns "A9" (MFP does not support single character type, so single character is stored as a one-char string).
 @end
 @language:simplified_chinese
 printf(format_string, ...)，sprintf(format_string, ...)和fprintf(fd, format_string, ...)和C/C++中的对应函数工作方式相似。这些函数通过format_string和其后的数值参数构造出一个新的字符串，printf函数将字符串打印到标准输出，sprintf函数将字符串作为返回值返回，fprintf函数则将字符串输出到文件号为fd的文本文件。字符串format_string支持输入整数（%d、%i、%x等），浮点数（%e、%f等），字符和字符串（%c和%s）等等。用户可以在C语言的帮助文档中找到format_string的构造方法。例如，printf("Hello world!%f", 3.14)将会打印输出"Hello world!3.140000"，而sprintf("%c%d", "A", 9)则返回"A9"（注意MFP不支持单一字符数据类型，所以单一的字符将会存储为一个只包括一个字符的字符串）。
 @end
 @language:traditional_chinese
 printf(format_string, ...)，sprintf(format_string, ...)和fprintf(fd, format_string, ...)和C/C++中的对应函数程式工作方式相似。这些函数程式通过format_string和其后的数值参数构造出一个新的字串，printf将字串打印到标准输出，sprintf将字串作为返回值返回，fprintf则将字串输出到档案号为fd的文本档案。字串format_string支持输入整数（%d、%i、%x等），浮点数（%e、%f等），字符和字串（%c和%s）等等。用户可以在C语言的帮助手册中找到format_string的构造方法。例如，printf("Hello world!%f", 3.14)将会打印输出"Hello world!3.140000"，而sprintf("%c%d", "A", 9)则返回"A9"（注意MFP不支持单一字符数据类型，所以单一的字符将会存储为一个只包括一个字符的字串）。
 @end
Endh
::mfp::string::sscanf 2 FALSE
Help
 @language:
 scanf(format_string), sscanf(input_from, format_string) and fscanf(fd, format_string) work like corresponding C/C++ functions. Function scanf reads one line input from user, sscanf reads string based parameter input_from, and fscanf reads content from a file whose id is fd. The format_string parameter supports integer (%d, %i, %x, etc), float (%e, %f, etc), character(%c), string(%s) etc. User can find detailed information for construction of a format string by reading C language manual for these functions. Different from C language, these functions do not accept additional parameters to store read values. These functions simply return all the read values in an array. For example, sscanf("3Hello world!", "%d%c%c%s") will returns [3, "H", "e", "llo"] (MFP does not support single character type, so single character is stored as a one-char string).
 @end
 @language:simplified_chinese
 scanf(format_string)，sscanf(input_from, format_string)和fscanf(fd, format_string)和C/C++中的对应函数工作方式相似。scanf读取用户的一行输入，sscanf读取字符串input_from，fscanf从文件（文件号fd）中读取文件内容。字符串format_string支持输入整数（%d、%i、%x等），浮点数（%e、%f等），字符和字符串（%c和%s）等等。用户可以在C语言的帮助文档中找到format_string的构造方法。但是，和C语言有所不同，MFP中的这些函数不需要输入用于存储读取数值的参数。所有的读取的数值将会保存在一个数组中作为返回值返回。比如，sscanf("3Hello world!", "%d%c%c%s")将会返回[3, "H", "e", "llo"]（注意MFP不支持单一字符数据类型，所以单一的字符将会存储为一个只包括一个字符的字符串）。
 @end
 @language:traditional_chinese
 scanf(format_string)，sscanf(input_from, format_string)和fscanf(fd, format_string)和C/C++中的對應函數程式工作方式相似。scanf讀取用戶的一行輸入，sscanf讀取字串input_from，fscanf從檔案（檔案號fd）中讀取檔案內容。字串format_string支持輸入整數（%d、%i、%x等），浮點數（%e、%f等），字符和字串（%c和%s）等等。用戶可以在C語言的幫助文檔中找到format_string的構造方法。但是，和C語言有所不同，MFP中的這些函數程式不需要輸入用於存儲讀取數值的參數。所有的讀取的數值將會保存在一個數組中作為返回值返回。比如，sscanf("3Hello world!", "%d%c%c%s")將會返回[3, "H", "e", "llo"]（註意MFP不支持單一字符數據類型，所以單一的字符將會存儲為一個只包括一個字符的字串）。
 @end
Endh
::mfp::multimedia::webrtc_lib::start_local_stream 2 FALSE
Help
 @language:
 This function starts web RTC's local video stream. Note that web RTC here is the web RTC library for voice and video communication, not the same thing as the WEBRTC protocol for data communication. It has two parameters. The first one is a display handle returned from open_screen_display function. The second one is the index of the RTC video output window in this display's RTC video output window list. The first RTC video output window's index is 0, second is 1, etc. This function returns true if local stream is started successfully. Otherwise it returns false.
 @end
 @language:simplified_chinese
 此函数开启web RTC本地视频。注意此处的web RTC是指的用于支持声音和视频通信的web RTC函数库，而不是用于支持数据通信的WEBRTC协议栈。这个函数有两个参数。第一个参数是一个显示窗口的句柄。该显示窗口的句柄可以从open_screen_display函数调用中返回。第二个是个是RTC视频输出子窗口在显示窗口的RTC视频输出子窗口序列中的索引（第一个视频输出子窗口的索引值为0，第二个子窗口索引的值是1，以此类推）。这个函数如果调用成功，其返回值是True。否则，本函数返回False。
 @end
 @language:traditional_chinese
 此函數開啟web RTC本地視頻。註意此處的web RTC是指的用於支持聲音和視頻通信的web RTC函數庫，而不是用於支持數據通信的WEBRTC協議棧。這個函數有兩個參數。第一個參數是一個顯示窗口的句柄。該顯示窗口的句柄可以從open_screen_display函數調用中返回。第二個是個是RTC視頻輸出子窗口在顯示窗口的RTC視頻輸出子窗口序列中的索引（第一個視頻輸出子窗口的索引值為0，第二個子窗口索引的值是1，以此類推）。這個函數如果調用成功，其返回值是True。否則，本函數返回False。
 @end
Endh
::mfp::multimedia::audio_lib::start_sound 1 FALSE
Help
 @language:
 start_sound(sound_handle) plays a sound referred by sound handle sound_handle. If the sound has been started, this function will do nothing.
 @end
 @language:simplified_chinese
 start_sound(sound_handle)演奏sound_handle所指向的声音文件。如果该声音文件已经启动，这个函数什么也不做。
 @end
 @language:traditional_chinese
 start_sound(sound_handle)演奏sound_handle所指向的音效檔。如果該音效檔已經啟動，這個函數什麼也不做。
 @end
Endh
::mfp::multimedia::audio_lib::stop_all_sounds 0 FALSE
Help
 @language:
 stop_all_sounds() stops all playing sounds.
 @end
 @language:simplified_chinese
 stop_all_sounds()停止所有正在播放的声音。
 @end
 @language:traditional_chinese
 stop_all_sounds()停止所有正在播放的聲音。
 @end
Endh
::mfp::multimedia::webrtc_lib::stop_local_stream 1 FALSE
Help
 @language:
 This function stops web RTC's local video stream. Note that web RTC here is the web RTC library for voice and video communication, not the same thing as the WEBRTC protocol for data communication. It has only one parameter which is a display handle returned from open_screen_display function. This function returns nothing.
 @end
 @language:simplified_chinese
 此函数关闭web RTC本地视频。注意此处的web RTC是指的用于支持声音和视频通信的web RTC函数库，而不是用于支持数据通信的WEBRTC协议栈。这个函数只有一个参数。该参数是一个显示窗口的句柄。该显示窗口的句柄可以从open_screen_display函数调用中返回。本函数没有返回值。
 @end
 @language:traditional_chinese
 此函數關閉web RTC本地視頻。註意此處的web RTC是指的用於支持聲音和視頻通信的web RTC函數庫，而不是用於支持數據通信的WEBRTC協議棧。這個函數只有一個參數。該參數是一個顯示窗口的句柄。該顯示窗口的句柄可以從open_screen_display函數調用中返回。本函數沒有返回值。
 @end
Endh
::mfp::multimedia::audio_lib::stop_sound 1 FALSE
Help
 @language:
 stop_sound(sound_handle) stops the playing sound referred by sound_handle. If the sound is not playing, it does nothing.
 @end
 @language:simplified_chinese
 stop_sound(sound_handle)停止sound_handle所代表的声音的播放。如果该声音没有播放，这个函数什么也不做。
 @end
 @language:traditional_chinese
 stop_sound(sound_handle)停止sound_handle所代表的聲音的播放。如果該聲音沒有播放，這個函數什麼也不做。
 @end
Endh
::mfp::string::strcat 2 TRUE
Help
 @language:
 strcat(string1, string2...) catenates the string parameters and return the new catenated string. Need at least two parameters.
 @end
 @language:simplified_chinese
 strcat(string1, string2...)将字符串参数顺次连接在一起，返回新的连接好的字符串。本函数需要至少两个参数。
 @end
 @language:traditional_chinese
 strcat(string1, string2...)將字串參數順次連接在一起，返回新的連接好的字串。本函數程式需要至少兩個參數。
 @end
Endh
::mfp::string::strcmp 6 FALSE
Help
 @language:
 strcmp(src, dest, src_start, src_end, dest_start, dest_end) compare src string from src_start to src_end to dest string from dest_start to dest_end. It returns 0 if they are equal, > 0 if src is greater or < 0 if dest is greater. Note that string index is from 0, src_end and dest_end are one passed last selected character. Also note that the last four parameters can be omitted. If omitted, starts by default are 0 and ends by default are string length.
 @end
 @language:simplified_chinese
 strcmp(src, dest, src_start, src_end, dest_start, dest_end)比较源字符串src（从src_start到src_end）和目标字符串dest（从dest_start到dest_end）。如果src和dest相等返回0，如果src大于dest返回大于0的值，如果src小于dest返回小于0的值。注意字符串索引从0开始，src_end和dest_end的索引位置为最后一个被选中字符的索引位置加一。另外，最后四个参数可以省略，如果被省略，src_start和dest_start的缺省值为0，src_end和dest_end的缺省值为对应字符串的长度。
 @end
 @language:traditional_chinese
 strcmp(src, dest, src_start, src_end, dest_start, dest_end)比較源字符串src（從src_start到src_end）和目標字符串dest（從dest_start到dest_end）。如果src和dest相等返回0，如果src大於dest返回大於0的值，如果src小於dest返回小於0的值。注意字符串索引從0開始，src_end和dest_end的索引位置為最後一個被選中字符的索引位置加一。另外，最後四個參數可以省略，如果被省略，src_start和dest_start的缺省值為0，src_end和dest_end的缺省值為對應字符串的長度。
 @end
Endh
::mfp::string::strcpy 6 FALSE
Help
 @language:
 strcpy(src, dest, src_start, src_end, dest_start, dest_end) returns a string which is the string value copying src string from src_start to src_end to dest string from dest_start to dest_end. Note that string index is from 0, src_end and dest_end are one passed last selected character. Also note that the last four parameters can be omitted. If omitted, starts by default are 0 and ends by default are string length.
 @end
 @language:simplified_chinese
 strcpy(src, dest, src_start, src_end, dest_start, dest_end)返回将源字符串src从src_start到src_end拷贝到目标字符串dest从dest_start到dest_end的新字符串值。注意字符串索引从0开始，src_end和dest_end的索引位置为最后一个被选中字符的索引位置加一。另外，最后四个参数可以省略，如果被省略，src_start和dest_start的缺省值为0，src_end和dest_end的缺省值为对应字符串的长度。
 @end
 @language:traditional_chinese
 strcpy(src, dest, src_start, src_end, dest_start, dest_end)返回將源字符串src從src_start到src_end拷貝到目標字符串dest從dest_start到dest_end的新字符串值。注意字符串索引從0開始，src_end和dest_end的索引位置為最後一個被選中字符的索引位置加一。另外，最後四個參數可以省略，如果被省略，src_start和dest_start的缺省值為0，src_end和dest_end的缺省值為對應字符串的長度。
 @end
Endh
::mfp::string::stricmp 6 FALSE
Help
 @language:
 stricmp(src, dest, src_start, src_end, dest_start, dest_end) compare src string from src_start to src_end to dest string from dest_start to dest_end ignoring case of letters. It returns 0 if they are equal, > 0 if src is greater or < 0 if dest is greater. Note that string index is from 0, src_end and dest_end are one passed last selected character. Also note that the last four parameters can be omitted. If omitted, starts by default are 0 and ends by default are string length.
 @end
 @language:simplified_chinese
 stricmp(src, dest, src_start, src_end, dest_start, dest_end)在忽略字母大小写的前提下比较源字符串src（从src_start到src_end）和目标字符串dest（从dest_start到dest_end）。如果src和dest相等返回0，如果src大于dest返回大于0的值，如果src小于dest返回小于0的值。注意字符串索引从0开始，src_end和dest_end的索引位置为最后一个被选中字符的索引位置加一。另外，最后四个参数可以省略，如果被省略，src_start和dest_start的缺省值为0，src_end和dest_end的缺省值为对应字符串的长度。
 @end
 @language:traditional_chinese
 stricmp(src, dest, src_start, src_end, dest_start, dest_end)在忽略字母大小寫的前提下比較源字符串src（從src_start到src_end）和目標字符串dest（從dest_start到dest_end）。如果src和dest相等返回0，如果src大於dest返回大於0的值，如果src小於dest返回小於0的值。注意字符串索引從0開始，src_end和dest_end的索引位置為最後一個被選中字符的索引位置加一。另外，最後四個參數可以省略，如果被省略，src_start和dest_start的缺省值為0，src_end和dest_end的缺省值為對應字符串的長度。
 @end
Endh
::mfp::string::strlen 1 FALSE
Help
 @language:
 strlen(x) returns length of string x.
 @end
 @language:simplified_chinese
 strlen(x)返回字符串x的长度。
 @end
 @language:traditional_chinese
 strlen(x)返回字符串x的長度。
 @end
Endh
::mfp::string::strsub 2 FALSE
Help
 @language:
 strsub(str, start) returns substring of string parameter str, the substring is from character start (the first character is character 0) to the end of str.
 @end
 @language:simplified_chinese
 strsub(str, start)返回字符串str的子字符串。该子字符串从字符start开始到str的最后一个字符。注意字符串的第一个字符是0号字符。
 @end
 @language:traditional_chinese
 strsub(str, start)返回字符串str的子字符串。該子字符串從字符start開始到str的最後一個字符。注意字符串的第一個字符是0號字符。
 @end
Endh
::mfp::string::strsub 3 FALSE
Help
 @language:
 strsub(str, start, end) returns substring of string parameter str, the substring is from character start to character end - 1 (the first character is character 0).
 @end
 @language:simplified_chinese
 strsub(str, start, end)返回字符串str的子字符串。该子字符串从字符start开始到字符end-1。注意字符串的第一个字符是0号字符。
 @end
 @language:traditional_chinese
 strsub(str, start, end)返回字符串str的子字符串。該子字符串從字符start開始到字符end-1。注意字符串的第一個字符是0號字符。
 @end
Endh
::mfp::math::stat_stoch::sum_over 3 FALSE
Help
 @language:
 sum_over(x, y, z) calculates the sum of string based expression x over integer value y to z. Note that y and z are also string based value, y should be written like "a=10" (where a is the variable) and z should be like "20". For example, sum_over("x+1", "x=1", "10").
 @end
 @language:simplified_chinese
 函数sum_over(x, y, z)计算基于字符串的表达式x中的变量取值从整数y逐步变化到整数z的值的总合。y和z必须是字符串的形式，其中，y必须写成一个赋值表达式，比如"a=10"，这里，a是变量名。一个函数的例子为sum_over("x+1", "x=1", "10")。
 @end
 @language:traditional_chinese
 函數程式sum_over(x, y, z)計算基於字串的表達式x中的變數取值從整數y逐步變化到整數z的值的總合。y和z必須是字串的形式，其中，y必須寫成一個賦值表達式，比如"a=10"，這裏，a是變數名。本函數程式的一個例子為sum_over("x+1", "x=1", "10")。
 @end
Endh
::mfp::paracomp::threading::suspend_until_cond 4 FALSE
Help
 @language:
 This function suspends the current thread until a certain condition is satisfied. It has four parameters. The first parameter variable name. Note that variable name is not a string. The second parameter is a boolean value. If it is true, the function starts to check if the condition is satisfied only after the variable's value is written (not necessarily changed). Otherwise, the function starts to check if the condition is satisfied immediately when the function is called. This parameter is optional. By default it is TRUE. The third parameter is an operator string. Currently only the following inputs for this parameter are supported, i.e. "", "==", "!=", ">", "<", ">=" and "<=". "" means if a writing happens, the condition is satisfied. Other operators means to compare the variable's value using the operator. If comparison returns TRUE, the condition is satisifed. This parameter is also optional. By default it is "". The last parameter is the value to be compared with. This is also an optional parameter. It is useless if operator is "". For other operators, this parameter's value is current value of the variable by default. For example, suspend_until_cond(a) equals to call suspend_until_cond(a, TRUE, ""), which means to suspend the current thread until variable a is written by another thread. The other example is suspend_until_cond(a, FALSE, "!="), which means to suspend the current thread until variable a's value is changed. The third example is suspend_until_cond(a, TRUE, ">=", 37), which means to suspend the current thread until variable a is written (not necessarily changed), and the updated value is no smaller than 37. If the comparison is invalid, e.g. the updated value is "Hello", which cannot be compared with 37, the condition is not satisfied and the current thread is still blocked.
 @end
 @language:simplified_chinese
 此函数将挂起当前线程，直到满足特定条件为止。它有四个参数。第一个参数为变量名称。请注意，变量名不是字符串。第二个参数是布尔值。如果为TRUE，则该函数仅在写入变量的值（不必更改）之后才开始检查条件是否满足。否则，函数将在调用函数时立即检查是否满足条件。此参数是可选的。默认情况下为TRUE。第三个参数是运算符字符串。当前此参数仅支持以下值，即""，"=="，"!="，">"，"<"，">="和"<="。""表示如果变量值被写入（未必是被更改），则满足条件。其他运算符意味着使用运算符比较变量的值。如果比较返回TRUE，则满足条件。此参数也是可选的。默认情况下为""。最后一个参数是要比较的值。这也是一个可选参数。如果运算符为""，此参数没有任何作用。对于其他运算符，默认情况下，此参数的值为变量的当前值。例如，suspend_until_cond(a)等于调用suspend_until_cond(a,TRUE,"")，这意味着挂起当前线程，直到变量a被另一个线程写入。另一个示例是suspend_until_cond(a,FALSE,"!=")，这意味着挂起当前线程，直到变量a的值更改为止。第三个示例是suspend_until_cond(a,TRUE,">=",37)，这意味着挂起当前线程，直到写入变量a（不一定更改a的值），并且写入后的值不小于37。如果写入后的值无法和37进行比较，例如a新的值为"Hello"，则当前线程仍然被阻塞。
 @end
 @language:traditional_chinese
 此函數將掛起當前線程，直到滿足特定條件為止。它有四個參數。第一個參數為變量名稱。請註意，變量名不是字符串。第二個參數是布爾值。如果為TRUE，則該函數僅在寫入變量的值（不必更改）之後才開始檢查條件是否滿足。否則，函數將在調用函數時立即檢查是否滿足條件。此參數是可選的。默認情況下為TRUE。第三個參數是運算符字符串。當前此參數僅支持以下值，即""，"=="，"!="，">"，"<"，">="和"<="。""表示如果變量值被寫入（未必是被更改），則滿足條件。其他運算符意味著使用運算符比較變量的值。如果比較返回TRUE，則滿足條件。此參數也是可選的。默認情況下為""。最後一個參數是要比較的值。這也是一個可選參數。如果運算符為""，此參數沒有任何作用。對於其他運算符，默認情況下，此參數的值為變量的當前值。例如，suspend_until_cond(a)等於調用suspend_until_cond(a,TRUE,"")，這意味著掛起當前線程，直到變量a被另一個線程寫入。另一個示例是suspend_until_cond(a,FALSE,"!=")，這意味著掛起當前線程，直到變量a的值更改為止。第三個示例是suspend_until_cond(a,TRUE,">=",37)，這意味著掛起當前線程，直到寫入變量a（不一定更改a的值），並且寫入後的值不小於37。如果寫入後的值無法和37進行比較，例如a新的值為"Hello"，則當前線程仍然被阻塞。
 @end
Endh
::mfp::system::system 1 FALSE
Help
 @language:
 system(str_or_array) has one parameter which is either a string or an array with string elements. If the parameter is a string, it runs the string based OS command and returns the value that the OS command returns. Note that the command should be an executable file with its parameters. Like system("dir") in windows cannot be executed because dir is an internal function of cmd.exe. User should use system("cmd /c dir") instead. If the parameter is an array, then each element in the array should be a part of a OS command and system function will run the OS command. For example, in Linux if user wants to rename file1 to file2, the full OS command should be "sh -c mv file1 file2", where "sh -c" cannot be omitted because we are not in a shell. So to call system function in the right way, user should write system(["sh", "-c", "mv file1 file2"]) because "mv file1 file2" is an internal command for sh which cannot be seperated into several parts. Also note that at this stage, user can only see any output from the running command but cannot input after the OS command starts. If the command does not exist, throws an exception.
 @end
 @language:simplified_chinese
 system(str_array)有一个参数。该参数必须是一个字符串或者是一个字符串数组。如果该参数是一个字符串，system运行该字符串所代表的系统指令并且返回该系统指令的返回值。注意系统指令必须是一个可执行的文件以及它的命令参数。由于这个原因，在Windows平台上，诸如system("dir")无法正确执行是因为dir并非是一个单独的可执行文件，而是cmd.exe的一个内部功能。要执行dir指令，用户需要运行system("cmd /c dir")。如果该参数是一个字符串数组，那么该数组的每一个元素是一个将为system函数运行的系统指令的一部分。比如，在Linux平台上，用户想要把文件file1重命名为file2需要运行系统指令"sh -c mv file1 file2"，注意由于我们不是在shell中，这里的"sh -c"是不可以省略的。这时，如果要调用system函数执行上述命令，正确的写法是system(["sh", "-c", "mv file1 file2"])，原因是"mv file1 file2"是sh的一个内部指令，它不能够被分割为几个部分。还要注意，在现阶段，这个函数只能将系统指令的输出打印出来，还无法接受在运行中用户对于该系统指令的输入。此外，如果该系统指令不存在，则会抛出异常。
 @end
 @language:traditional_chinese
 system(str_array)有一個參數。該參數必須是一個字串或者是一個字串數組。如果該參數是一個字串，system運行該字串所代表的系統指令並且返回該系統指令的返回值。註意系統指令必須是一個可執行的檔案以及它的命令參數。由於這個原因，在Windows操作系統上，諸如system("dir")無法正確執行是因為dir並非是一個單獨的可執行檔案，而是cmd.exe的一個內部功能。要執行dir指令，用戶需要運行system("cmd /c dir")。如果該參數是一個字串數組，那麽該數組的每一個元素是一個將為system函數運行的系統指令的一部分。比如，在Linux操作系統上，用戶想要把檔案file1重命名為file2需要運行系統指令"sh -c mv file1 file2"，註意由於我們不是在shell中，這裏的"sh -c"是不可以省略的。這時，如果要調用system函數程式執行上述命令，正確的寫法是system(["sh", "-c", "mv file1 file2"])，原因是"mv file1 file2"是sh的一個內部指令，它不能夠被分割為幾個部分。還要註意，在現階段，這個函數程式只能將系統指令的輸出打印出來，還無法接受在運行中用戶對於該系統指令的輸入。此外，如果該系統指令不存在，則會拋出異常。
 @end
Endh
::mfp::math::trigon::tan 1 FALSE
Help
 @language:
 tan(x) returns tan value of x, where x can be a complex number.
 @end
 @language:simplified_chinese
 tan(x)返回x的正切值，x可以为复数。
 @end
 @language:traditional_chinese
 tan(x)返回x的正切值，x可以為復數。
 @end
Endh
::mfp::string::to_lowercase_string 1 FALSE
Help
 @language:
 to_lowercase_string(x) returns a lower case string output of datum x.
 @end
 @language:simplified_chinese
 to_lowercase_string(x) 返回数据x的打印值（所有的字母均为小写）。
 @end
 @language:traditional_chinese
 to_lowercase_string(x) 返回數據x的打印值（所有的字母均為小寫）。
 @end
Endh
::mfp::string::to_string 1 FALSE
Help
 @language:
 to_string(x) returns a string output of datum x.
 @end
 @language:simplified_chinese
 to_string(x) 返回数据x的打印值。
 @end
 @language:traditional_chinese
 to_string(x) 返回數據x的打印值。
 @end
Endh
::mfp::string::to_uppercase_string 1 FALSE
Help
 @language:
 to_uppercase_string(x) returns a upper case string output of datum x.
 @end
 @language:simplified_chinese
 to_uppercase_string(x) 返回数据x的打印值（所有的字母均为大写）。
 @end
 @language:traditional_chinese
 to_uppercase_string(x) 返回數據x的打印值（所有的字母均為大寫）。
 @end
Endh
::mfp::string::tostring 1 FALSE
Help
 @language:
 tostring(x) returns a string output of datum x.
 @end
 @language:simplified_chinese
 tostring(x) 返回数据x的打印值。
 @end
 @language:traditional_chinese
 tostring(x) 返回數據x的打印值。
 @end
Endh
::mfp::string::trim 1 FALSE
Help
 @language:
 trim(string), trim_left(string) and trim_right(string) trim the white space and the characters whose asci value is less than white space (e.g. \n, \t, \r, \0 etc.) off from the string from one or both sides. In particular, trim removes the characters from both the left and right sides until it sees a character whose asci value is greater than white space on each side; trim_left removes the characters from left side until it sees a character whose asci value is greater than white space; trim_right removes the characters from right side until it sees a character whose asci value is greater than white space. Examples are trim(" \n hello world ") (returns "hello world"), trim_left(" \n hello world ") (returns "hello world ") and trim_right(" \n hello world ") (returns " hello world").
 @end
 @language:simplified_chinese
 trim(string)，trim_left(string)和trim_right(string)从字符串的两边或者一边删除任何一个ASCI值小于等于空白字符（' '）的字符。具体说来，trim从左右两边删除任何一个ASCI值小于等于空白字符（' '）的字符，直到左边和右边都遇到了一个ASCI值大于空白字符（' '）的字符；trim_left从左边删除任何一个ASCI值小于等于空白字符（' '）的字符，直到遇到了一个ASCI值大于空白字符（' '）的字符；trim_right从右边删除任何一个ASCI值小于等于空白字符（' '）的字符，直到遇到了一个ASCI值大于空白字符（' '）的字符。例子包括trim(" \n hello world ") （返回"hello world"）, trim_left(" \n hello world "）, （返回"hello world "）以及trim_right(" \n hello world ") （返回" hello world")。
 @end
 @language:traditional_chinese
 trim(string)，trim_left(string)和trim_right(string)從字串的兩邊或者一邊刪除任何一個ASCI值小於等於空白字符（' '）的字符。具體說來，trim從左右兩邊刪除任何一個ASCI值小於等於空白字符（' '）的字符，直到左邊和右邊都遇到了一個ASCI值大於空白字符（' '）的字符；trim_left從左邊刪除任何一個ASCI值小於等於空白字符（' '）的字符，直到遇到了一個ASCI值大於空白字符（' '）的字符；trim_right從右邊刪除任何一個ASCI值小於等於空白字符（' '）的字符，直到遇到了一個ASCI值大於空白字符（' '）的字符。例子包括trim(" \n hello world ") （返回"hello world"）, trim_left(" \n hello world "）, （返回"hello world "）以及trim_right(" \n hello world ") （返回" hello world")。
 @end
Endh
::mfp::string::trim_left 1 FALSE
Help
 @language:
 trim(string), trim_left(string) and trim_right(string) trim the white space and the characters whose asci value is less than white space (e.g. \n, \t, \r, \0 etc.) off from the string from one or both sides. In particular, trim removes the characters from both the left and right sides until it sees a character whose asci value is greater than white space on each side; trim_left removes the characters from left side until it sees a character whose asci value is greater than white space; trim_right removes the characters from right side until it sees a character whose asci value is greater than white space. Examples are trim(" \n hello world ") (returns "hello world"), trim_left(" \n hello world ") (returns "hello world ") and trim_right(" \n hello world ") (returns " hello world").
 @end
 @language:simplified_chinese
 trim(string)，trim_left(string)和trim_right(string)从字符串的两边或者一边删除任何一个ASCI值小于等于空白字符（' '）的字符。具体说来，trim从左右两边删除任何一个ASCI值小于等于空白字符（' '）的字符，直到左边和右边都遇到了一个ASCI值大于空白字符（' '）的字符；trim_left从左边删除任何一个ASCI值小于等于空白字符（' '）的字符，直到遇到了一个ASCI值大于空白字符（' '）的字符；trim_right从右边删除任何一个ASCI值小于等于空白字符（' '）的字符，直到遇到了一个ASCI值大于空白字符（' '）的字符。例子包括trim(" \n hello world ") （返回"hello world"）, trim_left(" \n hello world "）, （返回"hello world "）以及trim_right(" \n hello world ") （返回" hello world")。
 @end
 @language:traditional_chinese
 trim(string)，trim_left(string)和trim_right(string)從字串的兩邊或者一邊刪除任何一個ASCI值小於等於空白字符（' '）的字符。具體說來，trim從左右兩邊刪除任何一個ASCI值小於等於空白字符（' '）的字符，直到左邊和右邊都遇到了一個ASCI值大於空白字符（' '）的字符；trim_left從左邊刪除任何一個ASCI值小於等於空白字符（' '）的字符，直到遇到了一個ASCI值大於空白字符（' '）的字符；trim_right從右邊刪除任何一個ASCI值小於等於空白字符（' '）的字符，直到遇到了一個ASCI值大於空白字符（' '）的字符。例子包括trim(" \n hello world ") （返回"hello world"）, trim_left(" \n hello world "）, （返回"hello world "）以及trim_right(" \n hello world ") （返回" hello world")。
 @end
Endh
::mfp::string::trim_right 1 FALSE
Help
 @language:
 trim(string), trim_left(string) and trim_right(string) trim the white space and the characters whose asci value is less than white space (e.g. \n, \t, \r, \0 etc.) off from the string from one or both sides. In particular, trim removes the characters from both the left and right sides until it sees a character whose asci value is greater than white space on each side; trim_left removes the characters from left side until it sees a character whose asci value is greater than white space; trim_right removes the characters from right side until it sees a character whose asci value is greater than white space. Examples are trim(" \n hello world ") (returns "hello world"), trim_left(" \n hello world ") (returns "hello world ") and trim_right(" \n hello world ") (returns " hello world").
 @end
 @language:simplified_chinese
 trim(string)，trim_left(string)和trim_right(string)从字符串的两边或者一边删除任何一个ASCI值小于等于空白字符（' '）的字符。具体说来，trim从左右两边删除任何一个ASCI值小于等于空白字符（' '）的字符，直到左边和右边都遇到了一个ASCI值大于空白字符（' '）的字符；trim_left从左边删除任何一个ASCI值小于等于空白字符（' '）的字符，直到遇到了一个ASCI值大于空白字符（' '）的字符；trim_right从右边删除任何一个ASCI值小于等于空白字符（' '）的字符，直到遇到了一个ASCI值大于空白字符（' '）的字符。例子包括trim(" \n hello world ") （返回"hello world"）, trim_left(" \n hello world "）, （返回"hello world "）以及trim_right(" \n hello world ") （返回" hello world")。
 @end
 @language:traditional_chinese
 trim(string)，trim_left(string)和trim_right(string)從字串的兩邊或者一邊刪除任何一個ASCI值小於等於空白字符（' '）的字符。具體說來，trim從左右兩邊刪除任何一個ASCI值小於等於空白字符（' '）的字符，直到左邊和右邊都遇到了一個ASCI值大於空白字符（' '）的字符；trim_left從左邊刪除任何一個ASCI值小於等於空白字符（' '）的字符，直到遇到了一個ASCI值大於空白字符（' '）的字符；trim_right從右邊刪除任何一個ASCI值小於等於空白字符（' '）的字符，直到遇到了一個ASCI值大於空白字符（' '）的字符。例子包括trim(" \n hello world ") （返回"hello world"）, trim_left(" \n hello world "）, （返回"hello world "）以及trim_right(" \n hello world ") （返回" hello world")。
 @end
Endh
::mfp::multimedia::webrtc_lib::unlink_video_stream 2 TRUE
Help
 @language:
 This function unlinks a video track to a video output window. It has two working modes. The first working mode includes three parameters which are, first, a display handle returned from open_screen_display function; second, a peer connection object id; and third a video track id. The second working mode includes only two parameters. The first one is a display handle and the second one is the index of the RTC video output window in this display's RTC video output window list. The first RTC video output window's index is 0, second is 1, etc. This function returns the number of unlinked RTC video tracks.
 @end
 @language:simplified_chinese
 此函数断开视频流向RTC视频输出子窗口的输出。这个函数有两种工作模式。第一种工作模式有3个参数分别为一个显示窗口的句柄（该显示窗口的句柄可以从open_screen_display函数调用中返回）；一个peer connection对象的id；以及一个视频轨的id。第二种工作模式有两个参数分别为一个显示窗口的句柄和一个RTC视频输出子窗口在显示窗口的RTC视频输出子窗口序列中的索引（第一个视频输出子窗口的索引值为0，第二个子窗口索引的值是1，以此类推）。这个函数返回断开的视频轨的数目。
 @end
 @language:traditional_chinese
 此函數斷開視頻流向RTC視頻輸出子窗口的輸出。這個函數有兩種工作模式。第一種工作模式有3個參數分別為一個顯示窗口的句柄（該顯示窗口的句柄可以從open_screen_display函數調用中返回）；一個peer connection對象的id；以及一個視頻軌的id。第二種工作模式有兩個參數分別為一個顯示窗口的句柄和一個RTC視頻輸出子窗口在顯示窗口的RTC視頻輸出子窗口序列中的索引（第一個視頻輸出子窗口的索引值為0，第二個子窗口索引的值是1，以此類推）。這個函數返回斷開的視頻軌的數目。
 @end
Endh
::mfp::graph_lib::display::update_display 1 FALSE
Help
 @language:
 update_display(display) update a display (whether screen display or image display).
 @end
 @language:simplified_chinese
 update_display(display)函数刷新一个display。该display既可以是screen display，也可以是image display。
 @end
 @language:traditional_chinese
 update_display(display)函數程式刷新一個display。該display既可以是screen display，也可以是image display。
 @end
Endh
::mfp::math::matrix::upper_triangular_matrix 1 FALSE
Help
 @language:
 upper_triangular_matrix(x) returns the upper triangular matrix of 2D square x after LU decomposition.
 @end
 @language:simplified_chinese
 upper_triangular_matrix(x)返回二维方阵x在LU分解之后的上三角矩阵。
 @end
 @language:traditional_chinese
 upper_triangular_matrix(x)返回二維方陣x在LU分解之後的上三角矩陣。
 @end
Endh
::mfp::math::matrix::zeros 1 TRUE
Help
 @language:
 Function zeros generates a matrix whose elements are all zero. The dimension of the matrix is determined by the parameters of ones function, which is either a number of positive integers or a single positive integer list. Note that zeros([]) returns 0.
 @end
 @language:simplified_chinese
 zeros函数返回一个所有元素都是0的矩阵，本函数的参数用于决定矩阵的尺寸，要么为一批正整数，要么为一个正整数数列。注意函数表达式zeros([])返回常数值0。
 @end
 @language:traditional_chinese
 zeros函數返回一個所有元素都是0的矩陣，本函數的參數用於決定矩陣的尺寸，要麽為一批正整數，要麽為一個正整數數列。註意表達式zeros([])返回常數值0。
 @end
Endh
