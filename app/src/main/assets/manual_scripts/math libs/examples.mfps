#!/usr/bin/mfplang

@execution_entry mfpexample :: testMatrix ()

citingspace ::mfpexample

Help
@language:
  test convert_unit and get_constant functions
@end
@language:simplified_chinese
  测试convert_unit函数和get_constant函数
@end
endh
function getConstCvtUnit()
  print("\nconvert_unit(23.71,\"m3\",\"fl oz(US)\") = " _
    + convert_unit(23.71,"m3","fl oz(US)"))
  print("\nget_constant(\"pi\", 4) = " + get_constant("pi", 4))
  print("\nget_constant(\"pi\", 8) = " + get_constant("pi", 8))
  print("\nget_constant(\"pi\", 0) = " + get_constant("pi", 0))
  print("\nget_constant(\"pi\") = " + get_constant("pi"))
endf

Help
@language:
  test trigononmetric and hyperbolic trigononmetric functions
@end
@language:simplified_chinese
  测试三角函数和双曲三角函数
@end
endh
function testTrigHTrig()
  print("\ncos(pi/3) = " + cos(pi/3))
  print("\ntand(45) = " + tand(45))
  print("\nsin(1 + 2*i) = " + sin(1 + 2*i))
  print("\nasind(0.5) = " + asind(0.5))
  print("\nacos(8) = " + acos(8))
  print("\nacosh(4.71 + 6.44i) = " + acosh(4.71 + 6.44i))
  print("\nsinh(e) = " + sinh(e))
  print("\natanh(e) = " + atanh(e))
endf

Help
@language:
  test log, exp and pow and related functions
@end
@language:simplified_chinese
  测试对数，指数和次方函数
@end
endh
function testLogExpPow()
  print("\nlg(e) == " + lg(e))
  print("\nlog(9, 3) == log(9)/log(3) == " + log(9)/log(3))
  print("\nlog2(3 + 4i) == " + log2(3 + 4i))
  print("\npow(32, 0.2) == " + pow(32, 0.2))
  print("\npow(-32, 0.2) == " + pow(-32, 0.2))
  print("\npow(-32, 0.2, 5) == " + pow(-32, 0.2, 5))
  print("\nsqrt(4) == " + sqrt(4))
  print("\nsqrt(-2) == " + sqrt(-2))
  print("\nsqrt(-2+3i) == " + sqrt(-2+3i))
endf

Help
@language:
  test matrix functions
@end
@language:simplified_chinese
  测试矩阵相关函数
@end
endh
function testMatrix()
  print("\ncofactor([[1,3,-4.81-0.66i],[-0.91i,5.774,3.81+2.03i],[0,-6,-7.66-3i]])=" _
    + cofactor([[1,3,-4.81-0.66i],[-0.91i, 5.774, 3.81+2.03i],[0, -6, -7.66-3i]]))
  print("\nadj([[1,-7],[-4, 6]]) = " + adj([[1,-7],[-4, 6]]))
  print("\ndet([[2.7-0.4i, 5.11i],[-1.49, -3.87+4.41i]]) = " _
    + det([[2.7-0.4i, 5.11i],[-1.49, -3.87+4.41i]]))
  print("\ndprod([1,2,3],[4,5,6]) = " + dprod([1,2,3],[4,5,6]))
  print("\neig([[1,0],[0,1]]) = " + eig([[1,0],[0,1]]) )
  print("\neig([[1+3.7i,-0.41-2.93i,5.33+0.52i],[0.33+2.71i,-3.81i,0.41+3.37i],[2.88,0,-9.4i]])=" _
    + eig([[1+3.7i,-0.41-2.93i,5.33+0.52i],[0.33+2.71i,-3.81i,0.41+3.37i],[2.88,0,-9.4i]]))
  print("\nget_eigen_values([[1+3.7i,-0.41-2.93i,5.33+0.52i],[0.33+2.71i,-3.81i,0.41+3.37i],[2.88,0,-9.4i]])=" _
    +get_eigen_values([[1+3.7i,-0.41-2.93i,5.33+0.52i],[0.33+2.71i,-3.81i,0.41+3.37i],[2.88,0,-9.4i]]))
  print("\nrank([[1,2,3],[4,5,8]]) = " _
    + rank([[1,2,3],[4,5,8]]))
endf

Help
@language:
  test expression and calculus functions
@end
@language:simplified_chinese
  测试表达式和微积分相关函数
@end
endh
function exprcalculus()
  print("\nderivative(\"1/x**2*log(x) + 9\", \"x\") = " _
    + derivative("1/x**2*log(x) + 9", "x"))
  print("\nderivative(\"tanh(x)**-1\", \"x\") = " _
    + derivative("tanh(x)**-1", "x"))
  // test high order derivative
  // 测试高次导数
  print("\nderivative(derivative(\"x*sin(x)\", \"x\"), \"x\") = " _
    + derivative(derivative("x*sin(x)", "x"), "x"))
  // test derivative value
  // 测试求取导数值  
  print("\nderi_ridders(\"x**0.5+x+9\", \"x\", 0.3, 1) = " _
    + deri_ridders("x**0.5+x+9", "x", 0.3, 1))
  print("\nderivative(\"x**0.5+x+9\", \"x\", 0.3) = " _
    + derivative("x**0.5+x+9", "x", 0.3))
  print("\nderi_ridders(\"x**0.5+sqrt(sin(x**2))\", \"x\", 0.3, 3) = " _
    + deri_ridders("x**0.5+sqrt(sin(x**2))", "x", 0.3, 3))
  print("\nsum_over(\"1/(x-10)\",\"x=1\",\"9\") = " _
    + sum_over("1/(x - 10)", "x = 1", "9"))
  print("\nproduct_over(\"1/(x-10)\",\"x=9\",\"1\") = " _
    + product_over("1/(x-10)", "x = 9", "1"))
  print("\nevaluate(\"x+y+1\",\"x\",5,\"y\",7) = " _
    + evaluate("x+y+1","x",5,"y",7))
  print("\nevaluate(\"sind(30)\") = " + evaluate("sind(30)"))
  print("\nintegrate(\"tanh(x)**-1\",\"x\") = ")
  print(integrate("tanh(x)**-1","x"))
  print("\nintegrate(\"sinh(x)*cosh(x)**-1\",\"x\") = ")
  print(integrate("sinh(x)*cosh(x)**-1","x"))
  print("\nintegrate(\"1/x**2\",\"x\",2,inf) = ")
  print(integrate("1/x**2","x",2,inf))
  print("\nintegrate(\"1/x**2\",\"x\",2,50,100) = ")
  print(integrate("1/x**2","x",2,50,100))
  // test unintegratable.
  // 测试不可积分
  try
  print("integrate(\"e**(x**2)\",\"x\")", integrate("e**(x**2)","x"))
  catch
  print("e**(x**2) cannot be integrated")
  endtry
  // test high order integration
  // 测试高次积分
  print("\nintegrate(\"integrate(\\\"x*y\\\",\\\"x\\\",1,6,100)\",\"y\",-4,3,100) = ")
  print(integrate("integrate(\"x*y\",\"x\",1,6,100)","y",-4,3,100))
endf

Help
@language:
  test statistics and sorting functions
@end
@language:simplified_chinese
  测试统计、随机和排序相关函数
@end
endh
function testStatSort()
  print("\navg(1,5,9,-6,3,-18,7) = " + avg(1,5,9,-6,3,-18,7))
  print("\nbeta(3.71, 23.55) = " + beta(3.71, 23.55))
  print("\ngamma(5.44 - 10.31i) = " + gamma(5.44 - 10.31i))
  print("\ngavg(1,5,9,-6,3,-18,7) = " + gavg(1,5,9,-6,3,-18,7))
  print("\nhavg(1,5,9,-6,3,-18,7) = " + havg(1,5,9,-6,3,-18,7))
  print("\nmax(1,5,9,-6,3,-18,7) = " + max(1,5,9,-6,3,-18,7))
  print("\nmed(1,5,9,-6,3,-18,7) = " + med(1,5,9,-6,3,-18,7))
  print("\nmin(1,5,9,-6,3,-18,7) = " + min(1,5,9,-6,3,-18,7))
  print("\nquick_sort(1,[1,5,9,-6,3,-18,7]) = " _
    + quick_sort(1,[1,5,9,-6,3,-18,7]))
  print("\nquick_sort(0,[1,5,9,-6,3,-18,7]) = " _
    + quick_sort(0,[1,5,9,-6,3,-18,7]))
  print("\nstdev(1,5,9,-6,3,-18,7) = " + stdev(1,5,9,-6,3,-18,7))
  print("\nstdevp(1,5,9,-6,3,-18,7) = " + stdevp(1,5,9,-6,3,-18,7))
  print("\nsum(1,5,9,-6,3,-18,7) = " + sum(1,5,9,-6,3,-18,7))
  print("\nncr(8,3) = " + ncr(8,3))
  print("\nnpr(8,3) = " + npr(8,3))
  print("\nrand() = " + rand())
endf

Help
@language:
  test sign processing functions
@end
@language:simplified_chinese
  测试信号处理相关函数
@end
endh
function testSignalProc()
  print("\nconv([4,8,2,9],[5,3,8,9,6,7,8]) = " _
    + conv([4,8,2,9],[5,3,8,9,6,7,8]))
  print("\nconv([[4,8,2,9],[8,6,7,9],[2,2,8,-4]],[[-5,i,7],[0.6,8,4]]) = " _
    + conv([[4,8,2,9],[8,6,7,9],[2,2,8,-4]],[[-5,i,7],[0.6,8,4]]))
  print("\nFFT(1, 2, 3, 4) = " + FFT(1, 2, 3, 4))
  print("\nFFT([1,2,3,4]) = " + FFT([1,2,3,4]))
  print("\niFFT(10, -2 + 2i, -2, -2 - 2i) = " _
    + IFFT(10, -2 + 2i, -2, -2 - 2i))
  print("\niFFT([10, -2 + 2i, -2, -2 - 2i]) = " _
    + IFFT([10, -2 + 2i, -2, -2 - 2i]))
endf

Help
@language:
  test prime, factor and roots functions
@end
@language:simplified_chinese
  测试质数、阶乘和一元多项式求根的相关函数
@end
endh
function PrimeFactRoots()
  print("\nis_prime(3.3) = " + is_prime(3.3))
  print("\nis_prime(97) = " + is_prime(97))
  print("\nis_prime(-97) = " + is_prime(-97))
  print("\nis_prime(1) = " + is_prime(1))
  print("\nis_prime(2) = " + is_prime(2))
  print("\nis_prime(0) = " + is_prime(0))
  print("\nis_prime(8633) = " + is_prime(8633))
  print("\nfact(3) = " + fact(3))
  print("\nfact(63) = " + fact(63))
  print("\nfact(0) = " + fact(0))
  print("\nroots([3, -4, 1]) = " + roots([3, -4, 1]))
  print("\nroots(1+2i, 7-6i, 0.54, -4.31-9i) = " _
    + roots(1+2i, 7-6i, 0.54, -4.31-9i))
endf

endcs
