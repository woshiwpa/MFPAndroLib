
#This is a hungry snake game. It has three levels. The entry point 
#of this game is the run function. This run function may take one or
#zero parameter. The parameter tells the game what the score threshold
#for the player to proceed into next level. If no parameter, this
#parameter uses its default value which is 100.
#Player can control the snake moving direction by tapping the Left,
#Top, Right and Bottom button. Player can also achieve the same thing
#by dragging/dropping mounse or swipping the fingur on the non-button
#area of the screen.
#这是一个贪吃蛇的游戏。它有三关，它的入口函数是run函数。run函数接受一个或者0个参数。
#参数告诉游戏多少分才能进入下一关，如果没有参数，玩家需要积满100分才能过关。
#如果想要控制蛇的运动方向，玩家可以点击Left，Top，Right和Bottom按钮，也可以在屏幕
#没有按钮的地方用手指或鼠标滑向相应的方向。
@execution_entry gdi_test::game_test::hungry_snake::run

citingspace gdi_test::game_test::hungry_snake 

function print_line_(s)
    // for debugging purpose, ignore this function
	//用于调试，请忽略本函数
endf 

// Sleep interval between two updates of screen (ms)
// 两次屏幕刷新之间的睡眠时间（毫秒）
function MOVEINTERVAL()
    if is_running_on_android()
        // if running on android, sleep interval is shorter because
        // MFP takes longer time in calculation than in a PC.
        // 在安卓系统上，睡眠时间较短，原因是MFP在安卓系统上运行得跟慢，需要更多
        // 时间进行计算，留给睡眠的时间就少了。
        return 50
    else
        return 500
    endif
endf

// width of the game display window in pixels (for pc only)
// 基于像素的游戏视频窗口的宽度（对安卓不起作用）
function WINDOWDEFAULTWIDTH()  
    return 1024
endf  
  
// height of the game display window in pixels (for pc only)
// 基于像素的游戏视频窗口的高度（对安卓不起作用）
function WINDOWDEFAULTHEIGHT()  
    return 480
endf  

// width of button
// 按钮的宽度
function BUTTONWIDTH()
    return 80
endf

// height of button
// 按钮的高度
function BUTTONHEIGHT()
    return 60
endf

// font size of button
// 按钮的字体大小
function BUTTONTEXTFONT()
    return 20
endf

// font size of level information
// 等级信息的字体大小
function LEVELFONTSIZE()
    return 30
endf

// gap between buttons
// 按钮之间的间隔
function BUTTONGAP()
    return 20
endf
 
// number of columns in snake's moving space
// 蛇的移动空间包含小方格的列数
function GRIDWIDTHDIM() 
    return 20 
endf 
 
// number of rows in snake's moving space
// 蛇的移动空间包含小方格的行数
function GRIDHEIGHTDIM() 
    return 16 
endf 
 
// size of grid cell in snake's moving space
// 蛇移动空间的每一个单元小方格的大小
function CELLSIZE(windowWidth, windowHeight, gridWidthDim, gridHeightDim) 
    return round(min(windowWidth/1.2/gridWidthDim, windowHeight/1.2/gridHeightDim)) 
endf 
 
// the width from the left side of display window to
// the left side of snake's moving space.
// 蛇的移动空间的左边界到屏幕的左边界的距离。
function XMARGIN(windowWidth, windowHeight, gridWidthDim, gridHeightDim)
    variable widthEdge = (windowWidth - CELLSIZE(windowWidth, windowHeight, gridWidthDim, gridHeightDim) * gridWidthDim)
    variable heightEdge = (windowHeight - CELLSIZE(windowWidth, windowHeight, gridWidthDim, gridHeightDim) * gridHeightDim)
    if widthEdge > heightEdge
        return round(widthEdge / 3)
    else
        return round(widthEdge / 2)
    endif
endf 
 
// the height from the top side of display window to
// the top side of snake's moving space.
// 蛇的移动空间的上边界到屏幕的上边界的距离。
function YMARGIN(windowWidth, windowHeight, gridWidthDim, gridHeightDim) 
    variable widthEdge = (windowWidth - CELLSIZE(windowWidth, windowHeight, gridWidthDim, gridHeightDim) * gridWidthDim)
    variable heightEdge = (windowHeight - CELLSIZE(windowWidth, windowHeight, gridWidthDim, gridHeightDim) * gridHeightDim)
    if widthEdge > heightEdge
        return round(heightEdge / 2)
    else
        return round(heightEdge / 3)
	endif
endf 
 
// background color
// 背景色
function BGCOLOR()  
    return [170, 190, 255]  
endf  
 
// color of the board of snake's moving space
// 蛇的移动空间的边界的颜色。
function borderCOLOR() 
    return [125, 255, 100, 100] 
endf 
 
// color of the wall
// 墙的颜色。
function WALLCOLOR() 
    return [125, 100, 100, 255] 
endf 
 
// color of the snake's body
// 蛇的身体的颜色。
function SNAKECOLOR() 
    return [155, 100, 255, 100] 
endf 
 
// color of the score
// 玩家得分的颜色。
function SCORECOLOR() 
    return [125, 90, 70, 0] 
endf 
 
// color of the text
// 文字的颜色。
function TEXTCOLOR() 
    return [225, 20, 20, 20] 
endf

// color of front edge (facing light edge) in the buttons
// 按钮上的向光边缘的颜色。
function BUTTONFRONTCOLOR()
    return [255, 255, 255]
endf

// color of back edge (not facing light edge) in the buttons
// 按钮上的背光边缘的颜色。
function BUTTONBACKCOLOR()
    return [0, 0, 0]
endf

// color of game over text
// 游戏结束文字的颜色
function GAMEOVERCOLOR() 
    return [225, 230, 230, 230] 
endf 

// scaling ratio
// 缩放比例
function SCALINGRATIO()
    return 0.5
endf

// calculate left top coordinate (in pixel) of a cell whose grid coordinate is coord
// 基于一个网格单元左上角基于像素点的坐标，网格单元的网格坐标为coord
function calcTopLeft(coord, cellSize, xMargin, yMargin) 
    return [coord[0] * cellSize + xMargin, coord[1] * cellSize + yMargin] 
endf 

// calculate initial place of food based on the grid coordinate.
// It depends on the level of the game
// 计算食物起始位置（基于蛇移动空间的网格坐标），注意食物的起始位置随游戏通关等级变化。
function calcFoodInitPlace(gridWidthDim, gridHeightDim, level)
    if level != 2
        return [gridWidthDim/2, gridHeightDim/2]
    else
        return [gridWidthDim*0.75, gridHeightDim*0.75]
    endif
endf

// calculate wall's place based on the grid coordinate
// 计算墙的位置（基于蛇移动空间的网格坐标）
function calcWallPlace(gridWidthDim, gridHeightDim, level) 
    variable wallPlace = [] 
    if level == 0 // game level zero // 游戏第0关
		// walls are placed at the four corner
		// 墙被放在四个角
        wallPlace = [[0, 0], [0, 1], [1, 0], [gridWidthDim - 1, 0], [gridWidthDim - 1, 1], [gridWidthDim - 2, 0], _
            [0, gridHeightDim - 1], [1, gridHeightDim - 1], [0, gridHeightDim - 2], _
            [gridWidthDim - 1, gridHeightDim - 1], [gridWidthDim - 1, gridHeightDim - 2], [gridWidthDim - 2, gridHeightDim - 1]]
    elseif level == 1 // game level one // 游戏第一关
		// walls are placed at the border of snake's moving space (i.e. border of the grid)
		// 墙被放在蛇的移动空间，也就是网格的边界
        for variable idx = 0 to gridWidthDim - 1 step 1 
            wallPlace = append_elem_to_ablist(wallPlace, [idx, 0])  
            wallPlace = append_elem_to_ablist(wallPlace, [idx, gridHeightDim - 1])  
        next 
        for variable idx = 1 to gridHeightDim - 2 step 1 
            wallPlace = append_elem_to_ablist(wallPlace, [0, idx])  
            wallPlace = append_elem_to_ablist(wallPlace, [gridWidthDim - 1, idx])  
        next 
    else // level == 2 // 游戏第二关
		// walls are placed at the vertical and horizontal middle lines of the snake moving space (i.e. grid)
		// 墙被放在蛇的移动空间，也就是网格的横向和纵向中心线的位置
        for variable idx = 0 to gridWidthDim - 1 step 1 
            wallPlace = append_elem_to_ablist(wallPlace, [idx, gridHeightDim/2])  
        next 
        for variable idx = 0 to gridHeightDim - 1 step 1 
            if idx == floor(gridHeightDim/2)
                continue
            endif
            wallPlace = append_elem_to_ablist(wallPlace, [gridWidthDim/2, idx])  
        next 
    endif
    return wallPlace 
endf 
 
// return the cells in the grid excluding the wall. The returned value is an array.
// If an element is 1, it means the element is a wall cell, if 0, means not wall.
// 返回所有非墙网格。该函数的返回值是一个矩阵，每一个元素表示一个单元，如果元素值为0，表示不是墙，如果是1，表示墙。
function calcExcludeWallPlace(wallPlace, gridWidthDim, gridHeightDim) 
    variable excludeWallPlace = alloc_array([gridWidthDim, gridHeightDim]) 
    for variable idx = 0 to size(wallPlace)[0] - 1 step 1 
        excludeWallPlace[wallPlace[idx][0]][wallPlace[idx][1]] = 1    // means it is a wall. 
    next 
    return excludeWallPlace 
endf 
 
// return the cells in the grid excluding the wall and snake body. The returned value is an array.
// If an element is 1, it means the element is a wall cell, if 2, means snake body, otherwise,
// should be 0.
// 返回所有非墙非蛇的网格。该函数的返回值是一个矩阵，每一个元素表示一个单元，如果元素值为0，表示不是墙也不是蛇，如果
// 是1，表示墙，如果是2，表示蛇。
function calcExcludeWallSnakePlace(excludeWallPlace, snakePlace)
    variable copyExcludeWallPlace = clone(excludeWallPlace)
    for variable idx = 0 to size(snakePlace)[0] - 1 step 1 
        copyExcludeWallPlace[snakePlace[idx][0]][snakePlace[idx][1]] = 2    // means it is snake's body. 
    next 
    return copyExcludeWallPlace 
endf 

// calculate the next place for food. It should be a randomly selected cell neither in wall nor
// in snake's body
// 计算食物的下一处位置。这应该是随机选择的非墙非蛇体的网格单元。
function getNextFoodPlace(excludeWallSnakePlace, wallPlace, snakePlace, gridWidthDim, gridHeightDim) 
    variable numOfPlaces = gridWidthDim * gridHeightDim - size(wallPlace)[0] - size(snakePlace)[0] 
    if numOfPlaces <= 0 
        return Null 
    endif 
    variable randomSelected = rand() * numOfPlaces 
    variable row = floor(randomSelected/gridWidthDim), col = mod(randomSelected, gridWidthDim) 
    while excludeWallSnakePlace[col, row] != 0 
		// go through the cells until we find a cell neither in wall nor in snake's body.
		// 顺序检查每一个网格直到找到一个非墙非蛇体的网格单元。
        col = col + 1 
        if col >= gridWidthDim 
            col = 0 
            row = row + 1 
            if row >= gridHeightDim 
                row = 0 
            endif 
        endif 
    loop 
    return [col, row] 
endf 

// draw snake or wall, points means the cells' grid coordinates
// 绘制蛇的身体或者墙，points参数用于存储构成墙或蛇的身体的网格单元的网格坐标
function drawPoints(drawBGOwner, display, points, color, cellSize, xMargin, yMargin, scalingRatio) 
    for variable idx = 0 to size(points)[0] - 1 step 1
		// draw rectangle cell by cell
		// 一个单元格一个单元格地画方块
        draw_rect(drawBGOwner, display, calcTopLeft(points[idx], cellSize, xMargin, yMargin) * scalingRatio, cellSize * scalingRatio, cellSize * scalingRatio, color, 0)  
    next 
endf 

// draw button text which must be horizontally and vertically center aligned with the rectangular button border
// 绘制按钮的文字。这写文字必须在水平和垂直方向都位于长方形按钮的中心
function drawButtonText(display, topLeft, width, height, text, isPushed, scalingRatio)
    variable btnTxtFnt = BUTTONTEXTFONT()
    variable textOrigin = calculate_text_origin(display, text, topLeft, width, height, 0, 0, btnTxtFnt)  
    draw_text("static element", display, text, textOrigin * scalingRatio, TEXTCOLOR(), btnTxtFnt * scalingRatio)
endf

// draw button's border on screen display. There are two states, pushed or unpushed. If the button is not pushed, left
// and top edges have front light color while right and bottom edges have back light color. Otherwise, left and top have
// back light color while right and bottom have front light color.
// 在显示窗口绘制按钮边界。注意按钮有两种状态：按下和没有按下。按钮在按下状态时，左上边界是背光色，右下边界是向光色；反之，左上是向光色右下背光色。
function drawButtonBorderOnScreen(info, display, topLeft, width, height, isPushed, btnFrontColor, btnBackColor)
    variable color1 = btnFrontColor, color2 = btnBackColor
    if isPushed // is button pushed? // 按钮按下了没有？
        color1 = btnBackColor // back light color // 背光色
        color2 = btnFrontColor // front light color // 向光色
    endif
    draw_line(info, display, topLeft, [topLeft[0], topLeft[1] + height], color1, 2) // left border // 左边界
    draw_line(info, display, topLeft, [topLeft[0] + width, topLeft[1]], color1, 2) // top border // 上边界
    draw_line(info, display, [topLeft[0], topLeft[1] + height], [topLeft[0] + width, topLeft[1] + height], color2, 2)  // bottom border // 下边界
    draw_line(info, display, [topLeft[0] + width, topLeft[1]], [topLeft[0] + width, topLeft[1] + height], color2, 2)  // right border // 右边界
endf

// determine if a pixel based xy coordinate is in a button's area (yes means the button is hit if xy is where player taps)
// 检测一个基于像素的xy的坐标是否位于按钮内（如果是，并且玩家点击位置位于xy，则意味者按钮被点中）
function isButtonHit(xy, btnLeftTop, btnW, btnH)
    if and(xy[0] >= btnLeftTop[0], xy[0] < btnLeftTop[0] + btnW, xy[1] >= btnLeftTop[1], xy[1] < btnLeftTop[1] + btnH)
        return true
    else
        return false
    endif
endf

// entry function. It may take one or zero parameter. The parameter tells the game what the score threshold
// for the player to proceed into next level. If no parameter, this parameter uses its default value which is 100.
// 入口函数，它接受一个参数或者不接受参数，参数告诉游戏多少分才能进入下一关，如果没有参数，玩家需要积满100分才能过关。
function run(...)
	// open a screen display window for game.
	// 为游戏打开一个显示窗口。
    variable DISPLAYSURF = open_screen_display("Hungry snake", BGCOLOR(), true, [WINDOWDEFAULTWIDTH(), WINDOWDEFAULTHEIGHT()], false)
    variable level = 0 // game level // 游戏通关等级
    variable score_thresh = 100 // game passing score // 通关分数
    if opt_argc > 0
        score_thresh = opt_argv[opt_argc - 1]
    endif
    while true
        drop_old_painting_requests("Hungry snake", DISPLAYSURF)
		// only if result > 0 (i.e. player collects more scores than needed), the game goes to next level.
		// 只有当result > 0，也就是用户得到足够多的分数，游戏才能通关。
        variable result = start_hungry_snake(DISPLAYSURF, level, score_thresh)
        if result < 0
            break // exit //退出
        elseif result > 0
            level = level + 1
        endif
    loop
	
	if get_country_language()[1] == "zh"
		print_line("本游戏是由MFP语言开发。MFP语言是一种非常容易上手的跨平台脚本编程语言。它的代码无需修改和编译，就可以在安卓和其他任意支持JAVA的个人电脑上运行。如果您对MFP编程语言感兴趣，请到百度手机或者酷安网下载MFP语言的IDE，可编程科学计算器，进行游戏开发。可编程科学计算器的安卓版自带运行于电脑上的MFP解释器，还可以创建APK安装包，真正实现电脑上编程调试，安卓上运行。还等什么，赶快试一下吧！")
	elseif get_country_language()[1] == "es"
		print_line("Este juego fue desarrollado por el lenguaje de programación MFP. MFP es un lenguaje de scripts multiplataforma para Android y cualquier PC con soporte para JAVA. Es fácil de aprender y fácil de programar. Usted puede desarrollar su script en PC y ejecutarlo sin ninguna modificación en Android. El IDE de MFP es Scientific Calculator Plus, que se puede descargar en Google Play https://play.google.com/store/apps/details?id=com.cyzapps.AnMath. Scientific Calculator Plus puede ejecutarse en Android y PC y puede crear el paquete de instalación de Android (APK) de los scripts MFP. Pruébalo y nunca te decepcionará.")
	else
		print_line("This game was developed by MFP programming language. MFP is a very easy-to-learn and cross-platform scripting language for Android and any PC with JAVA support. You develop an MFP script on PC once and run it everywhere (including Android and PC with a different OS). If you are interested in it, please download MFP's ide, i.e. Scientific Calculator Plus, from Google Play at https://play.google.com/store/apps/details?id=com.cyzapps.AnMath . Scientific Calculator Plus can run on Android and PC and can build Android installation package (APK) from MFP scripts. You will enjoy the easy and quick game programming.")
	endif
endf

// game's main function, DISPLAYSURF is the handle of screen display window, level is game's level
// and score_thresh is the threshold that player can pass to next level.
// 游戏主函数，DISPLAYSURF是显示窗口的句柄，level是游戏通关等级，score_thresh表示多少分通关。
function start_hungry_snake(DISPLAYSURF, level, score_thresh) 
    // Initial set up color values
    // 设置颜色变量
    variable snakeColor = SNAKECOLOR(), scoreColor = SCORECOLOR(), wallColor = WALLCOLOR(), borderColor = borderCOLOR()
    variable btnFrontColor = BUTTONFRONTCOLOR(), btnBackColor = BUTTONBACKCOLOR()
    
    // first of all, we store window size, grid dim, x, y margins, button size and gap, and scaling ratio 1/scaling ratio
    // in variables. This avoids calling functions repeatedly so that saves computing time.
    // 首先，我们把窗体的大小，蛇运动空间的网格尺寸，窗体和运动空间的边缘大小，按钮尺寸和间隔，缩放比例保存在变量中，这样避免了重复调用
    // 函数进行计算，节省了计算时间
    variable windowWidth = get_display_size(DISPLAYSURF)[0], windowHeight = get_display_size(DISPLAYSURF)[1] // window size // 显示窗体的大小
    variable gridWidthDim = GRIDWIDTHDIM(), gridHeightDim = GRIDHEIGHTDIM()  // dim of grid (i.e. snake's moving space) //蛇的运动空间的网格维度
    variable cellSize = CELLSIZE(windowWidth, windowHeight, gridWidthDim, gridHeightDim)  
    variable xMargin = XMARGIN(windowWidth, windowHeight, gridWidthDim, gridHeightDim)  // left margin // 左边缘宽度
    variable yMargin = YMARGIN(windowWidth, windowHeight, gridWidthDim, gridHeightDim)  // top margin // 上边缘宽度
    variable btnW = BUTTONWIDTH(), btnH = BUTTONHEIGHT() // width and height of buttons // 按钮尺寸
    variable btnGap = BUTTONGAP() // gap of button // 按钮间隔
    variable scalingRatio = SCALINGRATIO() // scaling ratio // 缩放比例
    variable oneOverScalingRatio = 1/scalingRatio // 1/scaling ratio // 缩放比例的倒数
    variable scaledCellSize = cellSize * scalingRatio // scaled cell size // 缩放后的网格单元的大小
    
    // initial place of food
    // 食物起始位置
    variable foodPlace = calcFoodInitPlace(gridWidthDim, gridHeightDim, level)
    // initial place of wall
    // 墙的起始位置
    variable wallPlace = calcWallPlace(gridWidthDim, gridHeightDim, level) 
    // initial place of snake
    // 蛇起始位置
    variable snakePlace = [[3, 5], [3, 4], [3, 3]]
    // moving direction: 1 right, -1 left, i up, -i down 
    // 移动方向，1表示向右，-1表示向左，i表示向上，-i表示向下
    variable moveDirection = -i
    // calculate the grid cells that snake can move, i.e. the moving space of snake excluding wall and snake body 
    // 蛇能够自由移动的的网格位置，也就是除去墙和蛇的身体之外的所有网格
    variable excludeBarrierPlace = calcExcludeWallPlace(wallPlace, gridWidthDim, gridHeightDim) 
    for variable idx = 0 to size(snakePlace)[0] - 1
        excludeBarrierPlace[snakePlace[idx][0], snakePlace[idx][1]] = 2
    next
    
    // right and bottom of snake's moving space(in pixels)
    // 蛇的运动空间的右侧和下侧（基于像素）
    variable gridRight = xMargin + gridWidthDim * cellSize, gridBottom = yMargin + gridHeightDim * cellSize
    // up, down, left, right buttons' left top positions
    // 上下左右按钮的左上角的位置
    variable upBtnLT = [-1, -1], downBtnLT = [-1, -1], leftBtnLT = [-1, -1], rightBtnLT = [-1, -1]
    variable shouldDrawButtons = true // should we draw the button? // 需要绘制按钮吗？
    // are the up, down, left, right buttons pushed?
    // 上下左右按钮是否被按下？
    variable upBtnPushed = false, downBtnPushed = false, leftBtnPushed = false, rightBtnPushed = false
    if (windowWidth - gridRight > btnW * 3)    // buttons are on right hand side // 按钮放在右边
        upBtnLT = [(windowWidth + gridRight)/2 - 0.5 * (btnW + btnGap), windowHeight / 2 - 1.5 * btnH - btnGap]
        downBtnLT = [(windowWidth + gridRight)/2 - 0.5 * (btnW + btnGap), windowHeight / 2 + 0.5 * btnH + btnGap]
        leftBtnLT = [(windowWidth*0.25+ gridRight*0.75) - 0.5 * (btnW + btnGap), windowHeight / 2 - 0.5 * btnH]
        rightBtnLT = [(windowWidth*0.75+ gridRight*0.25) - 0.5 * (btnW + btnGap), windowHeight / 2 - 0.5 * btnH]
    elseif (windowHeight - gridBottom > btnH * 3)    // bottons are in bottom // 按钮放在屏幕下部
        upBtnLT = [windowWidth /2 - 0.5 * (btnW + btnGap), (windowHeight + gridBottom)/2 - 1.5 * btnH - btnGap]
        downBtnLT = [windowWidth /2 - 0.5 * (btnW + btnGap), (windowHeight + gridBottom)/2 + 0.5 * btnH + btnGap]
        leftBtnLT = [windowWidth /4 - 0.5 * (btnW + btnGap), (windowHeight + gridBottom)/2 - 0.5 * btnH]
        rightBtnLT = [windowWidth * 0.75 - 0.5 * (btnW + btnGap), (windowHeight + gridBottom)/2 - 0.5 * btnH]
    else
        shouldDrawButtons = false // buttons are not needed // 不需要按钮
    endif
    
	// open an empty image display
	// 打开一个空的图像显示窗口（image display）
    variable boardImageDisplay = open_image_display(null) 
	// adjust it's size to game display window's size times scaling ratio
	// 将图像显示窗口的大小调整为游戏真实显示窗口的大小乘以缩放系数
    set_display_size(boardImageDisplay, windowWidth * scalingRatio, windowHeight * scalingRatio) 
	// calculate text origin of level information 
	// 计算通关级数信息文字的起始位置
    variable textOrigin = [10, 10]
    variable levelFontSize = LEVELFONTSIZE()
    if xMargin > yMargin
		// text is in the center of left edge rectangle
		// 文字位于左边缘长方形的正中
        textOrigin = calculate_text_origin(DISPLAYSURF, "level " + level, [0, 0], xMargin, windowHeight, 0, 0, levelFontSize)
    else
		// text is in the center of top edge rectangle
		// 文字位于上边缘长方形的正中
        textOrigin = calculate_text_origin(DISPLAYSURF, "level " + level, [0, 0], windowWidth, yMargin, 0, 0, levelFontSize)
    endif
	// draw level information text. Note that the text is scaled down to fit the image.
	// 绘制通关级数信息文字。注意由于图像显示窗口的真实尺寸比游戏真实显示窗口的尺寸要小，文字被相应缩小了。
    draw_text("static element", boardImageDisplay, "level " + level, textOrigin * scalingRatio, scoreColor, levelFontSize * scalingRatio) 
	// draw the border of snake's moving space. Note that the rectangle is scaled down to fit the image.
	// 绘制蛇的移动空间的边界。注意由于图像显示窗口的真实尺寸比游戏真实显示窗口的尺寸要小，边界矩形被相应缩小了。
    draw_rect("static element", boardImageDisplay, [xMargin, yMargin] * scalingRatio, gridWidthDim * scaledCellSize, gridHeightDim * scaledCellSize, borderColor, 1)  
	// draw the wall. Note that the wall is scaled down to fit the image.
	// 绘制墙体。注意由于图像显示窗口的真实尺寸比游戏真实显示窗口的尺寸要小，墙体被相应缩小了。
    drawPoints("static element", boardImageDisplay, wallPlace, wallColor, cellSize, xMargin, yMargin, scalingRatio)
    if(shouldDrawButtons)
        // we draw text only for each button because button text is static while button border is not.
		// 在这里仅仅绘制按钮上的文字而不绘制按钮的边框因为文字不会变化，而边框会随着按下弹起发生变化。
        drawButtonText(boardImageDisplay, upBtnLT, btnW, btnH, "Up", false, scalingRatio)
        drawButtonText(boardImageDisplay, downBtnLT, btnW, btnH, "Down", false, scalingRatio)
        drawButtonText(boardImageDisplay, leftBtnLT, btnW, btnH, "Left", false, scalingRatio)
        drawButtonText(boardImageDisplay, rightBtnLT, btnW, btnH, "Right", false, scalingRatio)
    endif
	// get snapshot of the image display, note that we update the image display before taking snapshot
	// 取回图像显示窗口的截图。注意在获取截图前，先将图像显示窗口更新。
    variable boardImage = get_display_snapshot(boardImageDisplay, true)
	// shutdown image display
	// 关闭图像显示窗口
    shutdown_display(boardImageDisplay)
	// set the snapshot of the image display to be game's display window's background image.
	// note that the mode is stretching the background image to fit the whole game's display window
	// as the snapshot image is smaller than the game's display window.
	// 将上述图像显示窗口的截屏设置为游戏真实显示窗口的背景图案。注意背景图案的设置模式是1，也就是缩放背景图案让它和
	// 游戏真实显示窗口大小一致。
    set_display_bgrnd_image(DISPLAYSURF, boardImage, 1)
	
	// draw snake body cell by cell
	// 一个一个单元格地绘制蛇的身体
    variable totalSnakeLen = size(snakePlace)[0]
    for variable idx = 0 to size(snakePlace)[0] - 1
        draw_rect(["snake", size(snakePlace)[0] - 1 - idx], DISPLAYSURF, calcTopLeft(snakePlace[idx], cellSize, xMargin, yMargin), cellSize, cellSize, snakeColor, 0)
    next
    
	// calculate food left top coordinate (in pixels)
	// 计算食物左上角基于像素的坐标
    variable foodPlaceXY = calcTopLeft(foodPlace, cellSize, xMargin, yMargin)
	// load food image. Note that for MFP app, the way to load image is different.
	// 将作为食物的图片装入内存。注意对于安卓应用，读取图片的方法和常规办法不同。
	variable foodImage
	// when building MFP App, we need copy the image to asset's resource.zip, then when we run the app, call
	// load_image_from_zip to load image from apk's asset's resource.zip.
	// 当创建Apk包时，我们需要图片拷贝到APK的asset的resource.zip文件中。在运行MFP应用时，调用load_image_from_zip从APK的
	// asset的resource.zip文件中读出图片
	@build_asset copy_to_resource(iff(is_sandbox_session(), get_sandbox_session_resource_path() + "images/food.png", _
									is_mfp_app(), [1, get_asset_file_path("resource"), "images/food.png"], _
									get_upper_level_path(get_src_file_path()) + "food.png"), "images/food.png")
	if is_sandbox_session()
		foodImage = load_image(get_sandbox_session_resource_path() + "images/food.png")
	elseif is_mfp_app()
		foodImage = load_image_from_zip(get_asset_file_path("resource"), "images/food.png", 1)
	else
		foodImage = load_image(get_upper_level_path(get_src_file_path()) + "food.png")
	endif

	// draw food
	// 绘制食物
    variable foodImageSize = get_image_size(foodImage)
    draw_image("food", DISPLAYSURF, foodImage, foodPlaceXY[0], foodPlaceXY[1], cellSize/foodImageSize[0], cellSize/foodImageSize[1])
     
    variable score = 0, gameIsOver = false 
    variable xHit = -1, yHit = -1
	// button area (i.e. the minimum rectangle which includes left, right, top and bottom buttons)
	// 游戏显示窗口的按钮区域位置，也就是包括上下左右四个按钮的最小长方形。
    variable btnsLeft = leftBtnLT[0], btnsRight = rightBtnLT[0] + btnW, btnsTop = upBtnLT[1], btnsBottom = downBtnLT[1] + btnH
    while true // main game loop  // 游戏主循环
        upBtnPushed = downBtnPushed = leftBtnPushed = rightBtnPushed = false // the buttons haven't been pushed down //四个按钮还没有按下
        variable clickedSpace = null
        variable oldMoveDirection = moveDirection
        do  // looping to read player's input events // 循环读取玩家输入事件
            variable giEvent = pull_event(DISPLAYSURF)  
            if giEvent == Null  
                // no event to handle // 没有输入事件
                break  
            elseif get_event_type_name(giEvent) == "GDI_CLOSE"  
                // quit  // 游戏退出事件
                return -1  
            elseif get_event_type(giEvent) == 106 // mouse or finger slided // 鼠标或手指滑动事件
				// x1 and y1 are the coordinate when sliding starts, x2 and y2 are the coordinate when sliding finishes
				// x1和y1是滑动开始时的坐标位置，x2和y2是滑动结束时的坐标位置
                variable x1 = get_event_info(giEvent, "last_x")
                variable y1 = get_event_info(giEvent, "last_y")
                variable x2 = get_event_info(giEvent, "x")
                variable y2 = get_event_info(giEvent, "y")
				// ensure sliding event to control snake moving direction doesnt happen in button area.
				// 确保用于控制蛇移动方向的滑动事件不是在按钮区域发生
                if or(!shouldDrawButtons, x1 < btnsLeft, x1 > btnsRight, y1 < btnsTop, y1 > btnsBottom)
					// calculate moving direction
					// 计算蛇的移动方向
                    if abs(y2 - y1) > abs(x2 - x1) 
                        if y2 > y1    // move down //向下移动
                            moveDirection = -i 
                        else // move up  //向上移动
                            moveDirection = i 
                        endif 
                    elseif abs(y2 - y1) < abs(x2 - x1) 
                        if x2 > x1    // move right  //向右移动
                            moveDirection = 1 
                        else // move left  //向左移动
                            moveDirection = -1 
                        endif 
                    endif // if y2 - y1 == x2 - x1, do nothing // 如果移动方向正好是45°或者135°，就不改变当前的运动方向
                endif
            elseif get_event_type_name(giEvent) == "POINTER_DOWN" // mouse or finger tapped down // 鼠标或手指按下事件   
                if gameIsOver
					// if game is over at this level, identify if player can go to next level based on the score
					// 如果这一关游戏已经结束，根据得分情况判断玩家是否能够通关
                    if and(level < 2, score >= score_thresh)
                        return 1    // can go to next level. // 能够进入下一关
                    else
                        return 0    // cannot go to next level. // 无法进入下一关
                    endif
                elseif (shouldDrawButtons)
					// if game is not over at this level, identify if a button is hit
					// 如果这一关游戏还未结束，判断是否有按钮被按下
                    xHit = get_event_info(giEvent, "x")
                    yHit = get_event_info(giEvent, "y")
                    if and(xHit >= leftBtnLT[0], yHit >= upBtnLT[1])
                        // this event happens in the button area. If any button is hit,
						// set button pushed state to be true and change snake moving direction.
						// 这个事件发生在按钮区域。如果有按钮被按下，更新按钮的状态并重置蛇的移动方向。
                        if isButtonHit([xHit, yHit], upBtnLT, btnW, btnH)
                            upBtnPushed = true
                            moveDirection = i
                        elseif isButtonHit([xHit, yHit], downBtnLT, btnW, btnH)
                            downBtnPushed = true
                            moveDirection = -i
                        elseif isButtonHit([xHit, yHit], leftBtnLT, btnW, btnH)
                            leftBtnPushed = true
                            moveDirection = -1
                        elseif isButtonHit([xHit, yHit], rightBtnLT, btnW, btnH)
                            rightBtnPushed = true
                            moveDirection = 1 
                        endif
                    endif
                endif
            endif  
        until false
        
        if !gameIsOver 
			// if game at this level is not over, we need to repaint the dynamic object
			// drop old button border painting requests and then send new button border painting requests
			// 如果这一关游戏还没有结束，我们需要重新绘制所有的非静止的物件
			// 移除按钮边缘的旧的绘制请求事件，发送新的按钮边缘的绘制请求事件
            drop_old_painting_requests("button border", DISPLAYSURF)
            if(shouldDrawButtons)
				// draw button border directly to the game screen display at original size
				// 直接在屏幕上绘制按钮的边缘，保存按钮原始大小而不进行缩放
                drawButtonBorderOnScreen("button border", DISPLAYSURF, upBtnLT, btnW, btnH, upBtnPushed, btnFrontColor, btnBackColor)
                drawButtonBorderOnScreen("button border", DISPLAYSURF, downBtnLT, btnW, btnH, downBtnPushed, btnFrontColor, btnBackColor)
                drawButtonBorderOnScreen("button border", DISPLAYSURF, leftBtnLT, btnW, btnH, leftBtnPushed, btnFrontColor, btnBackColor)
                drawButtonBorderOnScreen("button border", DISPLAYSURF, rightBtnLT, btnW, btnH, rightBtnPushed, btnFrontColor, btnBackColor)
            endif
            //update_display(DISPLAYSURF)    // too frequent update display may cause blink //太频繁刷新屏幕会造成闪烁
             
            variable deltaX = 0, deltaY = 0 
            if oldMoveDirection == -moveDirection
                // cannot turn to opposite way
				// 无法调转蛇的运动方向
                moveDirection = oldMoveDirection
            endif
            select (moveDirection) // determine snake head movement from move direction // 根据运动方向计算蛇头移动的量
            case 1 
                deltaX = 1 
                deltaY = 0 
                break 
            case -1 
                deltaX = -1 
                deltaY = 0 
                break 
            case i 
                deltaX = 0 
                deltaY = -1 
                break 
            case -i 
                deltaX = 0 
                deltaY = 1 
                break 
            default 
                // do nothing 
            ends 
             
			// calculate the new snake head place (in grid coordinate)
			// 计算蛇头基于网格坐标的新的位置
            variable newX = mod(snakePlace[0][0] + deltaX, gridWidthDim) 
            variable newY = mod(snakePlace[0][1] + deltaY, gridHeightDim) 
            variable tail2Remove = null, head2Add = null, newFood = null, newScore = null    // the things to draw. // 需要绘制的东西
            if and(newX == foodPlace[0], newY == foodPlace[1])
    			// eat the food. play the eat food sound.
				// 吃到食物，演奏吃到食物的声音。
                @build_asset copy_to_resource(iff(is_sandbox_session(), get_sandbox_session_resource_path() + "sounds/eatfood.wav", _
													is_mfp_app(), [1, get_asset_file_path("resource"), "sounds/eatfood.wav"], _
													get_upper_level_path(get_src_file_path()) + "eatfood.wav"), "sounds/eatfood.wav")
                if is_sandbox_session()
                    play_sound(get_sandbox_session_resource_path() + "sounds/eatfood.wav", false)
                elseif is_mfp_app()
                    play_sound_from_zip(get_asset_file_path("resource"), "sounds/eatfood.wav", 1, false)
                else
                    play_sound(get_upper_level_path(get_src_file_path()) + "eatfood.wav", false)
                endif
				// snake head is at old food's place
				// 蛇头现在在食物的旧的位置
                head2Add = [newX, newY]
				// because snake head has occpied the cell, food or snake body cannot take it again
				// 由于新的蛇头占据了该单元格，蛇的身体和食物不可能出现在该单元格
                excludeBarrierPlace[newX, newY] = 2
				// insert new head's position in the snake position list
				// 将新的蛇头的位置插入蛇的身体空间位置数组
                snakePlace = insert_elem_into_ablist(snakePlace, 0, head2Add)
				// calculate new food place
				// 计算食物的新的位置
                newFood = foodPlace = getNextFoodPlace(excludeBarrierPlace, wallPlace, snakePlace, gridWidthDim, gridHeightDim) 
				// update score
				// 更新分数
                newScore = score = score + size(snakePlace)[0] 
            elseif excludeBarrierPlace[newX, newY] != 0
			    // hit the wall or itself. Play the hit wall sound and game is over at this level.
				// 蛇撞到了墙或它自己。演奏撞墙的声音。本关游戏结束。
                @build_asset copy_to_resource(iff(is_sandbox_session(), get_sandbox_session_resource_path() + "sounds/hitwall.wav", _
													is_mfp_app(), [1, get_asset_file_path("resource"), "sounds/hitwall.wav"], _
													get_upper_level_path(get_src_file_path()) + "hitwall.wav"), "sounds/hitwall.wav")
                if is_sandbox_session()
                    play_sound(get_sandbox_session_resource_path() + "sounds/hitwall.wav", false)
                elseif is_mfp_app()
                    play_sound_from_zip(get_asset_file_path("resource"), "sounds/hitwall.wav", 1, false)
                else
                    play_sound(get_upper_level_path(get_src_file_path()) + "hitwall.wav", false)
                endif
                gameIsOver = true 
            else
    			// normal move 
				// 常规移动
                head2Add = [newX, newY]
				// because snake head has occpied the cell, food or snake body cannot take it again
				// 由于新的蛇头占据了该单元格，蛇的身体和食物不可能出现在该单元格
                excludeBarrierPlace[newX, newY] = 2
				// insert the new snake head place into snakePlace list
				// 将新的蛇头的位置插入蛇的身体空间位置数组
                snakePlace = insert_elem_into_ablist(snakePlace, 0, head2Add)
				// remove tail of the snake
				// 将蛇尾的最后一个单元格移去
                variable tailIdx = size(snakePlace)[0] - 1
                tail2Remove = snakePlace[tailIdx]
				// now the cell is available for food and snake's body
				// 现在单元格空出来了，食物和蛇的身体可以占用该单元格了
                excludeBarrierPlace[tail2Remove[0], tail2Remove[1]] = 0
				// remove the old snake tail place into snakePlace list
				// 将旧的蛇尾的位置从蛇的身体空间位置数组中去掉
                snakePlace = remove_elem_from_ablist(snakePlace, tailIdx) 
            endif
             
            // game hasn't been over so that redraw the snake, food and score
			// 本关游戏还未结束，所以重画蛇，食物和分数
            if head2Add != null
				// remove all the old painting event requests for snake from the painting request scheduler
				// 将旧的蛇的绘图事件从绘图事件调度器中移除
                drop_old_painting_requests(["snake", totalSnakeLen - size(snakePlace)[0] + 1], DISPLAYSURF)
				// redraw snake body cell by cell
				// 重新一个一个单元格地绘制蛇的身体
                draw_rect(["snake", totalSnakeLen], DISPLAYSURF, calcTopLeft(head2Add, cellSize, xMargin, yMargin), cellSize, cellSize, snakeColor, 0)
                totalSnakeLen = totalSnakeLen + 1
            endif
            if newFood != null
				// remove the old painting event request for food from the painting request scheduler
				// 将旧的食物的绘图事件从绘图事件调度器中移除
                drop_old_painting_requests("food", DISPLAYSURF)
				// calculate food's position and redraw the food
				// 计算食物的位置并且重绘食物
                foodPlaceXY = calcTopLeft(newFood, cellSize, xMargin, yMargin)
                draw_image("food", DISPLAYSURF, foodImage, foodPlaceXY[0], foodPlaceXY[1], cellSize/foodImageSize[0], cellSize/foodImageSize[1])
            endif
            if newScore != null
				// repaint score
				// 重绘分数
                drop_old_painting_requests("score", DISPLAYSURF)
                draw_text("score", DISPLAYSURF, ""+newScore, [10, windowHeight - 32], scoreColor, 25)
            endif
            update_display(DISPLAYSURF) // update game display window // 更新游戏显示窗口
        endif
        if gameIsOver 
            // game at this level has been over. Drop all the painting events.
            // 本关游戏结束，移除所有的绘图事件。  
            drop_old_painting_requests("Hungry snake", DISPLAYSURF)
            drop_old_painting_requests("snake", DISPLAYSURF)
            drop_old_painting_requests("food", DISPLAYSURF)
            drop_old_painting_requests("score", DISPLAYSURF)
            drop_old_painting_requests("button border", DISPLAYSURF)
			// set game screen display window's background to black
			// 设置游戏显示窗口的背景为黑色
            set_display_bgrnd_image(DISPLAYSURF, null, 1)
			// construct text to tell player if this level has passed or not.
			// 创建文本告诉用户是否通关升级。
            variable text = "Your final score for level " + level + " is " + score
            if and(level < 2, score >= score_thresh)
                text = text + "\nCongratulations! You pass this level."
            endif
            text = text + "\nPlease click the screen to continue."
            clear_rect("Hungry snake", DISPLAYSURF, [0, 0], windowWidth, windowHeight) 
			// ensure the text is in the middle of the game display window
			// 确保文本位于游戏显示窗口的中央
            variable textOrigin = calculate_text_origin(DISPLAYSURF, text, [0, 0], windowWidth, windowHeight, 0, 0, 30)  
			// send draw text request
			// 发出绘制文本的请求
            draw_text("Hungry snake", DISPLAYSURF, text, textOrigin, GAMEOVERCOLOR(), 30)   
            update_display(DISPLAYSURF)  // update game display window // 更新游戏显示窗口
        endif 
        sleep(MOVEINTERVAL())  // sleep a while //休眠一会儿
    loop 

endf 
 
endcs 
