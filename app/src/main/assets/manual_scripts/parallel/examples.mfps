#!/usr/bin/mfplang
#This function runs parallel computing example. It has one parameter which is its working
#mode. There are three working modes. The first one (parameter value is 1) is to run local
#tcpip parallel computing test. In this mode both client and server are using localhost
#address, i.e. 127.0.0.1. The second mode (parameter value is 2) is server mode. User needs
#to input server address, which is the TCPIP address of this device. After server starts
#it will bind the address and listen to any incoming connection requests. The third one
#(parameter value is 3) is client mode. User needs to input both client address and server
#address. Then the program will send a call block to the remote server and run the call
#block there.
#After the call block returns, the client program prints the returned value and updated
#values of call block parameters.
#这个函数是并行计算的一个例子。它有一个参数，这个参数是它的工作模式。它有三种模式。第一种模式（参数值是1）
#是本地模式。在这种模式下，客户端和服务器均使用本地localhost地址，也就是127.0.0.1。第二种模式（参数值是2）
#是服务器模式。用户需要输入服务器的地址，也就是本机的IP地址。在服务器启动之后，它将会绑定这个IP地址并监听
#从其它进程传来的连接请求。第三种模式（参数值是3）是客户端模式。用户需要输入客户端地址和服务器地址。然后客
#户端会向远端的服务器发送一个call程序块。远端的服务器运行这个call程序块并返回结果。客户端将会把返回的结果
#和call程序块的参数变量的新值打印出来。


@execution_entry mfpexample :: runTCPParaComp(@) 

citingspace ::mfpexample

Help 
@language: 
  This function runs parallel computing example. It has three modes. The first one is to
  run local tcpip parallel computing test. In this mode both client and server are using
  localhost address, i.e. 127.0.0.1. The second mode is server mode. User needs to input
  input server address, which is the TCPIP address of this device. After server starts
  it will bind the address and listen to any incoming connection requests. The third one
  is client mode. User needs to input both client address and server address. Then the
  program will send a call block to the remote server and run the call block there.
  After the call block returns, the client program prints the returned value and updated
  values of call block parameters.
@end 
@language:simplified_chinese 
  这个函数是并行计算的一个例子。它有三种模式。第一种模式是本地模式。在这种模式下，客户端和服务器均使用本地
  localhost地址，也就是127.0.0.1。第二种模式是服务器模式。用户需要输入服务器的地址，也就是本机的IP地址。在
  服务器启动之后，它将会绑定这个IP地址并监听从其它进程传来的连接请求。第三种模式是客户端模式。用户需要输入客户
  端地址和服务器地址。然后客户端会向远端的服务器发送一个call程序块。远端的服务器运行这个call程序块并返回结果。
  客户端将会把返回的结果和call程序块的参数变量的新值打印出来。
@end 
endh 
function runTCPParaComp(mode)
	//variable mode = 1
	//mode = input("Please input mode: 2 for server, 3 for client, other for local:\n")
	if or(mode == 2, trim(""+mode) == "2")
		// server mode
		variable local_address
		print("Please select a valid TCPIP address from your local addresses:\n")
		print_all_host_tcp_addresses()
		print("\n")
		local_address = input("The server's TCPIP address you choose is:\n", "S")
		start_pcom_server("TCPIP", local_address, false)
		start_pcom_server("127.0.0.4")
	elseif or(mode == 3, trim(""+mode) == "3")
		// client mode
		variable local_address, server_address
		print("Please select a valid TCPIP address from your local addresses:\n")
		print_all_host_tcp_addresses()
		print("\n")
		local_address = input("The client's TCPIP address you choose is:\n", "S")
		server_address = input("Server's TCPIP address is:\n", "S")
		start_pcom_client3(local_address, server_address)
	else
		// local mode
		test_local_tcp_parallel()
	endif
endf

Help 
@language: 
  This function all the TCPIP addresses on each interface of the device. The
  output is well-formated so that user can clearly see what TCPIP addresses this
  device has. If an interface doesn't have any TCPIP address, it is skipped.
@end 
@language:simplified_chinese 
  这个函数打印出本地设备的所有网络界面的TCPIP地址。打印输出的文本是经过格式处理的以方便阅读。如果某
  一个网络界面没有TCPIP地址，它将被跳过，不在打印输出中显示出来。
@end 
endh
function print_all_host_tcp_addresses()
	variable all_local_addresses
	all_local_addresses = get_all_host_addresses("TCPIP")[0,1]
	for variable index = 0 to size(all_local_addresses)[0] - 1 step 1
		variable all_interface_addresses = all_local_addresses[index]
		if size(all_interface_addresses[1])[0] == 0
			continue
		endif
		print("============= " + all_local_addresses[index, 0] + " =============\n")
		for variable index1 = 0 to size(all_interface_addresses)[1] - 1 step 1
			variable interface_addr = all_interface_addresses[1,index1]
			print(interface_addr + "\n")
		next
	next	
endf

Help 
@language: 
  This function tests local tcp ip parallel computing. It starts a server at 127.0.0.1 and
  initialize a call from 127.0.0.1 to server. After server finishes call running and result
  is returned back, both the connection and the server are shutdown.
@end 
@language:simplified_chinese 
  这个函数测试在本地进行TCPIP并行计算。本函数在127.0.0.1启动一个服务器然后从本地也就是127.0.0.1
  向服务器发送一个call指令。指令在服务器执行并返回结果，然后连接和服务器都被关闭。 
@end 
endh 
function test_local_tcp_parallel()
	variable local_interface, ret
	local_interface = ::mfp::paracomp::connect::generate_interface("TCPIP")
	ret = ::mfp::paracomp::connect::initialize_local(local_interface)
	print("initialize_local ret = " + ret + "\n")
	ret = ::mfp::paracomp::connect::listen(local_interface)
	print("listen ret = " + ret + "\n")

	ret = ::mfp::paracomp::connect::connect(local_interface, local_interface)
	print("connect ret = " + ret + "\n")

	variable conn = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")


	variable a = [2, 7.8-4.9i], b = "hekko, 48", c, d = 890
	call conn on a, b, d
	    a = 88
	    b = "KIL"
	    print("Call: Before suspend_until_cond, a = " + a + " b = " + b + " ....\n")
		suspend_until_cond(d, true, "==", 94)
	    print("Call: After suspend_until_cond, a = " + a + " b = " + b + " ....\n")
		sleep(3000)
		d = 38
	    print("Call: After set d's new value, d = " + d + " ....\n")
		sleep(3000)
		print("Call: ==== Now do synchronization test ====\n")
		print("Call: set d HHH\n")
		d = "HHH"
		suspend_until_cond(d)
		print("Call: d = " + d + " ....\n")
	    return 54
	endcall c
	print("Main: Before sleep, a = " + a + " b = " + b + " ....\n")
	sleep(2000)
	print("Main: After sleep, a = " + a + " b = " + b + " ....\n")
	a = 33.33
	b = -i
	print("Main: Before set d, d = " + d + " ....\n")
	d = 94	// now remote could continue.
	print("Main: After set d, d = " + d + ", wait for d to change ....\n")
	suspend_until_cond(d)
	print("Main: d is changed, d = " + d + " ....\n")
	print("Main: ==== Now do synchronization test ====\n")
	suspend_until_cond(d, true, "==", "HHH")
	print("Main: d = " + d + " ....\n")
	call local
		suspend_until_cond(d, true, "==", "abc")
		print("Call 1: d = " + d + " ....\n")
	endcall
	sleep(3000)
	print("Main: set d abc\n")
	d = "abc"
	print_line("c = " + c)
	print_line("a = " + a + " b = " + b)

	// TCPIP interface may not include port, but close_connection needs full address including port.
	// As such close_connection may not be able to find the connection.
	// TCPIP界面可能不包括端口。但是close_connection函数需要完整的地址包括端口，所以下面的函数会抛出异常。
	//close_connection(local_interface, local_interface)
	close_connection(conn)
	close_local(local_interface)
endf

Help 
@language: 
  This function starts a parallel computing server. It accepts at most two parameters. The
  first one is string based protocol, like "TCPIP". The second one is string based address
  like "192.168.1.133". Both of the parameters are optional. If there is only one parameter
  it must be TCP IP address. If no parameter is provided, the protocol by default will be
  "TCPIP" and the address by default will be "127.0.0.1".
@end 
@language:simplified_chinese 
  这个函数启动一个并行计算服务。它接受两个参数，第一个参数是基于字符串的协议名，比如"TCPIP"。第
  二个参数是地址，比如"192.168.1.133"。这两个参数都是可省略的。如果只提供一个参数给这个函数，那
  么这个参数是TCP IP的地址。如果没有提供参数给这个函数，那么协议的缺省值是"TCPIP"，地址的缺省值
  是"127.0.0.1"。
@end 
endh
function start_pcom_server(...)
	variable server_protocol = "TCPIP", server_addr = "127.0.0.1", block_when_finish = true
	if (opt_argc >= 3)
		server_protocol = opt_argv[0]
		server_addr = opt_argv[1]
		block_when_finish = opt_argv[2]
	elseif (opt_argc >= 2)
		server_protocol = opt_argv[0]
		server_addr = opt_argv[1]
	elseif (opt_argc == 1)
		server_addr = opt_argv[0]
	endif
	variable server_interface, ret
	server_interface = ::mfp::paracomp::connect::generate_interface(server_protocol, server_addr)
	ret = ::mfp::paracomp::connect::initialize_local(server_interface)
	print("initialize_local ret = " + ret + "\n")
	ret = ::mfp::paracomp::connect::listen(server_interface)
	print("listen ret = " + ret + "\n")
	if block_when_finish
		input("Press enter to quit the program\n", "S")
	endif
	return server_interface
endf

Help 
@language: 
  This function starts a sample parallel computing call based on TCPIP protocol. It
  accepts at most 4 parameters. The first one is string based client address (i.e. local
  address), like "192.168.1.145". The second one is string based server address (i.e.
  remote address), like "192.168.1.133". The third one is string based client2's address
  and the fourth is string based server2's address. All the parameters are optional. By
  default they are "127.0.0.1", "127.0.0.2", "127.0.0.3" and "127.0.0.4" respectively.
  This function is to test synchronization of call block parameters.
@end 
@language:simplified_chinese 
  这个函数发起一个基于TCPIP协议的并行计算示例call指令。它接受4个参数，分别是客户端1的地址，
  服务端1的地址，客户端2的地址，服务端2的地址。这些参数都是可省略的，缺省值分别为"127.0.0.1"，
  "127.0.0.2"，"127.0.0.3"和"127.0.0.4"。
  这个函数用于测试call程序块参数的传递和同步
@end 
endh
function start_pcom_client0(...)
	variable protocol = "TCPIP", local_addr = "127.0.0.1", remote_addr = "127.0.0.2", local_addr2 = "127.0.0.3", remote_addr2 = "127.0.0.4"
	if (opt_argc >= 4)
		local_addr = opt_argv[0]
		remote_addr = opt_argv[1]
		local_addr2 = opt_argv[2]
		remote_addr2 = opt_argv[3]
	elseif (opt_argc >= 2)
		local_addr = opt_argv[0]
		remote_addr = opt_argv[1]
	elseif (opt_argc == 1)
		local_addr = opt_argv[0]
	endif
	print_line("main : local_addr = " + local_addr + " remote_addr = " + remote_addr + " local_addr2 = " + local_addr2 + " remote_addr2 = " + remote_addr2)
	variable local_interface, remote_interface, ret
	local_interface = ::mfp::paracomp::connect::generate_interface(protocol, local_addr)	// client address
	ret = ::mfp::paracomp::connect::initialize_local(local_interface)
	print("main : initialize_local client ret = " + ret + "\n")

	remote_interface = ::mfp::paracomp::connect::generate_interface(protocol, remote_addr)	// server address
	ret = ::mfp::paracomp::connect::connect(local_interface, remote_interface)
	print("main : connect ret = " + ret + "\n")

	variable conn1 = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")

	variable a = "This is Linux", b = [23,10,1978], c=-0.381+0.794i, d = 38
	call conn1 on a, b, d
		a = "conn1"	// tell the code that created this call block that I am ready.
		sleep(1000)
		variable local_interface2, remote_interface2, ret
		local_interface2 = ::mfp::paracomp::connect::generate_interface(protocol, local_addr2)	// client address
		ret = ::mfp::paracomp::connect::initialize_local(local_interface2)
		print("conn1 : initialize_local ret = " + ret + "\n")
		remote_interface2 = ::mfp::paracomp::connect::generate_interface(protocol, remote_addr2)	// server address
		ret = ::mfp::paracomp::connect::connect(local_interface2, remote_interface2)
		print("conn1 : connect ret = " + ret + "\n")
		variable conn2 = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")
		variable conn2Ret
		call conn2 on a, b, d
			suspend_until_cond(d, false, ">", 56)
			print("conn2 : a = " + a + " b = " + b + + " d = " + d + "\n")
	    	
		endcall conn2Ret
	    print("conn1 : a = " + a + " b = " + b + " c = " + c + "\n")
		
		print_line("conn1 : ==== Now let's run synchronization test ====")
		sleep(3000)
		print_line("conn1 : Set d = 38, which is original value")
		d = 38
		sleep(3000)
		print_line("conn1 : Set d = 57")
		d = 57
		print_line("conn1 : conn2Ret = " + conn2Ret)
		suspend_until_cond(d, false, "==") // check d immediate, do not wait until d is updated.
		print_line("conn1 : Before suspend, no wait on d as checked immediately")
		suspend_until_cond(d, false, "==", 888) // check d immediate, do not wait until d is updated.
		print_line("conn1 : After suspend, d = " + d)

		// TCPIP interface may not include port, but close_connection needs full address including port.
		// As such close_connection may not be able to find the connection.
		// TCPIP界面可能不包括端口。但是close_connection函数需要完整的地址包括端口，所以下面的函数会抛出异常。
		//close_connection(local_interface2, remote_interface2)
		close_local(local_interface2)
	    return 23.79
	endcall c

	print_line("main : ==== Now let's run synchronization test ====")
	print("main : Before change, a = " + a + " b = " + b + "\n")
	// if we want to propagate call parameter change to remote call blocks,
	// we have to wait until remote call blocks initialized, otherwise the
	// change may not be detected by remote call block(s)
	suspend_until_cond(a, false, "==", "conn1")	// immediate check if a is conn1 (which means remote call has started)
	a = a + " " + a
	b = "Baishou xiangzhi youanjian"
	print("main : After change, a = " + a + " b = " + b + "\n")
	print_line("main : Before suspend, d = " + d)
	suspend_until_cond(d, true, "==")	// wait until d is updated, and then check.
	print_line("main : After suspend, d = " + d + ". next step is set d to 888")
	suspend_until_cond(d, false, ">", 55)	// immediately check if d > 55
	d = 888
	print_line("main : c = " + c)
	print_line("main : a = " + a + " b = " + b)

	// TCPIP interface may not include port, but close_connection needs full address including port.
	// As such close_connection may not be able to find the connection.
	// TCPIP界面可能不包括端口。但是close_connection函数需要完整的地址包括端口，所以下面的函数会抛出异常。
	//close_connection(local_interface, remote_interface)
	close_local(local_interface)
endf

Help 
@language: 
  This function starts a sample parallel computing call based on TCPIP protocol. It
  accepts at most 4 parameters. The first one is string based client address (i.e. local
  address), like "192.168.1.145". The second one is string based server address (i.e.
  remote address), like "192.168.1.133". The third one is string based client2's address
  and the fourth is string based server2's address. All the parameters are optional. By
  default they are "127.0.0.1", "127.0.0.2", "127.0.0.3" and "127.0.0.4" respectively.
  This function is to test multi-level transferring source codes and resource files.
@end 
@language:simplified_chinese 
  这个函数发起一个基于TCPIP协议的并行计算示例call指令。它接受4个参数，分别是客户端1的地址，
  服务端1的地址，客户端2的地址，服务端2的地址。这些参数都是可省略的，缺省值分别为"127.0.0.1"，
  "127.0.0.2"，"127.0.0.3"和"127.0.0.4"。
  这个函数用于测试多级传输源文件和资源文件。
@end 
endh
function start_pcom_client1(...)
	variable protocol = "TCPIP", local_addr = "127.0.0.1", remote_addr = "127.0.0.2", local_addr2 = "127.0.0.3", remote_addr2 = "127.0.0.4"
	if (opt_argc >= 4)
		local_addr = opt_argv[0]
		remote_addr = opt_argv[1]
		local_addr2 = opt_argv[2]
		remote_addr2 = opt_argv[3]
	elseif (opt_argc >= 2)
		local_addr = opt_argv[0]
		remote_addr = opt_argv[1]
	elseif (opt_argc == 1)
		local_addr = opt_argv[0]
	endif
	print_line("main : local_addr = " + local_addr + " remote_addr = " + remote_addr + " local_addr2 = " + local_addr2 + " remote_addr2 = " + remote_addr2)
	variable local_interface, remote_interface, ret
	local_interface = ::mfp::paracomp::connect::generate_interface(protocol, local_addr)	// client address
	ret = ::mfp::paracomp::connect::initialize_local(local_interface)
	print("main : initialize_local client ret = " + ret + "\n")

	remote_interface = ::mfp::paracomp::connect::generate_interface(protocol, remote_addr)	// server address
	ret = ::mfp::paracomp::connect::connect(local_interface, remote_interface)
	print("main : connect ret = " + ret + "\n")

	variable conn1 = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")

	variable c
	call conn1
		variable local_interface2, remote_interface2, ret
		local_interface2 = ::mfp::paracomp::connect::generate_interface(protocol, local_addr2)	// client address
		ret = ::mfp::paracomp::connect::initialize_local(local_interface2)
		print("conn1 : initialize_local ret = " + ret + "\n")
		remote_interface2 = ::mfp::paracomp::connect::generate_interface(protocol, remote_addr2)	// server address
		ret = ::mfp::paracomp::connect::connect(local_interface2, remote_interface2)
		print("conn1 : connect ret = " + ret + "\n")
		variable conn2 = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")
		variable conn2Ret
		call conn2
			print("conn2 : Now let's start gem gem game.\n")
			gdi_test::game_test::gemgem::start_gemgem()
		endcall conn2Ret
	    print("conn1 : Now let's start super bunny game.\n")
		gdi_test::game_test::super_bunny::run()
		sleep(3000)
		close_connection(conn2)
		close_local(local_interface2)
	    return 23.79
	endcall c

	sleep(3000)
	// TCPIP interface may not include port, but close_connection needs full address including port.
	// As such close_connection may not be able to find the connection.
	// TCPIP界面可能不包括端口。但是close_connection函数需要完整的地址包括端口，所以下面的函数会抛出异常。
	//close_connection(local_interface, remote_interface)
	close_local(local_interface)
endf

Help 
@language: 
  This function starts a sample parallel computing call based on TCPIP protocol. It
  accepts at most 4 parameters. The first one is string based client address (i.e. local
  address), like "192.168.1.145". The second one is string based server address (i.e.
  remote address), like "192.168.1.133". The third one is string based client2's address
  and the fourth is string based server2's address. All the parameters are optional. By
  default they are "127.0.0.1", "127.0.0.2", "127.0.0.3" and "127.0.0.4" respectively.
  This function is to message sending between multi-level call blocks and main entity.
@end 
@language:simplified_chinese 
  这个函数发起一个基于TCPIP协议的并行计算示例call指令。它接受4个参数，分别是客户端1的地址，
  服务端1的地址，客户端2的地址，服务端2的地址。这些参数都是可省略的，缺省值分别为"127.0.0.1"，
  "127.0.0.2"，"127.0.0.3"和"127.0.0.4"。
  这个函数用于测试多级call程序块和main entity之间发送和接受消息。
@end 
endh
function start_pcom_client2(...)
	variable protocol = "TCPIP", local_addr = "127.0.0.1", remote_addr = "127.0.0.2", local_addr2 = "127.0.0.3", remote_addr2 = "127.0.0.4"
	if (opt_argc >= 4)
		local_addr = opt_argv[0]
		remote_addr = opt_argv[1]
		local_addr2 = opt_argv[2]
		remote_addr2 = opt_argv[3]
	elseif (opt_argc >= 2)
		local_addr = opt_argv[0]
		remote_addr = opt_argv[1]
	elseif (opt_argc == 1)
		local_addr = opt_argv[0]
	endif
	print_line("main : local_addr = " + local_addr + " remote_addr = " + remote_addr + " local_addr2 = " + local_addr2 + " remote_addr2 = " + remote_addr2)
	variable local_interface, remote_interface, local_interface2, remote_interface2, ret

	local_interface = ::mfp::paracomp::connect::generate_interface(protocol, local_addr)	// client address
	ret = ::mfp::paracomp::connect::initialize_local(local_interface)
	print("main : initialize_local client ret = " + ret + "\n")

	remote_interface = ::mfp::paracomp::connect::generate_interface(protocol, remote_addr)	// server address
	ret = ::mfp::paracomp::connect::connect(local_interface, remote_interface)
	print("main : connect " + local_addr + " -> " + remote_addr + " ret = " + ret + "\n")

	variable conn1 = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")
	
	remote_interface2 = ::mfp::paracomp::connect::generate_interface(protocol, remote_addr2)	// server address
	ret = ::mfp::paracomp::connect::connect(local_interface, remote_interface2)
	print("main : connect " + local_addr + " -> " + remote_addr2 + " ret = " + ret + "\n")
	variable conn12 = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")

	variable c, d, callId1, callId2
	call conn1 on callId1, callId2
		variable callInfo = get_call_info()
		callId1 = callInfo[0]
		call local
			variable msg = receive_sandbox_message(-1)
			print_line("conn1 : recieve msg : " + msg)
			msg = receive_sandbox_message(-1)
			print_line("conn1 : recieve msg : " + msg)
		endcall d
		ret = ::mfp::paracomp::connect::initialize_local(remote_interface)
		print("conn1 : initialize_remote client ret = " + ret + "\n")
		// no need to initialize local_interface as server again because we have initialize it
		// as server in the server run.
		//ret = ::mfp::paracomp::connect::initialize_local(local_interface, true)
		//print("conn1 : initialize_local server ret = " + ret + "\n")
		//ret = ::mfp::paracomp::connect::connect(remote_interface, local_interface)
		ret = ::mfp::paracomp::connect::get_incoming_connect(remote_interface, local_addr) // this statement will not work because we dont know local_addr's port
		print("conn1 : connect " + remote_addr + " -> " + local_addr + " ret = " + ret + "\n")
		variable conn1_rev = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")
		send_sandbox_message(conn1_rev, "This is from " + remote_addr + " to " + local_addr)
		
		local_interface2 = ::mfp::paracomp::connect::generate_interface(protocol, local_addr2)	// client address
		ret = ::mfp::paracomp::connect::initialize_local(local_interface2)
		print("conn1 : initialize_local ret = " + ret + "\n")
		remote_interface2 = ::mfp::paracomp::connect::generate_interface(protocol, remote_addr2)	// server address
		ret = ::mfp::paracomp::connect::connect(local_interface2, remote_interface2)
		print("conn1 : connect " + local_addr2 + " -> " + remote_addr2 + " ret = " + ret + "\n")
		variable conn2 = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")
		variable conn2Ret
		call conn2 on callId2
			variable callInfo = get_call_info()
			callId2 = callInfo[0]
			call local
				variable msg = receive_sandbox_message(-1)
				print_line("conn2 : receive msg : " + msg)
				msg = receive_sandbox_message(-1)
				print_line("conn2 : receive msg : " + msg)
			endcall d
			ret = ::mfp::paracomp::connect::initialize_local(remote_interface2)
			print("conn2 : initialize_remote client ret = " + ret + "\n")
			// no need to initialize local_interface as server again because we have initialize it
			// as server in the server run.
			//ret = ::mfp::paracomp::connect::initialize_local(local_interface2, true)
			//print("conn2 : initialize_local server ret = " + ret + "\n")
			ret = ::mfp::paracomp::connect::connect(remote_interface2, local_interface2)
			print("conn2 : connect " + remote_addr2 + " -> " + local_addr2 + " ret = " + ret + "\n")
			variable conn2_rev = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")
			send_sandbox_message(conn2_rev, remote_interface, local_addr, callId1, "This is from " + remote_addr2 + " to " + local_addr2)

			ret = ::mfp::paracomp::connect::connect(remote_interface2, local_interface)
			print("conn2 : connect " + remote_addr2 + " -> " + local_addr + " ret = " + ret + "\n")
			variable conn12_rev = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")
			if conn12_rev != null
				send_sandbox_message(conn12_rev, "This is from " + remote_addr2 + " to " + local_addr)
			endif
		endcall conn2Ret

		suspend_until_cond(callId2, false, "!=", null)	// immediate check if callId2 is not null
		print_line("conn1 : callId2 is " + callId2)
		send_sandbox_message(conn2, remote_interface2, local_addr2, callId2, "This is from " + local_addr2 + " to " + remote_addr2)
		print_line("conn1 : call returns " + conn2Ret)
		print_line("conn1 : Now close local_interface2 which is " + local_interface2)
		close_connection(conn2)
		close_local(local_interface2)
	    return 23.79
	endcall c

	suspend_until_cond(callId1, false, "!=", null)	// immediate check if callId1 is not null
	print_line("main : callId1 is " + callId1)
	send_sandbox_message(conn1, remote_interface, local_addr, callId1, "This is from " + local_addr + " to " + remote_addr)
	if conn12 != null
		suspend_until_cond(callId2, false, "!=", null)	// immediate check if callId2 is not null
		send_sandbox_message(conn12, remote_interface2, local_addr2, callId2, "This is from " + local_addr + " to " + remote_addr2)
	endif
	print_line("main : call returns " + c)
	print_line("main : Now close local_interface which is " + local_interface)
	close_connection(conn1)
	close_local(local_interface)
	call local
		variable msg = receive_sandbox_message(local_interface, -1)
		print_line("main : receive delayed msg : " + msg)
		msg = receive_sandbox_message(local_interface, -1)
		print_line("main : receive delayed msg : " + msg)
	endcall d
endf

Help 
@language: 
  This function tests sending message within same MFP instance, i.e. sandbox to another
  sandbox or to itself, sandbox to main entity, main entity to itself and main entity to
  a sandbox. It also tests connection between same address.
@end 
@language:simplified_chinese 
  这个函数测试在同一个MFP实例内部进行消息发送接收， 也就是说，在同一个MFP实例内部，一个call沙盒对另外一个call
  沙盒或者它自己发送消息，一个call沙盒对主进程发送消息，以及主进程对它自己或者一个call沙盒发送消息，本函数同时
  还对自己本身所在地址进行连接测试。
@end 
endh
function start_pcom_client3(...)
	variable local_addr1 = "127.0.0.1", local_addr2 = "127.0.0.2"
	if (opt_argc >= 1)
		local_addr2 = opt_argv[0]
	endif
	variable ret
	variable local_interface1 = ::mfp::paracomp::connect::generate_interface("TCPIP", local_addr1)
	ret = ::mfp::paracomp::connect::initialize_local(local_interface1)
	ret = ::mfp::paracomp::connect::connect(local_interface1, local_interface1, true)
	variable conn1 = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")
	variable conn1SrcAddr = ::mfp::data_struct::array_based::get_value_from_abdict(conn1, "SOURCE_ADDRESS")
	variable conn1DestAddr = ::mfp::data_struct::array_based::get_value_from_abdict(conn1, "ADDRESS")
	print_line("conn1 = " + conn1)
	variable local_interface2 = ::mfp::paracomp::connect::generate_interface("TCPIP", local_addr2)
	ret = ::mfp::paracomp::connect::initialize_local(local_interface2)
	ret = ::mfp::paracomp::connect::connect(local_interface2, local_interface2, true)
	variable conn2 = ::mfp::data_struct::array_based::get_value_from_abdict(ret, "CONNECT")
	print_line("conn2 = " + conn2)

	variable callId1, callId2, msg, a, b
	call conn1 on callId1
		variable callInfo = get_call_info()
		callId1 = callInfo[0]
		// send message to itself
		send_sandbox_message(local_interface1, conn1SrcAddr, callId1, "Simple mode: This is from " + conn1SrcAddr + " (sandbox 1) to " + conn1SrcAddr + " (sandbox 1).")
		msg = receive_sandbox_message(0)
		print_line("Call 1: msg = " + msg)
		sleep(1000) // sleep a while so that call sandbox2 can receive the updated callId1
		@build_asset copy_to_resource(get_upper_level_path(get_src_file_path()) + "superrabbit.mp3", "sounds/superrabbit.mp3")
		variable filePath = get_sandbox_session_resource_path() + "sounds/superrabbit.mp3"
		if (is_file_existing(filePath))
			print_line("file sounds/superrabbit.mp3 exists")
		else
			print_line("WRONG! file sounds/superrabbit.mp3 NOT exists")
		endif
		// send message to main entity
		send_sandbox_message("Simple mode: This is from " + conn1SrcAddr + " (sandbox 1) to main entity.")
		msg = receive_sandbox_message(-1)
		print_line("call 1: msg = " + msg)	// message from main entity.
		msg = receive_sandbox_message(-1)
		print_line("call 1: msg = " + msg)	// message from call sandbox 2.
		return 1
	endcall a
	suspend_until_cond(callId1, false, "!=", null)	// immediate check if callId1 is not null
	send_sandbox_message(local_interface1, conn1SrcAddr, callId1, "Simple mode: This is from main entity to " + conn1SrcAddr + " (sandbox 1).")
	call conn2 on callId1
		variable callInfo = get_call_info()
		callId2 = callInfo[0]
		suspend_until_cond(callId1, false, "!=", null)	// immediate check if callId1 is not null
		// send message to another sandbox in the same instance.
		send_sandbox_message(local_interface1, conn1SrcAddr, callId1, "Simple mode: This is from " + local_addr2 + " (sandbox 2) to " + conn1SrcAddr + " (sandbox 1).")
		return 2
	endcall b

	msg = receive_sandbox_message(local_interface1, -1)
	print_line("Main entity: msg = " + msg)	// receive message from sandbox 1.
	try
		send_sandbox_message("Simple mode: This is from main entity to main entity.")
		msg = receive_sandbox_message(local_interface1, 0)
		print_line("Main entity: msg = " + msg)	// receive message from itself.
	catch
		print_line("main entity cannot send message to itself.")
	endtry
	
	print_line("a = " + a + "b = " + b)
	callId1 = null
	
	call conn1 on callId1
		variable callInfo = get_call_info()
		callId1 = callInfo[0]
		// send message to itself
		send_sandbox_message(conn1, local_interface1, conn1SrcAddr, callId1, "Cross conn mode: This is from " + conn1SrcAddr + " (sandbox 3) to " + conn1SrcAddr + " (sandbox 3).")
		sleep(10)	// sleep a while, make sure the message can be received because it needs to send a call block.
		msg = receive_sandbox_message(0)
		print_line("call 3: msg = " + msg)
		sleep(1000) // sleep a while so that call sandbox2 can receive the updated callId1
		// send message to main entity
		send_sandbox_message(conn1, "Cross conn mode: This is from " + conn1SrcAddr + " (sandbox 3) to main entity.")
		msg = receive_sandbox_message(-1)
		print_line("call 3: msg = " + msg)	// message from call main entity.
		msg = receive_sandbox_message(-1)
		print_line("call 3: msg = " + msg)	// message from call sandbox 4
		return 3
	endcall a
	suspend_until_cond(callId1, false, "!=", null)	// immediate check if callId1 is not null
	send_sandbox_message(conn1, local_interface1, conn1SrcAddr, callId1, "Cross conn mode: This is from main entity to " + conn1SrcAddr + " (sandbox 3).")
	call conn2 on callId1
		variable callInfo = get_call_info()
		callId2 = callInfo[0]
		suspend_until_cond(callId1, false, "!=", null)	// immediate check if callId1 is not null
		// send message to another sandbox in the same instance.
		send_sandbox_message(conn2, local_interface1, conn1SrcAddr, callId1, "Cross conn mode: This is from " + local_addr2 + " (sandbox 4) to " + conn1SrcAddr + " (sandbox 3).")
		return 4
	endcall b

	msg = receive_sandbox_message(local_interface1, -1)
	print_line("Main entity: msg = " + msg)	// receive message from sandbox 3
	send_sandbox_message(conn1, "Cross conn mode: This is from main entity to main entity.")
	sleep(10)	// sleep a while, make sure the message can be received because it needs to send a call block.
	msg = receive_sandbox_message(local_interface1, 0)
	print_line("Main entity: msg = " + msg)	// receive message from itself.
	
	print_line("a = " + a + "b = " + b)
endf
endcs
